{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar fromString = require('uint8arrays/from-string');\n\nvar responseTypes = require('./response-types.js');\n\nvar multiaddr = require('multiaddr');\n\nconst mapEvent = event => {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(_ref => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n        };\n      }),\n      providers: (event.Responses || []).map(_ref2 => {\n        let {\n          ID,\n          Addrs\n        } = _ref2;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n        };\n      })\n    };\n  }\n\n  if (event.Type === responseTypes.FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      };\n    }\n\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(_ref3 => {\n        let {\n          ID,\n          Addrs\n        } = _ref3;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n        };\n      })\n    };\n  }\n\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n\n  if (event.Type === responseTypes.AddingPeer) {\n    const peers = event.Responses.map(_ref4 => {\n      let {\n        ID\n      } = _ref4;\n      return ID;\n    });\n\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n\n  throw new Error('Unknown DHT event type');\n};\n\nexports.mapEvent = mapEvent;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromString","require","responseTypes","multiaddr","mapEvent","event","Type","SendingQuery","to","ID","name","type","PeerResponse","from","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","Multiaddr","providers","FinalPeer","peer","length","QueryError","error","Error","Extra","Provider","Value","AddingPeer","peers","DialingPeer"],"sources":["C:/Users/mcnl/Desktop/gong/test/SafetyManagement_UI/client/node_modules/ipfs-http-client/cjs/src/dht/map-event.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar fromString = require('uint8arrays/from-string');\nvar responseTypes = require('./response-types.js');\nvar multiaddr = require('multiaddr');\n\nconst mapEvent = event => {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === responseTypes.AddingPeer) {\n    const peers = event.Responses.map(({ID}) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};\n\nexports.mapEvent = mapEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}