{"ast":null,"code":"\"use strict\"; // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport _classCallCheck from \"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport var AbiCoder = /*#__PURE__*/function () {\n  function AbiCoder(coerceFunc) {\n    _classCallCheck(this, AbiCoder);\n\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n\n  _createClass(AbiCoder, [{\n    key: \"_getCoder\",\n    value: function _getCoder(param) {\n      var _this = this;\n\n      switch (param.baseType) {\n        case \"address\":\n          return new AddressCoder(param.name);\n\n        case \"bool\":\n          return new BooleanCoder(param.name);\n\n        case \"string\":\n          return new StringCoder(param.name);\n\n        case \"bytes\":\n          return new BytesCoder(param.name);\n\n        case \"array\":\n          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n\n        case \"tuple\":\n          return new TupleCoder((param.components || []).map(function (component) {\n            return _this._getCoder(component);\n          }), param.name);\n\n        case \"\":\n          return new NullCoder(param.name);\n      } // u?int[0-9]*\n\n\n      var match = param.type.match(paramTypeNumber);\n\n      if (match) {\n        var size = parseInt(match[2] || \"256\");\n\n        if (size === 0 || size > 256 || size % 8 !== 0) {\n          logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n        }\n\n        return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n      } // bytes[0-9]+\n\n\n      match = param.type.match(paramTypeBytes);\n\n      if (match) {\n        var _size = parseInt(match[1]);\n\n        if (_size === 0 || _size > 32) {\n          logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n        }\n\n        return new FixedBytesCoder(_size, param.name);\n      }\n\n      return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n  }, {\n    key: \"_getWordSize\",\n    value: function _getWordSize() {\n      return 32;\n    }\n  }, {\n    key: \"_getReader\",\n    value: function _getReader(data, allowLoose) {\n      return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n  }, {\n    key: \"_getWriter\",\n    value: function _getWriter() {\n      return new Writer(this._getWordSize());\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue(types) {\n      var _this2 = this;\n\n      var coders = types.map(function (type) {\n        return _this2._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.defaultValue();\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(types, values) {\n      var _this3 = this;\n\n      if (types.length !== values.length) {\n        logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          count: {\n            types: types.length,\n            values: values.length\n          },\n          value: {\n            types: types,\n            values: values\n          }\n        });\n      }\n\n      var coders = types.map(function (type) {\n        return _this3._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n\n      var writer = this._getWriter();\n\n      coder.encode(writer, values);\n      return writer.data;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(types, data, loose) {\n      var _this4 = this;\n\n      var coders = types.map(function (type) {\n        return _this4._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.decode(this._getReader(arrayify(data), loose));\n    }\n  }]);\n\n  return AbiCoder;\n}();\nexport var defaultAbiCoder = new AbiCoder();","map":{"version":3,"sources":["../src.ts/abi-coder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\r\nimport { arrayify } from \"@ethersproject/bytes\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\nimport { Reader, Writer } from \"./coders/abstract-coder\";\r\nimport { AddressCoder } from \"./coders/address\";\r\nimport { ArrayCoder } from \"./coders/array\";\r\nimport { BooleanCoder } from \"./coders/boolean\";\r\nimport { BytesCoder } from \"./coders/bytes\";\r\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\r\nimport { NullCoder } from \"./coders/null\";\r\nimport { NumberCoder } from \"./coders/number\";\r\nimport { StringCoder } from \"./coders/string\";\r\nimport { TupleCoder } from \"./coders/tuple\";\r\nimport { ParamType } from \"./fragments\";\r\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\r\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\r\nexport class AbiCoder {\r\n    constructor(coerceFunc) {\r\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\r\n    }\r\n    _getCoder(param) {\r\n        switch (param.baseType) {\r\n            case \"address\":\r\n                return new AddressCoder(param.name);\r\n            case \"bool\":\r\n                return new BooleanCoder(param.name);\r\n            case \"string\":\r\n                return new StringCoder(param.name);\r\n            case \"bytes\":\r\n                return new BytesCoder(param.name);\r\n            case \"array\":\r\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\r\n            case \"tuple\":\r\n                return new TupleCoder((param.components || []).map((component) => {\r\n                    return this._getCoder(component);\r\n                }), param.name);\r\n            case \"\":\r\n                return new NullCoder(param.name);\r\n        }\r\n        // u?int[0-9]*\r\n        let match = param.type.match(paramTypeNumber);\r\n        if (match) {\r\n            let size = parseInt(match[2] || \"256\");\r\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\r\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\r\n            }\r\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\r\n        }\r\n        // bytes[0-9]+\r\n        match = param.type.match(paramTypeBytes);\r\n        if (match) {\r\n            let size = parseInt(match[1]);\r\n            if (size === 0 || size > 32) {\r\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\r\n            }\r\n            return new FixedBytesCoder(size, param.name);\r\n        }\r\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\r\n    }\r\n    _getWordSize() { return 32; }\r\n    _getReader(data, allowLoose) {\r\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\r\n    }\r\n    _getWriter() {\r\n        return new Writer(this._getWordSize());\r\n    }\r\n    getDefaultValue(types) {\r\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\r\n        const coder = new TupleCoder(coders, \"_\");\r\n        return coder.defaultValue();\r\n    }\r\n    encode(types, values) {\r\n        if (types.length !== values.length) {\r\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\r\n                count: { types: types.length, values: values.length },\r\n                value: { types: types, values: values }\r\n            });\r\n        }\r\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\r\n        const coder = (new TupleCoder(coders, \"_\"));\r\n        const writer = this._getWriter();\r\n        coder.encode(writer, values);\r\n        return writer.data;\r\n    }\r\n    decode(types, data, loose) {\r\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\r\n        const coder = new TupleCoder(coders, \"_\");\r\n        return coder.decode(this._getReader(arrayify(data), loose));\r\n    }\r\n}\r\nexport const defaultAbiCoder = new AbiCoder();\r\n//# sourceMappingURL=abi-coder.js.map"]},"metadata":{},"sourceType":"module"}