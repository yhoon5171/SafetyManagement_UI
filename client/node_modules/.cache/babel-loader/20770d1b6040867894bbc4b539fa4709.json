{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar codec = require('./codec');\n\nvar protocols = require('./protocols-table');\n\nvar varint = require('varint');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('multiformats/bases/base58'),\n    base58btc = _require2.base58btc;\n\nvar errCode = require('err-code');\n\nvar inspect = Symbol.for('nodejs.util.inspect.custom');\n\nvar _require3 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require3.toString;\n\nvar _require4 = require('uint8arrays/equals'),\n    uint8ArrayEquals = _require4.equals;\n/**\r\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\r\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\r\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\r\n * @typedef {import('./types').Protocol} Protocol\r\n */\n\n/** @type {Map<string, Resolver>} */\n\n\nvar resolvers = new Map();\nvar symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\r\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\r\n * a Uint8Array, String or another Multiaddr instance\r\n * public key.\r\n *\r\n */\n\nvar Multiaddr = /*#__PURE__*/function () {\n  /**\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   * ```\r\n   *\r\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\r\n   */\n  function Multiaddr(addr) {\n    _classCallCheck(this, Multiaddr);\n\n    // default\n    if (addr == null) {\n      addr = '';\n    } // Define symbol\n\n\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(\"multiaddr \\\"\".concat(addr, \"\\\" must start with a \\\"/\\\"\"));\n      }\n\n      this.bytes = codec.fromString(addr);\n    } else if (Multiaddr.isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  /**\r\n   * Returns Multiaddr as a String\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\r\n   * // '/ip4/127.0.0.1/tcp/4001'\r\n   * ```\r\n   */\n\n\n  _createClass(Multiaddr, [{\n    key: \"toString\",\n    value: function toString() {\n      return codec.bytesToString(this.bytes);\n    }\n    /**\r\n     * Returns Multiaddr as a JSON encoded object\r\n     *\r\n     * @example\r\n     * ```js\r\n     * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\r\n     * // '/ip4/127.0.0.1/tcp/4001'\r\n     * ```\r\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n    /**\r\n     * Returns Multiaddr as a convinient options object to be used with net.createConnection\r\n     *\r\n     * @example\r\n     * ```js\r\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\r\n     * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\r\n     * ```\r\n     */\n\n  }, {\n    key: \"toOptions\",\n    value: function toOptions() {\n      /** @type {MultiaddrObject} */\n      var opts = {};\n      var parsed = this.toString().split('/');\n      opts.family = parsed[1] === 'ip4' ? 4 : 6;\n      opts.host = parsed[2];\n      opts.transport = parsed[3];\n      opts.port = parseInt(parsed[4]);\n      return opts;\n    }\n    /**\r\n     * Returns the protocols the Multiaddr is defined with, as an array of objects, in\r\n     * left-to-right order. Each object contains the protocol code, protocol name,\r\n     * and the size of its address space in bits.\r\n     * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n     *\r\n     * @example\r\n     * ```js\r\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\r\n     * // [ { code: 4, size: 32, name: 'ip4' },\r\n     * //   { code: 6, size: 16, name: 'tcp' } ]\r\n     * ```\r\n     *\r\n     * @returns {Protocol[]} protocols - All the protocols the address is composed of\r\n     */\n\n  }, {\n    key: \"protos\",\n    value: function protos() {\n      return this.protoCodes().map(function (code) {\n        return Object.assign({}, protocols(code));\n      });\n    }\n    /**\r\n     * Returns the codes of the protocols in left-to-right order.\r\n     * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\r\n     * // [ 4, 6 ]\r\n     * ```\r\n     *\r\n     * @returns {number[]} protocol codes\r\n     */\n\n  }, {\n    key: \"protoCodes\",\n    value: function protoCodes() {\n      var codes = [];\n      var buf = this.bytes;\n      var i = 0;\n\n      while (i < buf.length) {\n        var code = varint.decode(buf, i);\n        var n = varint.decode.bytes;\n        var p = protocols(code);\n        var size = codec.sizeForAddr(p, buf.slice(i + n));\n        i += size + n;\n        codes.push(code);\n      }\n\n      return codes;\n    }\n    /**\r\n     * Returns the names of the protocols in left-to-right order.\r\n     * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n     *\r\n     * @example\r\n     * ```js\r\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\r\n     * // [ 'ip4', 'tcp' ]\r\n     * ```\r\n     *\r\n     * @returns {string[]} protocol names\r\n     */\n\n  }, {\n    key: \"protoNames\",\n    value: function protoNames() {\n      return this.protos().map(function (proto) {\n        return proto.name;\n      });\n    }\n    /**\r\n     * Returns a tuple of parts\r\n     *\r\n     * @example\r\n     * ```js\r\n     * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\r\n     * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\r\n     * ```\r\n     */\n\n  }, {\n    key: \"tuples\",\n    value: function tuples() {\n      return codec.bytesToTuples(this.bytes);\n    }\n    /**\r\n     * Returns a tuple of string/number parts\r\n     * - tuples[][0] = code of protocol\r\n     * - tuples[][1] = contents of address\r\n     *\r\n     * @example\r\n     * ```js\r\n     * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\r\n     * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\r\n     * ```\r\n     */\n\n  }, {\n    key: \"stringTuples\",\n    value: function stringTuples() {\n      var t = codec.bytesToTuples(this.bytes);\n      return codec.tuplesToStringTuples(t);\n    }\n    /**\r\n     * Encapsulates a Multiaddr in another Multiaddr\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n     *\r\n     * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n     *\r\n     * const mh3 = mh1.encapsulate(mh2)\r\n     * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n     *\r\n     * mh3.toString()\r\n     * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\r\n     * ```\r\n     *\r\n     * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\r\n     */\n\n  }, {\n    key: \"encapsulate\",\n    value: function encapsulate(addr) {\n      addr = new Multiaddr(addr);\n      return new Multiaddr(this.toString() + addr.toString());\n    }\n    /**\r\n     * Decapsulates a Multiaddr from another Multiaddr\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n     *\r\n     * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n     *\r\n     * const mh3 = mh1.encapsulate(mh2)\r\n     * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n     *\r\n     * mh3.decapsulate(mh2).toString()\r\n     * // '/ip4/8.8.8.8/tcp/1080'\r\n     * ```\r\n     *\r\n     * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\r\n     * @returns {Multiaddr}\r\n     */\n\n  }, {\n    key: \"decapsulate\",\n    value: function decapsulate(addr) {\n      var addrString = addr.toString();\n      var s = this.toString();\n      var i = s.lastIndexOf(addrString);\n\n      if (i < 0) {\n        throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);\n      }\n\n      return new Multiaddr(s.slice(0, i));\n    }\n    /**\r\n     * A more reliable version of `decapsulate` if you are targeting a\r\n     * specific code, such as 421 (the `p2p` protocol code). The last index of the code\r\n     * will be removed from the `Multiaddr`, and a new instance will be returned.\r\n     * If the code is not present, the original `Multiaddr` is returned.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\r\n     * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\r\n     *\r\n     * addr.decapsulateCode(421).toString()\r\n     * // '/ip4/0.0.0.0/tcp/8080'\r\n     *\r\n     * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\r\n     * // '/ip4/127.0.0.1/tcp/8080'\r\n     * ```\r\n     *\r\n     * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\r\n     * @returns {Multiaddr}\r\n     */\n\n  }, {\n    key: \"decapsulateCode\",\n    value: function decapsulateCode(code) {\n      var tuples = this.tuples();\n\n      for (var i = tuples.length - 1; i >= 0; i--) {\n        if (tuples[i][0] === code) {\n          return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n        }\n      }\n\n      return this;\n    }\n    /**\r\n     * Extract the peerId if the multiaddr contains one\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\r\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\r\n     *\r\n     * // should return QmValidBase58string or null if the id is missing or invalid\r\n     * const peerId = mh1.getPeerId()\r\n     * ```\r\n     *\r\n     * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\r\n     */\n\n  }, {\n    key: \"getPeerId\",\n    value: function getPeerId() {\n      try {\n        var tuples = this.stringTuples().filter(function (tuple) {\n          if (tuple[0] === protocols.names.ipfs.code) {\n            return true;\n          }\n\n          return false;\n        }); // Get the last ipfs tuple ['ipfs', 'peerid string']\n\n        var tuple = tuples.pop();\n\n        if (tuple && tuple[1]) {\n          var peerIdStr = tuple[1]; // peer id is base58btc encoded string but not multibase encoded so add the `z`\n          // prefix so we can validate that it is correctly encoded\n\n          if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n            return uint8ArrayToString(base58btc.decode(\"z\".concat(peerIdStr)), 'base58btc');\n          } // try to parse peer id as CID\n\n\n          return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n        }\n\n        return null;\n      } catch (e) {\n        return null;\n      }\n    }\n    /**\r\n     * Extract the path if the multiaddr contains one\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\r\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\r\n     *\r\n     * // should return utf8 string or null if the id is missing or invalid\r\n     * const path = mh1.getPath()\r\n     * ```js\r\n     *\r\n     * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\r\n     */\n\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      var path = null;\n\n      try {\n        path = this.stringTuples().filter(function (tuple) {\n          var proto = protocols(tuple[0]);\n\n          if (proto.path) {\n            return true;\n          }\n\n          return false;\n        })[0][1];\n\n        if (!path) {\n          path = null;\n        }\n      } catch (e) {\n        path = null;\n      }\n\n      return path;\n    }\n    /**\r\n     * Checks if two Multiaddrs are the same\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n     * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n     *\r\n     * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n     *\r\n     * mh1.equals(mh1)\r\n     * // true\r\n     *\r\n     * mh1.equals(mh2)\r\n     * // false\r\n     * ```\r\n     *\r\n     * @param {Multiaddr} addr\r\n     * @returns {boolean}\r\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(addr) {\n      return uint8ArrayEquals(this.bytes, addr.bytes);\n    }\n    /**\r\n     * Resolve multiaddr if containing resolvable hostname.\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\r\n     * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\r\n     * const resolvedMultiaddrs = await mh1.resolve()\r\n     * // [\r\n     * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\r\n     * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\r\n     * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\r\n     * // ]\r\n     * ```\r\n     *\r\n     * @returns {Promise<Array<Multiaddr>>}\r\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function () {\n      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var resolvableProto, resolver, addresses;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resolvableProto = this.protos().find(function (p) {\n                  return p.resolvable;\n                }); // Multiaddr is not resolvable?\n\n                if (resolvableProto) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", [this]);\n\n              case 3:\n                resolver = resolvers.get(resolvableProto.name);\n\n                if (resolver) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw errCode(new Error(\"no available resolver for \".concat(resolvableProto.name)), 'ERR_NO_AVAILABLE_RESOLVER');\n\n              case 6:\n                _context.next = 8;\n                return resolver(this);\n\n              case 8:\n                addresses = _context.sent;\n                return _context.abrupt(\"return\", addresses.map(function (a) {\n                  return new Multiaddr(a);\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolve() {\n        return _resolve.apply(this, arguments);\n      }\n\n      return resolve;\n    }()\n    /**\r\n     * Gets a Multiaddrs node-friendly address object. Note that protocol information\r\n     * is left out: in Node (and most network systems) the protocol is unknowable\r\n     * given only the address.\r\n     *\r\n     * Has to be a ThinWaist Address, otherwise throws error\r\n     *\r\n     * @example\r\n     * ```js\r\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\r\n     * // {family: 4, address: '127.0.0.1', port: 4001}\r\n     * ```\r\n     *\r\n     * @returns {{family: 4 | 6, address: string, port: number}}\r\n     * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\r\n     */\n\n  }, {\n    key: \"nodeAddress\",\n    value: function nodeAddress() {\n      var codes = this.protoCodes();\n      var names = this.protoNames();\n      var parts = this.toString().split('/').slice(1);\n\n      if (parts.length < 4) {\n        throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".');\n      } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n        throw new Error(\"no protocol with name: \\\"'\".concat(names[0], \"'\\\". Must have a valid family name: \\\"{ip4, ip6, dns4, dns6}\\\".\"));\n      } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n        throw new Error(\"no protocol with name: \\\"'\".concat(names[1], \"'\\\". Must have a valid transport protocol: \\\"{tcp, udp}\\\".\"));\n      }\n\n      return {\n        family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n        address: parts[1],\n        port: parseInt(parts[3]) // tcp or udp port\n\n      };\n    }\n    /**\r\n     * Returns if a Multiaddr is a Thin Waist address or not.\r\n     *\r\n     * Thin Waist is if a Multiaddr adheres to the standard combination of:\r\n     *\r\n     * `{IPv4, IPv6}/{TCP, UDP}`\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n     * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\r\n     * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\r\n     * const mh3 = mh1.encapsulate(mh2)\r\n     * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\r\n     * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\r\n     * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\r\n     * mh1.isThinWaistAddress()\r\n     * // true\r\n     * mh2.isThinWaistAddress()\r\n     * // true\r\n     * mh3.isThinWaistAddress()\r\n     * // false\r\n     * mh4.isThinWaistAddress()\r\n     * // false\r\n     * ```\r\n     *\r\n     * @param {Multiaddr} [addr] - Defaults to using `this` instance\r\n     */\n\n  }, {\n    key: \"isThinWaistAddress\",\n    value: function isThinWaistAddress(addr) {\n      var protos = (addr || this).protos();\n\n      if (protos.length !== 2) {\n        return false;\n      }\n\n      if (protos[0].code !== 4 && protos[0].code !== 41) {\n        return false;\n      }\n\n      if (protos[1].code !== 6 && protos[1].code !== 273) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\r\n     * Creates a Multiaddr from a node-friendly address object\r\n     *\r\n     * @example\r\n     * ```js\r\n     * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\r\n     * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n     * ```\r\n     *\r\n     * @param {{family: 4 | 6, address: string, port: number}} addr\r\n     * @param {string} transport\r\n     */\n\n  }, {\n    key: inspect,\n    value:\n    /**\r\n     * Returns Multiaddr as a human-readable string.\r\n     * For post Node.js v10.0.0.\r\n     * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\r\n     *\r\n     * @example\r\n     * ```js\r\n     * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\r\n     * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n     * ```\r\n     *\r\n     * @returns {string}\r\n     */\n    function value() {\n      return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n    }\n    /**\r\n     * Returns Multiaddr as a human-readable string.\r\n     * Fallback for pre Node.js v10.0.0.\r\n     * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\r\n     *\r\n     * @example\r\n     * ```js\r\n     * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\r\n     * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n     * ```\r\n     *\r\n     * @returns {string}\r\n     */\n\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n    }\n  }], [{\n    key: \"fromNodeAddress\",\n    value: function fromNodeAddress(addr, transport) {\n      if (!addr) {\n        throw new Error('requires node address object');\n      }\n\n      if (!transport) {\n        throw new Error('requires transport protocol');\n      }\n\n      var ip;\n\n      switch (addr.family) {\n        case 4:\n          ip = 'ip4';\n          break;\n\n        case 6:\n          ip = 'ip6';\n          break;\n\n        default:\n          throw Error(\"Invalid addr family. Got '\".concat(addr.family, \"' instead of 4 or 6\"));\n      }\n\n      return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n    }\n    /**\r\n     * Returns if something is a Multiaddr that is a name\r\n     *\r\n     * @param {Multiaddr} addr\r\n     * @returns {boolean} isName\r\n     */\n\n  }, {\n    key: \"isName\",\n    value: function isName(addr) {\n      if (!Multiaddr.isMultiaddr(addr)) {\n        return false;\n      } // if a part of the multiaddr is resolvable, then return true\n\n\n      return addr.protos().some(function (proto) {\n        return proto.resolvable;\n      });\n    }\n    /**\r\n     * Check if object is a CID instance\r\n     *\r\n     * @param {any} value\r\n     * @returns {value is Multiaddr}\r\n     */\n\n  }, {\n    key: \"isMultiaddr\",\n    value: function isMultiaddr(value) {\n      return value instanceof Multiaddr || Boolean(value && value[symbol]);\n    }\n  }]);\n\n  return Multiaddr;\n}();\n/**\r\n * Object containing table, names and codes of all supported protocols.\r\n * To get the protocol values from a Multiaddr, you can use\r\n * [`.protos()`](#multiaddrprotos),\r\n * [`.protoCodes()`](#multiaddrprotocodes) or\r\n * [`.protoNames()`](#multiaddrprotonames)\r\n *\r\n * @returns {{table: Array, names: Object, codes: Object}}\r\n */\n\n\nMultiaddr.protocols = protocols;\nMultiaddr.resolvers = resolvers;\n/**\r\n * Static factory\r\n *\r\n * @param {MultiaddrInput} addr\r\n */\n\nfunction multiaddr(addr) {\n  return new Multiaddr(addr);\n}\n\nmodule.exports = {\n  Multiaddr: Multiaddr,\n  multiaddr: multiaddr,\n  protocols: protocols,\n  resolvers: resolvers\n};","map":{"version":3,"names":["codec","require","protocols","varint","CID","base58btc","errCode","inspect","Symbol","for","uint8ArrayToString","toString","uint8ArrayEquals","equals","resolvers","Map","symbol","Multiaddr","addr","Object","defineProperty","value","Uint8Array","bytes","fromBytes","length","charAt","Error","fromString","isMultiaddr","bytesToString","opts","parsed","split","family","host","transport","port","parseInt","protoCodes","map","code","assign","codes","buf","i","decode","n","p","size","sizeForAddr","slice","push","protos","proto","name","bytesToTuples","t","tuplesToStringTuples","addrString","s","lastIndexOf","tuples","tuplesToBytes","stringTuples","filter","tuple","names","ipfs","pop","peerIdStr","parse","multihash","e","path","resolvableProto","find","resolvable","resolver","get","addresses","a","protoNames","parts","address","ip","join","some","Boolean","multiaddr","module","exports"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/multiaddr/src/index.js"],"sourcesContent":["'use strict'\r\n\r\nconst codec = require('./codec')\r\nconst protocols = require('./protocols-table')\r\nconst varint = require('varint')\r\nconst { CID } = require('multiformats/cid')\r\nconst { base58btc } = require('multiformats/bases/base58')\r\nconst errCode = require('err-code')\r\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\r\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\r\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\r\n\r\n/**\r\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\r\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\r\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\r\n * @typedef {import('./types').Protocol} Protocol\r\n */\r\n\r\n/** @type {Map<string, Resolver>} */\r\nconst resolvers = new Map()\r\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\r\n\r\n/**\r\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\r\n * a Uint8Array, String or another Multiaddr instance\r\n * public key.\r\n *\r\n */\r\nclass Multiaddr {\r\n  /**\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   * ```\r\n   *\r\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\r\n   */\r\n  constructor (addr) {\r\n    // default\r\n    if (addr == null) {\r\n      addr = ''\r\n    }\r\n\r\n    // Define symbol\r\n    Object.defineProperty(this, symbol, { value: true })\r\n\r\n    if (addr instanceof Uint8Array) {\r\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\r\n      this.bytes = codec.fromBytes(addr)\r\n    } else if (typeof addr === 'string') {\r\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\r\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\r\n      }\r\n      this.bytes = codec.fromString(addr)\r\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\r\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\r\n    } else {\r\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns Multiaddr as a String\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\r\n   * // '/ip4/127.0.0.1/tcp/4001'\r\n   * ```\r\n   */\r\n  toString () {\r\n    return codec.bytesToString(this.bytes)\r\n  }\r\n\r\n  /**\r\n   * Returns Multiaddr as a JSON encoded object\r\n   *\r\n   * @example\r\n   * ```js\r\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\r\n   * // '/ip4/127.0.0.1/tcp/4001'\r\n   * ```\r\n   */\r\n  toJSON () {\r\n    return this.toString()\r\n  }\r\n\r\n  /**\r\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\r\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\r\n   * ```\r\n   */\r\n  toOptions () {\r\n    /** @type {MultiaddrObject} */\r\n    const opts = {}\r\n    const parsed = this.toString().split('/')\r\n    opts.family = parsed[1] === 'ip4' ? 4 : 6\r\n    opts.host = parsed[2]\r\n    opts.transport = parsed[3]\r\n    opts.port = parseInt(parsed[4])\r\n    return opts\r\n  }\r\n\r\n  /**\r\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\r\n   * left-to-right order. Each object contains the protocol code, protocol name,\r\n   * and the size of its address space in bits.\r\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\r\n   * // [ { code: 4, size: 32, name: 'ip4' },\r\n   * //   { code: 6, size: 16, name: 'tcp' } ]\r\n   * ```\r\n   *\r\n   * @returns {Protocol[]} protocols - All the protocols the address is composed of\r\n   */\r\n  protos () {\r\n    return this.protoCodes().map(code => Object.assign({}, protocols(code)))\r\n  }\r\n\r\n  /**\r\n   * Returns the codes of the protocols in left-to-right order.\r\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\r\n   * // [ 4, 6 ]\r\n   * ```\r\n   *\r\n   * @returns {number[]} protocol codes\r\n   */\r\n  protoCodes () {\r\n    const codes = []\r\n    const buf = this.bytes\r\n    let i = 0\r\n    while (i < buf.length) {\r\n      const code = varint.decode(buf, i)\r\n      const n = varint.decode.bytes\r\n\r\n      const p = protocols(code)\r\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\r\n\r\n      i += (size + n)\r\n      codes.push(code)\r\n    }\r\n\r\n    return codes\r\n  }\r\n\r\n  /**\r\n   * Returns the names of the protocols in left-to-right order.\r\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\r\n   * // [ 'ip4', 'tcp' ]\r\n   * ```\r\n   *\r\n   * @returns {string[]} protocol names\r\n   */\r\n  protoNames () {\r\n    return this.protos().map(proto => proto.name)\r\n  }\r\n\r\n  /**\r\n   * Returns a tuple of parts\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\r\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\r\n   * ```\r\n   */\r\n  tuples () {\r\n    return codec.bytesToTuples(this.bytes)\r\n  }\r\n\r\n  /**\r\n   * Returns a tuple of string/number parts\r\n   * - tuples[][0] = code of protocol\r\n   * - tuples[][1] = contents of address\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\r\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\r\n   * ```\r\n   */\r\n  stringTuples () {\r\n    const t = codec.bytesToTuples(this.bytes)\r\n    return codec.tuplesToStringTuples(t)\r\n  }\r\n\r\n  /**\r\n   * Encapsulates a Multiaddr in another Multiaddr\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n   *\r\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * const mh3 = mh1.encapsulate(mh2)\r\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * mh3.toString()\r\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\r\n   * ```\r\n   *\r\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\r\n   */\r\n  encapsulate (addr) {\r\n    addr = new Multiaddr(addr)\r\n    return new Multiaddr(this.toString() + addr.toString())\r\n  }\r\n\r\n  /**\r\n   * Decapsulates a Multiaddr from another Multiaddr\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n   *\r\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * const mh3 = mh1.encapsulate(mh2)\r\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * mh3.decapsulate(mh2).toString()\r\n   * // '/ip4/8.8.8.8/tcp/1080'\r\n   * ```\r\n   *\r\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\r\n   * @returns {Multiaddr}\r\n   */\r\n  decapsulate (addr) {\r\n    const addrString = addr.toString()\r\n    const s = this.toString()\r\n    const i = s.lastIndexOf(addrString)\r\n    if (i < 0) {\r\n      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\r\n    }\r\n    return new Multiaddr(s.slice(0, i))\r\n  }\r\n\r\n  /**\r\n   * A more reliable version of `decapsulate` if you are targeting a\r\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\r\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\r\n   * If the code is not present, the original `Multiaddr` is returned.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\r\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\r\n   *\r\n   * addr.decapsulateCode(421).toString()\r\n   * // '/ip4/0.0.0.0/tcp/8080'\r\n   *\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\r\n   * // '/ip4/127.0.0.1/tcp/8080'\r\n   * ```\r\n   *\r\n   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\r\n   * @returns {Multiaddr}\r\n   */\r\n  decapsulateCode (code) {\r\n    const tuples = this.tuples()\r\n    for (let i = tuples.length - 1; i >= 0; i--) {\r\n      if (tuples[i][0] === code) {\r\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\r\n      }\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Extract the peerId if the multiaddr contains one\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\r\n   *\r\n   * // should return QmValidBase58string or null if the id is missing or invalid\r\n   * const peerId = mh1.getPeerId()\r\n   * ```\r\n   *\r\n   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\r\n   */\r\n  getPeerId () {\r\n    try {\r\n      const tuples = this.stringTuples().filter((tuple) => {\r\n        if (tuple[0] === protocols.names.ipfs.code) {\r\n          return true\r\n        }\r\n        return false\r\n      })\r\n\r\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\r\n      const tuple = tuples.pop()\r\n      if (tuple && tuple[1]) {\r\n        const peerIdStr = tuple[1]\r\n\r\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\r\n        // prefix so we can validate that it is correctly encoded\r\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\r\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\r\n        }\r\n\r\n        // try to parse peer id as CID\r\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\r\n      }\r\n\r\n      return null\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract the path if the multiaddr contains one\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\r\n   *\r\n   * // should return utf8 string or null if the id is missing or invalid\r\n   * const path = mh1.getPath()\r\n   * ```js\r\n   *\r\n   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\r\n   */\r\n  getPath () {\r\n    let path = null\r\n    try {\r\n      path = this.stringTuples().filter((tuple) => {\r\n        const proto = protocols(tuple[0])\r\n        if (proto.path) {\r\n          return true\r\n        }\r\n        return false\r\n      })[0][1]\r\n\r\n      if (!path) {\r\n        path = null\r\n      }\r\n    } catch (e) {\r\n      path = null\r\n    }\r\n    return path\r\n  }\r\n\r\n  /**\r\n   * Checks if two Multiaddrs are the same\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n   *\r\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * mh1.equals(mh1)\r\n   * // true\r\n   *\r\n   * mh1.equals(mh2)\r\n   * // false\r\n   * ```\r\n   *\r\n   * @param {Multiaddr} addr\r\n   * @returns {boolean}\r\n   */\r\n  equals (addr) {\r\n    return uint8ArrayEquals(this.bytes, addr.bytes)\r\n  }\r\n\r\n  /**\r\n   * Resolve multiaddr if containing resolvable hostname.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\r\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\r\n   * const resolvedMultiaddrs = await mh1.resolve()\r\n   * // [\r\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\r\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\r\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\r\n   * // ]\r\n   * ```\r\n   *\r\n   * @returns {Promise<Array<Multiaddr>>}\r\n   */\r\n  async resolve () {\r\n    const resolvableProto = this.protos().find((p) => p.resolvable)\r\n\r\n    // Multiaddr is not resolvable?\r\n    if (!resolvableProto) {\r\n      return [this]\r\n    }\r\n\r\n    const resolver = resolvers.get(resolvableProto.name)\r\n    if (!resolver) {\r\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\r\n    }\r\n\r\n    const addresses = await resolver(this)\r\n    return addresses.map((a) => new Multiaddr(a))\r\n  }\r\n\r\n  /**\r\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\r\n   * is left out: in Node (and most network systems) the protocol is unknowable\r\n   * given only the address.\r\n   *\r\n   * Has to be a ThinWaist Address, otherwise throws error\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\r\n   * // {family: 4, address: '127.0.0.1', port: 4001}\r\n   * ```\r\n   *\r\n   * @returns {{family: 4 | 6, address: string, port: number}}\r\n   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\r\n   */\r\n  nodeAddress () {\r\n    const codes = this.protoCodes()\r\n    const names = this.protoNames()\r\n    const parts = this.toString().split('/').slice(1)\r\n\r\n    if (parts.length < 4) {\r\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".')\r\n    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\r\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`)\r\n    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\r\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\r\n    }\r\n\r\n    return {\r\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\r\n      address: parts[1],\r\n      port: parseInt(parts[3]) // tcp or udp port\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns if a Multiaddr is a Thin Waist address or not.\r\n   *\r\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\r\n   *\r\n   * `{IPv4, IPv6}/{TCP, UDP}`\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\r\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\r\n   * const mh3 = mh1.encapsulate(mh2)\r\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\r\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\r\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\r\n   * mh1.isThinWaistAddress()\r\n   * // true\r\n   * mh2.isThinWaistAddress()\r\n   * // true\r\n   * mh3.isThinWaistAddress()\r\n   * // false\r\n   * mh4.isThinWaistAddress()\r\n   * // false\r\n   * ```\r\n   *\r\n   * @param {Multiaddr} [addr] - Defaults to using `this` instance\r\n   */\r\n  isThinWaistAddress (addr) {\r\n    const protos = (addr || this).protos()\r\n\r\n    if (protos.length !== 2) {\r\n      return false\r\n    }\r\n\r\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\r\n      return false\r\n    }\r\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Creates a Multiaddr from a node-friendly address object\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   * ```\r\n   *\r\n   * @param {{family: 4 | 6, address: string, port: number}} addr\r\n   * @param {string} transport\r\n   */\r\n  static fromNodeAddress (addr, transport) {\r\n    if (!addr) { throw new Error('requires node address object') }\r\n    if (!transport) { throw new Error('requires transport protocol') }\r\n    let ip\r\n    switch (addr.family) {\r\n      case 4:\r\n        ip = 'ip4'\r\n        break\r\n      case 6:\r\n        ip = 'ip6'\r\n        break\r\n      default:\r\n        throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`)\r\n    }\r\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\r\n  }\r\n\r\n  /**\r\n   * Returns if something is a Multiaddr that is a name\r\n   *\r\n   * @param {Multiaddr} addr\r\n   * @returns {boolean} isName\r\n   */\r\n  static isName (addr) {\r\n    if (!Multiaddr.isMultiaddr(addr)) {\r\n      return false\r\n    }\r\n\r\n    // if a part of the multiaddr is resolvable, then return true\r\n    return addr.protos().some((proto) => proto.resolvable)\r\n  }\r\n\r\n  /**\r\n   * Check if object is a CID instance\r\n   *\r\n   * @param {any} value\r\n   * @returns {value is Multiaddr}\r\n   */\r\n  static isMultiaddr (value) {\r\n    return value instanceof Multiaddr || Boolean(value && value[symbol])\r\n  }\r\n\r\n  /**\r\n   * Returns Multiaddr as a human-readable string.\r\n   * For post Node.js v10.0.0.\r\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\r\n   *\r\n   * @example\r\n   * ```js\r\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\r\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n   * ```\r\n   *\r\n   * @returns {string}\r\n   */\r\n  [inspect] () {\r\n    return '<Multiaddr ' +\r\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\r\n    codec.bytesToString(this.bytes) + '>'\r\n  }\r\n\r\n  /**\r\n   * Returns Multiaddr as a human-readable string.\r\n   * Fallback for pre Node.js v10.0.0.\r\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\r\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n   * ```\r\n   *\r\n   * @returns {string}\r\n   */\r\n  inspect () {\r\n    return '<Multiaddr ' +\r\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\r\n      codec.bytesToString(this.bytes) + '>'\r\n  }\r\n}\r\n\r\n/**\r\n * Object containing table, names and codes of all supported protocols.\r\n * To get the protocol values from a Multiaddr, you can use\r\n * [`.protos()`](#multiaddrprotos),\r\n * [`.protoCodes()`](#multiaddrprotocodes) or\r\n * [`.protoNames()`](#multiaddrprotonames)\r\n *\r\n * @returns {{table: Array, names: Object, codes: Object}}\r\n */\r\nMultiaddr.protocols = protocols\r\n\r\nMultiaddr.resolvers = resolvers\r\n\r\n/**\r\n * Static factory\r\n *\r\n * @param {MultiaddrInput} addr\r\n */\r\nfunction multiaddr (addr) {\r\n  return new Multiaddr(addr)\r\n}\r\n\r\nmodule.exports = { Multiaddr, multiaddr, protocols, resolvers }\r\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAzB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQG,GAAR,YAAQA,GAAR;;AACA,gBAAsBH,OAAO,CAAC,2BAAD,CAA7B;AAAA,IAAQI,SAAR,aAAQA,SAAR;;AACA,IAAMC,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMM,OAAO,GAAGC,MAAM,CAACC,GAAP,CAAW,4BAAX,CAAhB;;AACA,gBAAyCR,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBS,kBAAlB,aAAQC,QAAR;;AACA,gBAAqCV,OAAO,CAAC,oBAAD,CAA5C;AAAA,IAAgBW,gBAAhB,aAAQC,MAAR;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,IAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACA,IAAMC,MAAM,GAAGR,MAAM,CAACC,GAAP,CAAW,sCAAX,CAAf;AAEA;AACA;AACA;AACA;AACA;AACA;;IACMQ,S;EACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,mBAAaC,IAAb,EAAmB;IAAA;;IACjB;IACA,IAAIA,IAAI,IAAI,IAAZ,EAAkB;MAChBA,IAAI,GAAG,EAAP;IACD,CAJgB,CAMjB;;;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BJ,MAA5B,EAAoC;MAAEK,KAAK,EAAE;IAAT,CAApC;;IAEA,IAAIH,IAAI,YAAYI,UAApB,EAAgC;MAC9B;MACA,KAAKC,KAAL,GAAavB,KAAK,CAACwB,SAAN,CAAgBN,IAAhB,CAAb;IACD,CAHD,MAGO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MACnC,IAAIA,IAAI,CAACO,MAAL,GAAc,CAAd,IAAmBP,IAAI,CAACQ,MAAL,CAAY,CAAZ,MAAmB,GAA1C,EAA+C;QAC7C,MAAM,IAAIC,KAAJ,uBAAwBT,IAAxB,gCAAN;MACD;;MACD,KAAKK,KAAL,GAAavB,KAAK,CAAC4B,UAAN,CAAiBV,IAAjB,CAAb;IACD,CALM,MAKA,IAAID,SAAS,CAACY,WAAV,CAAsBX,IAAtB,CAAJ,EAAiC;MAAE;MACxC,KAAKK,KAAL,GAAavB,KAAK,CAACwB,SAAN,CAAgBN,IAAI,CAACK,KAArB,CAAb,CADsC,CACG;IAC1C,CAFM,MAEA;MACL,MAAM,IAAII,KAAJ,CAAU,qDAAV,CAAN;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,oBAAY;MACV,OAAO3B,KAAK,CAAC8B,aAAN,CAAoB,KAAKP,KAAzB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAAU;MACR,OAAO,KAAKZ,QAAL,EAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,qBAAa;MACX;MACA,IAAMoB,IAAI,GAAG,EAAb;MACA,IAAMC,MAAM,GAAG,KAAKrB,QAAL,GAAgBsB,KAAhB,CAAsB,GAAtB,CAAf;MACAF,IAAI,CAACG,MAAL,GAAcF,MAAM,CAAC,CAAD,CAAN,KAAc,KAAd,GAAsB,CAAtB,GAA0B,CAAxC;MACAD,IAAI,CAACI,IAAL,GAAYH,MAAM,CAAC,CAAD,CAAlB;MACAD,IAAI,CAACK,SAAL,GAAiBJ,MAAM,CAAC,CAAD,CAAvB;MACAD,IAAI,CAACM,IAAL,GAAYC,QAAQ,CAACN,MAAM,CAAC,CAAD,CAAP,CAApB;MACA,OAAOD,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAAU;MACR,OAAO,KAAKQ,UAAL,GAAkBC,GAAlB,CAAsB,UAAAC,IAAI;QAAA,OAAItB,MAAM,CAACuB,MAAP,CAAc,EAAd,EAAkBxC,SAAS,CAACuC,IAAD,CAA3B,CAAJ;MAAA,CAA1B,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,sBAAc;MACZ,IAAME,KAAK,GAAG,EAAd;MACA,IAAMC,GAAG,GAAG,KAAKrB,KAAjB;MACA,IAAIsB,CAAC,GAAG,CAAR;;MACA,OAAOA,CAAC,GAAGD,GAAG,CAACnB,MAAf,EAAuB;QACrB,IAAMgB,IAAI,GAAGtC,MAAM,CAAC2C,MAAP,CAAcF,GAAd,EAAmBC,CAAnB,CAAb;QACA,IAAME,CAAC,GAAG5C,MAAM,CAAC2C,MAAP,CAAcvB,KAAxB;QAEA,IAAMyB,CAAC,GAAG9C,SAAS,CAACuC,IAAD,CAAnB;QACA,IAAMQ,IAAI,GAAGjD,KAAK,CAACkD,WAAN,CAAkBF,CAAlB,EAAqBJ,GAAG,CAACO,KAAJ,CAAUN,CAAC,GAAGE,CAAd,CAArB,CAAb;QAEAF,CAAC,IAAKI,IAAI,GAAGF,CAAb;QACAJ,KAAK,CAACS,IAAN,CAAWX,IAAX;MACD;;MAED,OAAOE,KAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,sBAAc;MACZ,OAAO,KAAKU,MAAL,GAAcb,GAAd,CAAkB,UAAAc,KAAK;QAAA,OAAIA,KAAK,CAACC,IAAV;MAAA,CAAvB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAAU;MACR,OAAOvD,KAAK,CAACwD,aAAN,CAAoB,KAAKjC,KAAzB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,wBAAgB;MACd,IAAMkC,CAAC,GAAGzD,KAAK,CAACwD,aAAN,CAAoB,KAAKjC,KAAzB,CAAV;MACA,OAAOvB,KAAK,CAAC0D,oBAAN,CAA2BD,CAA3B,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,qBAAavC,IAAb,EAAmB;MACjBA,IAAI,GAAG,IAAID,SAAJ,CAAcC,IAAd,CAAP;MACA,OAAO,IAAID,SAAJ,CAAc,KAAKN,QAAL,KAAkBO,IAAI,CAACP,QAAL,EAAhC,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,qBAAaO,IAAb,EAAmB;MACjB,IAAMyC,UAAU,GAAGzC,IAAI,CAACP,QAAL,EAAnB;MACA,IAAMiD,CAAC,GAAG,KAAKjD,QAAL,EAAV;MACA,IAAMkC,CAAC,GAAGe,CAAC,CAACC,WAAF,CAAcF,UAAd,CAAV;;MACA,IAAId,CAAC,GAAG,CAAR,EAAW;QACT,MAAM,IAAIlB,KAAJ,CAAU,aAAa,IAAb,GAAoB,gCAApB,GAAuDT,IAAjE,CAAN;MACD;;MACD,OAAO,IAAID,SAAJ,CAAc2C,CAAC,CAACT,KAAF,CAAQ,CAAR,EAAWN,CAAX,CAAd,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,yBAAiBJ,IAAjB,EAAuB;MACrB,IAAMqB,MAAM,GAAG,KAAKA,MAAL,EAAf;;MACA,KAAK,IAAIjB,CAAC,GAAGiB,MAAM,CAACrC,MAAP,GAAgB,CAA7B,EAAgCoB,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;QAC3C,IAAIiB,MAAM,CAACjB,CAAD,CAAN,CAAU,CAAV,MAAiBJ,IAArB,EAA2B;UACzB,OAAO,IAAIxB,SAAJ,CAAcjB,KAAK,CAAC+D,aAAN,CAAoBD,MAAM,CAACX,KAAP,CAAa,CAAb,EAAgBN,CAAhB,CAApB,CAAd,CAAP;QACD;MACF;;MACD,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,qBAAa;MACX,IAAI;QACF,IAAMiB,MAAM,GAAG,KAAKE,YAAL,GAAoBC,MAApB,CAA2B,UAACC,KAAD,EAAW;UACnD,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAahE,SAAS,CAACiE,KAAV,CAAgBC,IAAhB,CAAqB3B,IAAtC,EAA4C;YAC1C,OAAO,IAAP;UACD;;UACD,OAAO,KAAP;QACD,CALc,CAAf,CADE,CAQF;;QACA,IAAMyB,KAAK,GAAGJ,MAAM,CAACO,GAAP,EAAd;;QACA,IAAIH,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAlB,EAAuB;UACrB,IAAMI,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAvB,CADqB,CAGrB;UACA;;UACA,IAAII,SAAS,CAAC,CAAD,CAAT,KAAiB,GAAjB,IAAwBA,SAAS,CAAC,CAAD,CAAT,KAAiB,GAA7C,EAAkD;YAChD,OAAO5D,kBAAkB,CAACL,SAAS,CAACyC,MAAV,YAAqBwB,SAArB,EAAD,EAAoC,WAApC,CAAzB;UACD,CAPoB,CASrB;;;UACA,OAAO5D,kBAAkB,CAACN,GAAG,CAACmE,KAAJ,CAAUD,SAAV,EAAqBE,SAArB,CAA+BjD,KAAhC,EAAuC,WAAvC,CAAzB;QACD;;QAED,OAAO,IAAP;MACD,CAxBD,CAwBE,OAAOkD,CAAP,EAAU;QACV,OAAO,IAAP;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAW;MACT,IAAIC,IAAI,GAAG,IAAX;;MACA,IAAI;QACFA,IAAI,GAAG,KAAKV,YAAL,GAAoBC,MAApB,CAA2B,UAACC,KAAD,EAAW;UAC3C,IAAMZ,KAAK,GAAGpD,SAAS,CAACgE,KAAK,CAAC,CAAD,CAAN,CAAvB;;UACA,IAAIZ,KAAK,CAACoB,IAAV,EAAgB;YACd,OAAO,IAAP;UACD;;UACD,OAAO,KAAP;QACD,CANM,EAMJ,CANI,EAMD,CANC,CAAP;;QAQA,IAAI,CAACA,IAAL,EAAW;UACTA,IAAI,GAAG,IAAP;QACD;MACF,CAZD,CAYE,OAAOD,CAAP,EAAU;QACVC,IAAI,GAAG,IAAP;MACD;;MACD,OAAOA,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAQxD,IAAR,EAAc;MACZ,OAAON,gBAAgB,CAAC,KAAKW,KAAN,EAAaL,IAAI,CAACK,KAAlB,CAAvB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;gFACE;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQoD,eADR,GAC0B,KAAKtB,MAAL,GAAcuB,IAAd,CAAmB,UAAC5B,CAAD;kBAAA,OAAOA,CAAC,CAAC6B,UAAT;gBAAA,CAAnB,CAD1B,EAGE;;gBAHF,IAIOF,eAJP;kBAAA;kBAAA;gBAAA;;gBAAA,iCAKW,CAAC,IAAD,CALX;;cAAA;gBAQQG,QARR,GAQmBhE,SAAS,CAACiE,GAAV,CAAcJ,eAAe,CAACpB,IAA9B,CARnB;;gBAAA,IASOuB,QATP;kBAAA;kBAAA;gBAAA;;gBAAA,MAUUxE,OAAO,CAAC,IAAIqB,KAAJ,qCAAuCgD,eAAe,CAACpB,IAAvD,EAAD,EAAiE,2BAAjE,CAVjB;;cAAA;gBAAA;gBAAA,OAa0BuB,QAAQ,CAAC,IAAD,CAblC;;cAAA;gBAaQE,SAbR;gBAAA,iCAcSA,SAAS,CAACxC,GAAV,CAAc,UAACyC,CAAD;kBAAA,OAAO,IAAIhE,SAAJ,CAAcgE,CAAd,CAAP;gBAAA,CAAd,CAdT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAiBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,uBAAe;MACb,IAAMtC,KAAK,GAAG,KAAKJ,UAAL,EAAd;MACA,IAAM4B,KAAK,GAAG,KAAKe,UAAL,EAAd;MACA,IAAMC,KAAK,GAAG,KAAKxE,QAAL,GAAgBsB,KAAhB,CAAsB,GAAtB,EAA2BkB,KAA3B,CAAiC,CAAjC,CAAd;;MAEA,IAAIgC,KAAK,CAAC1D,MAAN,GAAe,CAAnB,EAAsB;QACpB,MAAM,IAAIE,KAAJ,CAAU,4FAAV,CAAN;MACD,CAFD,MAEO,IAAIgB,KAAK,CAAC,CAAD,CAAL,KAAa,CAAb,IAAkBA,KAAK,CAAC,CAAD,CAAL,KAAa,EAA/B,IAAqCA,KAAK,CAAC,CAAD,CAAL,KAAa,EAAlD,IAAwDA,KAAK,CAAC,CAAD,CAAL,KAAa,EAAzE,EAA6E;QAClF,MAAM,IAAIhB,KAAJ,qCAAsCwC,KAAK,CAAC,CAAD,CAA3C,qEAAN;MACD,CAFM,MAEA,IAAIgB,KAAK,CAAC,CAAD,CAAL,KAAa,KAAb,IAAsBA,KAAK,CAAC,CAAD,CAAL,KAAa,KAAvC,EAA8C;QACnD,MAAM,IAAIxD,KAAJ,qCAAsCwC,KAAK,CAAC,CAAD,CAA3C,gEAAN;MACD;;MAED,OAAO;QACLjC,MAAM,EAAGS,KAAK,CAAC,CAAD,CAAL,KAAa,EAAb,IAAmBA,KAAK,CAAC,CAAD,CAAL,KAAa,EAAjC,GAAuC,CAAvC,GAA2C,CAD9C;QAELyC,OAAO,EAAED,KAAK,CAAC,CAAD,CAFT;QAGL9C,IAAI,EAAEC,QAAQ,CAAC6C,KAAK,CAAC,CAAD,CAAN,CAHT,CAGoB;;MAHpB,CAAP;IAKD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,4BAAoBjE,IAApB,EAA0B;MACxB,IAAMmC,MAAM,GAAG,CAACnC,IAAI,IAAI,IAAT,EAAemC,MAAf,EAAf;;MAEA,IAAIA,MAAM,CAAC5B,MAAP,KAAkB,CAAtB,EAAyB;QACvB,OAAO,KAAP;MACD;;MAED,IAAI4B,MAAM,CAAC,CAAD,CAAN,CAAUZ,IAAV,KAAmB,CAAnB,IAAwBY,MAAM,CAAC,CAAD,CAAN,CAAUZ,IAAV,KAAmB,EAA/C,EAAmD;QACjD,OAAO,KAAP;MACD;;MACD,IAAIY,MAAM,CAAC,CAAD,CAAN,CAAUZ,IAAV,KAAmB,CAAnB,IAAwBY,MAAM,CAAC,CAAD,CAAN,CAAUZ,IAAV,KAAmB,GAA/C,EAAoD;QAClD,OAAO,KAAP;MACD;;MACD,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SAwDGlC,O;;IAbD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,iBAAa;MACX,OAAO,gBACPG,kBAAkB,CAAC,KAAKa,KAAN,EAAa,QAAb,CADX,GACoC,KADpC,GAEPvB,KAAK,CAAC8B,aAAN,CAAoB,KAAKP,KAAzB,CAFO,GAE2B,GAFlC;IAGD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAW;MACT,OAAO,gBACLb,kBAAkB,CAAC,KAAKa,KAAN,EAAa,QAAb,CADb,GACsC,KADtC,GAELvB,KAAK,CAAC8B,aAAN,CAAoB,KAAKP,KAAzB,CAFK,GAE6B,GAFpC;IAGD;;;WA9ED,yBAAwBL,IAAxB,EAA8BkB,SAA9B,EAAyC;MACvC,IAAI,CAAClB,IAAL,EAAW;QAAE,MAAM,IAAIS,KAAJ,CAAU,8BAAV,CAAN;MAAiD;;MAC9D,IAAI,CAACS,SAAL,EAAgB;QAAE,MAAM,IAAIT,KAAJ,CAAU,6BAAV,CAAN;MAAgD;;MAClE,IAAI0D,EAAJ;;MACA,QAAQnE,IAAI,CAACgB,MAAb;QACE,KAAK,CAAL;UACEmD,EAAE,GAAG,KAAL;UACA;;QACF,KAAK,CAAL;UACEA,EAAE,GAAG,KAAL;UACA;;QACF;UACE,MAAM1D,KAAK,qCAA8BT,IAAI,CAACgB,MAAnC,yBAAX;MARJ;;MAUA,OAAO,IAAIjB,SAAJ,CAAc,MAAM,CAACoE,EAAD,EAAKnE,IAAI,CAACkE,OAAV,EAAmBhD,SAAnB,EAA8BlB,IAAI,CAACmB,IAAnC,EAAyCiD,IAAzC,CAA8C,GAA9C,CAApB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,gBAAepE,IAAf,EAAqB;MACnB,IAAI,CAACD,SAAS,CAACY,WAAV,CAAsBX,IAAtB,CAAL,EAAkC;QAChC,OAAO,KAAP;MACD,CAHkB,CAKnB;;;MACA,OAAOA,IAAI,CAACmC,MAAL,GAAckC,IAAd,CAAmB,UAACjC,KAAD;QAAA,OAAWA,KAAK,CAACuB,UAAjB;MAAA,CAAnB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,qBAAoBxD,KAApB,EAA2B;MACzB,OAAOA,KAAK,YAAYJ,SAAjB,IAA8BuE,OAAO,CAACnE,KAAK,IAAIA,KAAK,CAACL,MAAD,CAAf,CAA5C;IACD;;;;;AAyCH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,SAAS,CAACf,SAAV,GAAsBA,SAAtB;AAEAe,SAAS,CAACH,SAAV,GAAsBA,SAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAS2E,SAAT,CAAoBvE,IAApB,EAA0B;EACxB,OAAO,IAAID,SAAJ,CAAcC,IAAd,CAAP;AACD;;AAEDwE,MAAM,CAACC,OAAP,GAAiB;EAAE1E,SAAS,EAATA,SAAF;EAAawE,SAAS,EAATA,SAAb;EAAwBvF,SAAS,EAATA,SAAxB;EAAmCY,SAAS,EAATA;AAAnC,CAAjB"},"metadata":{},"sourceType":"script"}