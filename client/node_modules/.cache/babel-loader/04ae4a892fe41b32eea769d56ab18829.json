{"ast":null,"code":"'use strict';\n/** @typedef {import(\"./types\").Protocol} Protocol */\n\n/**\r\n * Protocols\r\n *\r\n * @param {number | string} proto\r\n * @returns {Protocol}\r\n */\n\nfunction Protocols(proto) {\n  if (typeof proto === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto];\n    }\n\n    throw new Error('no protocol with code: ' + proto);\n  } else if (typeof proto === 'string') {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto];\n    }\n\n    throw new Error('no protocol with name: ' + proto);\n  }\n\n  throw new Error('invalid protocol id type: ' + proto);\n}\n\nconst V = -1;\nProtocols.lengthPrefixedVarSize = V;\nProtocols.V = V;\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\n\nProtocols.table = [[4, 32, 'ip4'], [6, 16, 'tcp'], [33, 16, 'dccp'], [41, 128, 'ip6'], [42, V, 'ip6zone'], [53, V, 'dns', 'resolvable'], [54, V, 'dns4', 'resolvable'], [55, V, 'dns6', 'resolvable'], [56, V, 'dnsaddr', 'resolvable'], [132, 16, 'sctp'], [273, 16, 'udp'], [275, 0, 'p2p-webrtc-star'], [276, 0, 'p2p-webrtc-direct'], [277, 0, 'p2p-stardust'], [290, 0, 'p2p-circuit'], [301, 0, 'udt'], [302, 0, 'utp'], [400, V, 'unix', false, 'path'], // `ipfs` is added before `p2p` for legacy support.\n// All text representations will default to `p2p`, but `ipfs` will\n// still be supported\n[421, V, 'ipfs'], // `p2p` is the preferred name for 421, and is now the default\n[421, V, 'p2p'], [443, 0, 'https'], [444, 96, 'onion'], [445, 296, 'onion3'], [446, V, 'garlic64'], [460, 0, 'quic'], [477, 0, 'ws'], [478, 0, 'wss'], [479, 0, 'p2p-websocket-star'], [480, 0, 'http'], [777, V, 'memory']];\n/** @type {Record<string,Protocol>} */\n\nProtocols.names = {};\n/** @type {Record<number,Protocol>} */\n\nProtocols.codes = {}; // populate tables\n\nProtocols.table.map(row => {\n  const proto = p.apply(null, row);\n  Protocols.codes[proto.code] = proto;\n  Protocols.names[proto.name] = proto;\n  return null;\n});\nProtocols.object = p;\n/**\r\n *\r\n * Create a protocol\r\n *\r\n * @param {number} code\r\n * @param {number} size\r\n * @param {string} name\r\n * @param {any} [resolvable]\r\n * @param {any} [path]\r\n * @returns {Protocol}\r\n */\n\nfunction p(code, size, name, resolvable, path) {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  };\n}\n\nmodule.exports = Protocols;","map":{"version":3,"names":["Protocols","proto","codes","Error","names","V","lengthPrefixedVarSize","table","map","row","p","apply","code","name","object","size","resolvable","path","Boolean","module","exports"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/multiaddr/src/protocols-table.js"],"sourcesContent":["'use strict'\r\n/** @typedef {import(\"./types\").Protocol} Protocol */\r\n\r\n/**\r\n * Protocols\r\n *\r\n * @param {number | string} proto\r\n * @returns {Protocol}\r\n */\r\nfunction Protocols (proto) {\r\n  if (typeof (proto) === 'number') {\r\n    if (Protocols.codes[proto]) {\r\n      return Protocols.codes[proto]\r\n    }\r\n\r\n    throw new Error('no protocol with code: ' + proto)\r\n  } else if (typeof (proto) === 'string') {\r\n    if (Protocols.names[proto]) {\r\n      return Protocols.names[proto]\r\n    }\r\n\r\n    throw new Error('no protocol with name: ' + proto)\r\n  }\r\n\r\n  throw new Error('invalid protocol id type: ' + proto)\r\n}\r\n\r\nconst V = -1\r\nProtocols.lengthPrefixedVarSize = V\r\nProtocols.V = V\r\n\r\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\r\nProtocols.table = [\r\n  [4, 32, 'ip4'],\r\n  [6, 16, 'tcp'],\r\n  [33, 16, 'dccp'],\r\n  [41, 128, 'ip6'],\r\n  [42, V, 'ip6zone'],\r\n  [53, V, 'dns', 'resolvable'],\r\n  [54, V, 'dns4', 'resolvable'],\r\n  [55, V, 'dns6', 'resolvable'],\r\n  [56, V, 'dnsaddr', 'resolvable'],\r\n  [132, 16, 'sctp'],\r\n  [273, 16, 'udp'],\r\n  [275, 0, 'p2p-webrtc-star'],\r\n  [276, 0, 'p2p-webrtc-direct'],\r\n  [277, 0, 'p2p-stardust'],\r\n  [290, 0, 'p2p-circuit'],\r\n  [301, 0, 'udt'],\r\n  [302, 0, 'utp'],\r\n  [400, V, 'unix', false, 'path'],\r\n  // `ipfs` is added before `p2p` for legacy support.\r\n  // All text representations will default to `p2p`, but `ipfs` will\r\n  // still be supported\r\n  [421, V, 'ipfs'],\r\n  // `p2p` is the preferred name for 421, and is now the default\r\n  [421, V, 'p2p'],\r\n  [443, 0, 'https'],\r\n  [444, 96, 'onion'],\r\n  [445, 296, 'onion3'],\r\n  [446, V, 'garlic64'],\r\n  [460, 0, 'quic'],\r\n  [477, 0, 'ws'],\r\n  [478, 0, 'wss'],\r\n  [479, 0, 'p2p-websocket-star'],\r\n  [480, 0, 'http'],\r\n  [777, V, 'memory']\r\n]\r\n/** @type {Record<string,Protocol>} */\r\nProtocols.names = {}\r\n/** @type {Record<number,Protocol>} */\r\nProtocols.codes = {}\r\n\r\n// populate tables\r\nProtocols.table.map(row => {\r\n  const proto = p.apply(null, row)\r\n  Protocols.codes[proto.code] = proto\r\n  Protocols.names[proto.name] = proto\r\n  return null\r\n})\r\n\r\nProtocols.object = p\r\n\r\n/**\r\n *\r\n * Create a protocol\r\n *\r\n * @param {number} code\r\n * @param {number} size\r\n * @param {string} name\r\n * @param {any} [resolvable]\r\n * @param {any} [path]\r\n * @returns {Protocol}\r\n */\r\nfunction p (code, size, name, resolvable, path) {\r\n  return {\r\n    code,\r\n    size,\r\n    name,\r\n    resolvable: Boolean(resolvable),\r\n    path: Boolean(path)\r\n  }\r\n}\r\n\r\nmodule.exports = Protocols\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}