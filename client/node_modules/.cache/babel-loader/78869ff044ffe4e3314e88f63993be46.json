{"ast":null,"code":"/* eslint-disable no-undef */\n'use strict';\n\nconst {\n  fetch,\n  Request,\n  Headers\n} = require('./http/fetch');\n\nconst {\n  TimeoutError,\n  HTTPError\n} = require('./http/error');\n\nconst merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst {\n  URL,\n  URLSearchParams\n} = require('iso-url');\n\nconst anySignal = require('any-signal');\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\n\n\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise;\n  }\n\n  const start = Date.now();\n\n  const timedOut = () => {\n    const time = Date.now() - start;\n    return time >= ms;\n  };\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError());\n        abortController.abort();\n      }\n    }, ms);\n    /**\n     * @param {(value: any) => void } next\n     */\n\n    const after = next => {\n      /**\n       * @param {any} res\n       */\n      const fn = res => {\n        clearTimeout(timeoutID);\n\n        if (timedOut()) {\n          reject(new TimeoutError());\n          return;\n        }\n\n        next(res);\n      };\n\n      return fn;\n    };\n\n    promise.then(after(resolve), after(reject));\n  });\n};\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n};\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options);\n  }\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n\n\n  async fetch(resource) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options); // @ts-expect-error\n\n    const headers = new Headers(opts.headers); // validate resource type\n    // @ts-expect-error\n\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request');\n    }\n\n    const url = new URL(resource.toString(), opts.base);\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts;\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams));\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams);\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json);\n      headers.set('content-type', 'application/json');\n    }\n\n    const abortController = new AbortController(); // @ts-ignore\n\n    const signal = anySignal([abortController.signal, opts.signal]);\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n\n    const response = await timeout(fetch(url.toString(), { ...opts,\n      signal,\n      // @ts-expect-error non-browser fetch implementations may take extra options\n      timeout: undefined,\n      headers\n    }), opts.timeout, abortController);\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response);\n      }\n\n      throw new HTTPError(response);\n    }\n\n    response.iterator = async function* () {\n      yield* fromStream(response.body);\n    };\n\n    response.ndjson = async function* () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk);\n        } else {\n          yield chunk;\n        }\n      }\n    };\n\n    return response;\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  post(resource) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.fetch(resource, { ...options,\n      method: 'POST'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  get(resource) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.fetch(resource, { ...options,\n      method: 'GET'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  put(resource) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.fetch(resource, { ...options,\n      method: 'PUT'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  delete(resource) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.fetch(resource, { ...options,\n      method: 'DELETE'\n    });\n  }\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n\n\n  options(resource) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.fetch(resource, { ...options,\n      method: 'OPTIONS'\n    });\n  }\n\n}\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\n\n\nconst ndjson = async function* (source) {\n  const decoder = new TextDecoder();\n  let buf = '';\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, {\n      stream: true\n    });\n    const lines = buf.split(/\\r?\\n/);\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim();\n\n      if (l.length > 0) {\n        yield JSON.parse(l);\n      }\n    }\n\n    buf = lines[lines.length - 1];\n  }\n\n  buf += decoder.decode();\n  buf = buf.trim();\n\n  if (buf.length !== 0) {\n    yield JSON.parse(buf);\n  }\n};\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\n\n\nconst fromStream = source => {\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]();\n    return {\n      [Symbol.asyncIterator]() {\n        return {\n          next: iter.next.bind(iter),\n\n          return(value) {\n            source.destroy();\n\n            if (typeof iter.return === 'function') {\n              return iter.return();\n            }\n\n            return Promise.resolve({\n              done: true,\n              value\n            });\n          }\n\n        };\n      }\n\n    };\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader();\n    return async function* () {\n      try {\n        while (true) {\n          // Read from the stream\n          const {\n            done,\n            value\n          } = await reader.read(); // Exit if we're done\n\n          if (done) return; // Else yield the chunk\n\n          if (value) {\n            yield value;\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    }();\n  }\n\n  if (isAsyncIterable(source)) {\n    return source;\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable');\n};\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\n\n\nconst isAsyncIterable = value => {\n  return typeof value === 'object' && value !== null && typeof\n  /** @type {any} */\n  value[Symbol.asyncIterator] === 'function';\n};\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\n\n\nconst isWebReadableStream = value => {\n  return value && typeof\n  /** @type {any} */\n  value.getReader === 'function';\n};\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\n\n\nconst isNodeReadableStream = value => Object.prototype.hasOwnProperty.call(value, 'readable') && Object.prototype.hasOwnProperty.call(value, 'writable');\n\nHTTP.HTTPError = HTTPError;\nHTTP.TimeoutError = TimeoutError;\nHTTP.streamToAsyncIterator = fromStream;\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options);\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\n\n\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options);\n\nmodule.exports = HTTP;","map":{"version":3,"names":["fetch","Request","Headers","require","TimeoutError","HTTPError","merge","bind","ignoreUndefined","URL","URLSearchParams","anySignal","timeout","promise","ms","abortController","undefined","start","Date","now","timedOut","time","Promise","resolve","reject","timeoutID","setTimeout","abort","after","next","fn","res","clearTimeout","then","defaults","throwHttpErrors","credentials","HTTP","constructor","options","opts","resource","headers","TypeError","url","toString","base","searchParams","transformSearchParams","json","search","body","JSON","stringify","set","AbortController","signal","response","ok","handleError","iterator","fromStream","ndjson","chunk","transform","post","method","get","put","delete","source","decoder","TextDecoder","buf","decode","stream","lines","split","i","length","l","trim","parse","isNodeReadableStream","iter","Symbol","asyncIterator","return","value","destroy","done","isWebReadableStream","reader","getReader","read","releaseLock","isAsyncIterable","Object","prototype","hasOwnProperty","call","streamToAsyncIterator","module","exports"],"sources":["C:/Users/mcnl/Desktop/gong/test/SafetyManagement_UI/client/node_modules/ipfs-utils/src/http.js"],"sourcesContent":["/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst anySignal = require('any-signal')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    // @ts-expect-error\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    // @ts-expect-error\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          // @ts-expect-error non-browser fetch implementations may take extra options\n          timeout: undefined,\n          headers\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = async function * () {\n      yield * fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}