{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar normaliseInputMultiple_browser = require('./files/normalise-input-multiple.browser.js');\n\nvar modeToString = require('./mode-to-string.js');\n\nfunction multipartRequest(_x, _x2) {\n  return _multipartRequest.apply(this, arguments);\n}\n\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source, abortController) {\n    var headers,\n        parts,\n        formData,\n        index,\n        total,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _step$value,\n        content,\n        path,\n        mode,\n        mtime,\n        fileSuffix,\n        type,\n        fieldName,\n        qs,\n        secs,\n        nsecs,\n        end,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            parts = [];\n            formData = new FormData();\n            index = 0;\n            total = 0;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 7;\n            _iterator = _asyncIterator(normaliseInputMultiple_browser.normaliseInput(source));\n\n          case 9:\n            _context.next = 11;\n            return _iterator.next();\n\n          case 11:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 37;\n              break;\n            }\n\n            _step$value = _step.value, content = _step$value.content, path = _step$value.path, mode = _step$value.mode, mtime = _step$value.mtime;\n            fileSuffix = '';\n            type = content ? 'file' : 'dir';\n\n            if (index > 0) {\n              fileSuffix = \"-\".concat(index);\n            }\n\n            fieldName = type + fileSuffix;\n            qs = [];\n\n            if (mode !== null && mode !== undefined) {\n              qs.push(\"mode=\".concat(modeToString.modeToString(mode)));\n            }\n\n            if (mtime != null) {\n              secs = mtime.secs, nsecs = mtime.nsecs;\n              qs.push(\"mtime=\".concat(secs));\n\n              if (nsecs != null) {\n                qs.push(\"mtime-nsecs=\".concat(nsecs));\n              }\n            }\n\n            if (qs.length) {\n              fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n            }\n\n            if (!content) {\n              _context.next = 28;\n              break;\n            }\n\n            formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n            end = total + content.size;\n            parts.push({\n              name: path,\n              start: total,\n              end: end\n            });\n            total = end;\n            _context.next = 33;\n            break;\n\n          case 28:\n            if (!(path != null)) {\n              _context.next = 32;\n              break;\n            }\n\n            formData.set(fieldName, new File([''], encodeURIComponent(path), {\n              type: 'application/x-directory'\n            }));\n            _context.next = 33;\n            break;\n\n          case 32:\n            throw new Error('path or content or both must be set');\n\n          case 33:\n            index++;\n\n          case 34:\n            _iteratorAbruptCompletion = false;\n            _context.next = 9;\n            break;\n\n          case 37:\n            _context.next = 43;\n            break;\n\n          case 39:\n            _context.prev = 39;\n            _context.t0 = _context[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 43:\n            _context.prev = 43;\n            _context.prev = 44;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 48;\n              break;\n            }\n\n            _context.next = 48;\n            return _iterator.return();\n\n          case 48:\n            _context.prev = 48;\n\n            if (!_didIteratorError) {\n              _context.next = 51;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 51:\n            return _context.finish(48);\n\n          case 52:\n            return _context.finish(43);\n\n          case 53:\n            return _context.abrupt(\"return\", {\n              total: total,\n              parts: parts,\n              headers: headers,\n              body: formData\n            });\n\n          case 54:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 39, 43, 53], [44,, 48, 52]]);\n  }));\n  return _multipartRequest.apply(this, arguments);\n}\n\nexports.multipartRequest = multipartRequest;","map":{"version":3,"names":["Object","defineProperty","exports","value","normaliseInputMultiple_browser","require","modeToString","multipartRequest","source","abortController","headers","parts","formData","FormData","index","total","normaliseInput","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","File","Error","body"],"sources":["/home/ubuntu/SafetyManagement_UI/client/node_modules/ipfs-core-utils/cjs/src/multipart-request.browser.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar normaliseInputMultiple_browser = require('./files/normalise-input-multiple.browser.js');\nvar modeToString = require('./mode-to-string.js');\n\nasync function multipartRequest(source, abortController, headers = {}) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n  for await (const {content, path, mode, mtime} of normaliseInputMultiple_browser.normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n    if (index > 0) {\n      fileSuffix = `-${ index }`;\n    }\n    let fieldName = type + fileSuffix;\n    const qs = [];\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${ modeToString.modeToString(mode) }`);\n    }\n    if (mtime != null) {\n      const {secs, nsecs} = mtime;\n      qs.push(`mtime=${ secs }`);\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${ nsecs }`);\n      }\n    }\n    if (qs.length) {\n      fieldName = `${ fieldName }?${ qs.join('&') }`;\n    }\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n    index++;\n  }\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}\n\nexports.multipartRequest = multipartRequest;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}