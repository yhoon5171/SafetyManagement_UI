{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nexport var UnicodeNormalizationForm;\n\n(function (UnicodeNormalizationForm) {\n  UnicodeNormalizationForm[\"current\"] = \"\";\n  UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n  UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n  UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n  UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n\n;\nexport var Utf8ErrorReason;\n\n(function (Utf8ErrorReason) {\n  // A continuation byte was present where there was nothing to continue\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\"; // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n  // - offset = the index the codepoint began in\n\n  Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\"; // The string is too short to process the expected codepoint\n  // - offset = the index the codepoint began in\n\n  Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\"; // A missing continuation byte was expected but not found\n  // - offset = the index the continuation byte was expected at\n\n  Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\"; // The computed code point is outside the range for UTF-8\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; outside the UTF-8 range\n\n  Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\"; // UTF-8 strings may not contain UTF-16 surrogate pairs\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n\n  Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\"; // The string is an overlong representation\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; already bounds checked\n\n  Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n\n;\n\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n  return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\n\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n    let i = 0;\n\n    for (let o = offset + 1; o < bytes.length; o++) {\n      if (bytes[o] >> 6 !== 0x02) {\n        break;\n      }\n\n      i++;\n    }\n\n    return i;\n  } // This byte runs us past the end of the string, so just jump to the end\n  // (but the first byte was read already read and therefore skipped)\n\n\n  if (reason === Utf8ErrorReason.OVERRUN) {\n    return bytes.length - offset - 1;\n  } // Nothing to skip\n\n\n  return 0;\n}\n\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n  // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n  if (reason === Utf8ErrorReason.OVERLONG) {\n    output.push(badCodepoint);\n    return 0;\n  } // Put the replacement character into the output\n\n\n  output.push(0xfffd); // Otherwise, process as if ignoring errors\n\n  return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n} // Common error handing strategies\n\n\nexport const Utf8ErrorFuncs = Object.freeze({\n  error: errorFunc,\n  ignore: ignoreFunc,\n  replace: replaceFunc\n}); // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\nfunction getUtf8CodePoints(bytes, onError) {\n  if (onError == null) {\n    onError = Utf8ErrorFuncs.error;\n  }\n\n  bytes = arrayify(bytes);\n  const result = [];\n  let i = 0; // Invalid bytes are ignored\n\n  while (i < bytes.length) {\n    const c = bytes[i++]; // 0xxx xxxx\n\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    } // Multibyte; how many bytes left for this character?\n\n\n    let extraLength = null;\n    let overlongMask = null; // 110x xxxx 10xx xxxx\n\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f; // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff; // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n      } else {\n        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n      }\n\n      continue;\n    } // Do we have enough bytes in our data?\n\n\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n      continue;\n    } // Remove the length prefix from the char\n\n\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n\n    for (let j = 0; j < extraLength; j++) {\n      let nextChar = bytes[i]; // Invalid continuation byte\n\n      if ((nextChar & 0xc0) != 0x80) {\n        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n        res = null;\n        break;\n      }\n\n      ;\n      res = res << 6 | nextChar & 0x3f;\n      i++;\n    } // See above loop for invalid continuation byte\n\n\n    if (res === null) {\n      continue;\n    } // Maximum code point\n\n\n    if (res > 0x10ffff) {\n      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Reserved for UTF-16 surrogate halves\n\n\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Check for overlong sequences (more bytes than needed)\n\n\n    if (res <= overlongMask) {\n      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n} // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\n\nexport function toUtf8Bytes(str) {\n  let form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;\n\n  if (form != UnicodeNormalizationForm.current) {\n    logger.checkNormalize();\n    str = str.normalize(form);\n  }\n\n  let result = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push(c >> 6 | 0xc0);\n      result.push(c & 0x3f | 0x80);\n    } else if ((c & 0xfc00) == 0xd800) {\n      i++;\n      const c2 = str.charCodeAt(i);\n\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new Error(\"invalid utf-8 string\");\n      } // Surrogate Pair\n\n\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push(pair >> 18 | 0xf0);\n      result.push(pair >> 12 & 0x3f | 0x80);\n      result.push(pair >> 6 & 0x3f | 0x80);\n      result.push(pair & 0x3f | 0x80);\n    } else {\n      result.push(c >> 12 | 0xe0);\n      result.push(c >> 6 & 0x3f | 0x80);\n      result.push(c & 0x3f | 0x80);\n    }\n  }\n\n  return arrayify(result);\n}\n;\n\nfunction escapeChar(value) {\n  const hex = \"0000\" + value.toString(16);\n  return \"\\\\u\" + hex.substring(hex.length - 4);\n}\n\nexport function _toEscapedUtf8String(bytes, onError) {\n  return '\"' + getUtf8CodePoints(bytes, onError).map(codePoint => {\n    if (codePoint < 256) {\n      switch (codePoint) {\n        case 8:\n          return \"\\\\b\";\n\n        case 9:\n          return \"\\\\t\";\n\n        case 10:\n          return \"\\\\n\";\n\n        case 13:\n          return \"\\\\r\";\n\n        case 34:\n          return \"\\\\\\\"\";\n\n        case 92:\n          return \"\\\\\\\\\";\n      }\n\n      if (codePoint >= 32 && codePoint < 127) {\n        return String.fromCharCode(codePoint);\n      }\n    }\n\n    if (codePoint <= 0xffff) {\n      return escapeChar(codePoint);\n    }\n\n    codePoint -= 0x10000;\n    return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n  return codePoints.map(codePoint => {\n    if (codePoint <= 0xffff) {\n      return String.fromCharCode(codePoint);\n    }\n\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n  return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str) {\n  let form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UnicodeNormalizationForm.current;\n  return getUtf8CodePoints(toUtf8Bytes(str, form));\n}","map":{"version":3,"sources":["../src.ts/utf8.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { arrayify } from \"@ethersproject/bytes\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n///////////////////////////////\r\nexport var UnicodeNormalizationForm;\r\n(function (UnicodeNormalizationForm) {\r\n    UnicodeNormalizationForm[\"current\"] = \"\";\r\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\r\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\r\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\r\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\r\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\r\n;\r\nexport var Utf8ErrorReason;\r\n(function (Utf8ErrorReason) {\r\n    // A continuation byte was present where there was nothing to continue\r\n    // - offset = the index the codepoint began in\r\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\r\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\r\n    // - offset = the index the codepoint began in\r\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\r\n    // The string is too short to process the expected codepoint\r\n    // - offset = the index the codepoint began in\r\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\r\n    // A missing continuation byte was expected but not found\r\n    // - offset = the index the continuation byte was expected at\r\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\r\n    // The computed code point is outside the range for UTF-8\r\n    // - offset       = start of this codepoint\r\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\r\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\r\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\r\n    // - offset       = start of this codepoint\r\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\r\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\r\n    // The string is an overlong representation\r\n    // - offset       = start of this codepoint\r\n    // - badCodepoint = the computed codepoint; already bounds checked\r\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\r\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\r\n;\r\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\r\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\r\n}\r\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\r\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\r\n        let i = 0;\r\n        for (let o = offset + 1; o < bytes.length; o++) {\r\n            if (bytes[o] >> 6 !== 0x02) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n    // This byte runs us past the end of the string, so just jump to the end\r\n    // (but the first byte was read already read and therefore skipped)\r\n    if (reason === Utf8ErrorReason.OVERRUN) {\r\n        return bytes.length - offset - 1;\r\n    }\r\n    // Nothing to skip\r\n    return 0;\r\n}\r\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\r\n    if (reason === Utf8ErrorReason.OVERLONG) {\r\n        output.push(badCodepoint);\r\n        return 0;\r\n    }\r\n    // Put the replacement character into the output\r\n    output.push(0xfffd);\r\n    // Otherwise, process as if ignoring errors\r\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\r\n}\r\n// Common error handing strategies\r\nexport const Utf8ErrorFuncs = Object.freeze({\r\n    error: errorFunc,\r\n    ignore: ignoreFunc,\r\n    replace: replaceFunc\r\n});\r\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\r\nfunction getUtf8CodePoints(bytes, onError) {\r\n    if (onError == null) {\r\n        onError = Utf8ErrorFuncs.error;\r\n    }\r\n    bytes = arrayify(bytes);\r\n    const result = [];\r\n    let i = 0;\r\n    // Invalid bytes are ignored\r\n    while (i < bytes.length) {\r\n        const c = bytes[i++];\r\n        // 0xxx xxxx\r\n        if (c >> 7 === 0) {\r\n            result.push(c);\r\n            continue;\r\n        }\r\n        // Multibyte; how many bytes left for this character?\r\n        let extraLength = null;\r\n        let overlongMask = null;\r\n        // 110x xxxx 10xx xxxx\r\n        if ((c & 0xe0) === 0xc0) {\r\n            extraLength = 1;\r\n            overlongMask = 0x7f;\r\n            // 1110 xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf0) === 0xe0) {\r\n            extraLength = 2;\r\n            overlongMask = 0x7ff;\r\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf8) === 0xf0) {\r\n            extraLength = 3;\r\n            overlongMask = 0xffff;\r\n        }\r\n        else {\r\n            if ((c & 0xc0) === 0x80) {\r\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\r\n            }\r\n            else {\r\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\r\n            }\r\n            continue;\r\n        }\r\n        // Do we have enough bytes in our data?\r\n        if (i - 1 + extraLength >= bytes.length) {\r\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\r\n            continue;\r\n        }\r\n        // Remove the length prefix from the char\r\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\r\n        for (let j = 0; j < extraLength; j++) {\r\n            let nextChar = bytes[i];\r\n            // Invalid continuation byte\r\n            if ((nextChar & 0xc0) != 0x80) {\r\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\r\n                res = null;\r\n                break;\r\n            }\r\n            ;\r\n            res = (res << 6) | (nextChar & 0x3f);\r\n            i++;\r\n        }\r\n        // See above loop for invalid continuation byte\r\n        if (res === null) {\r\n            continue;\r\n        }\r\n        // Maximum code point\r\n        if (res > 0x10ffff) {\r\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Reserved for UTF-16 surrogate halves\r\n        if (res >= 0xd800 && res <= 0xdfff) {\r\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Check for overlong sequences (more bytes than needed)\r\n        if (res <= overlongMask) {\r\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        result.push(res);\r\n    }\r\n    return result;\r\n}\r\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\r\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\r\n    if (form != UnicodeNormalizationForm.current) {\r\n        logger.checkNormalize();\r\n        str = str.normalize(form);\r\n    }\r\n    let result = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 0x80) {\r\n            result.push(c);\r\n        }\r\n        else if (c < 0x800) {\r\n            result.push((c >> 6) | 0xc0);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800) {\r\n            i++;\r\n            const c2 = str.charCodeAt(i);\r\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\r\n                throw new Error(\"invalid utf-8 string\");\r\n            }\r\n            // Surrogate Pair\r\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\r\n            result.push((pair >> 18) | 0xf0);\r\n            result.push(((pair >> 12) & 0x3f) | 0x80);\r\n            result.push(((pair >> 6) & 0x3f) | 0x80);\r\n            result.push((pair & 0x3f) | 0x80);\r\n        }\r\n        else {\r\n            result.push((c >> 12) | 0xe0);\r\n            result.push(((c >> 6) & 0x3f) | 0x80);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n    }\r\n    return arrayify(result);\r\n}\r\n;\r\nfunction escapeChar(value) {\r\n    const hex = (\"0000\" + value.toString(16));\r\n    return \"\\\\u\" + hex.substring(hex.length - 4);\r\n}\r\nexport function _toEscapedUtf8String(bytes, onError) {\r\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\r\n        if (codePoint < 256) {\r\n            switch (codePoint) {\r\n                case 8: return \"\\\\b\";\r\n                case 9: return \"\\\\t\";\r\n                case 10: return \"\\\\n\";\r\n                case 13: return \"\\\\r\";\r\n                case 34: return \"\\\\\\\"\";\r\n                case 92: return \"\\\\\\\\\";\r\n            }\r\n            if (codePoint >= 32 && codePoint < 127) {\r\n                return String.fromCharCode(codePoint);\r\n            }\r\n        }\r\n        if (codePoint <= 0xffff) {\r\n            return escapeChar(codePoint);\r\n        }\r\n        codePoint -= 0x10000;\r\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\r\n    }).join(\"\") + '\"';\r\n}\r\nexport function _toUtf8String(codePoints) {\r\n    return codePoints.map((codePoint) => {\r\n        if (codePoint <= 0xffff) {\r\n            return String.fromCharCode(codePoint);\r\n        }\r\n        codePoint -= 0x10000;\r\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\r\n    }).join(\"\");\r\n}\r\nexport function toUtf8String(bytes, onError) {\r\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\r\n}\r\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\r\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\r\n}\r\n//# sourceMappingURL=utf8.js.map"]},"metadata":{},"sourceType":"module"}