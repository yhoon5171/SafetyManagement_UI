{"ast":null,"code":"\"use strict\";\n\nimport _inherits from \"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\nvar _constructorGuard = {};\nvar ModifiersBytes = {\n  calldata: true,\n  memory: true,\n  storage: true\n};\nvar ModifiersNest = {\n  calldata: true,\n  memory: true\n};\n\nfunction checkModifier(type, name) {\n  if (type === \"bytes\" || type === \"string\") {\n    if (ModifiersBytes[name]) {\n      return true;\n    }\n  } else if (type === \"address\") {\n    if (name === \"payable\") {\n      return true;\n    }\n  } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n    if (ModifiersNest[name]) {\n      return true;\n    }\n  }\n\n  if (ModifiersBytes[name] || name === \"payable\") {\n    logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n  }\n\n  return false;\n} // @TODO: Make sure that children of an indexed tuple are marked with a null indexed\n\n\nfunction parseParamType(param, allowIndexed) {\n  var originalParam = param;\n\n  function throwError(i) {\n    logger.throwArgumentError(\"unexpected character at position \".concat(i), \"param\", param);\n  }\n\n  param = param.replace(/\\s/g, \" \");\n\n  function newNode(parent) {\n    var node = {\n      type: \"\",\n      name: \"\",\n      parent: parent,\n      state: {\n        allowType: true\n      }\n    };\n\n    if (allowIndexed) {\n      node.indexed = false;\n    }\n\n    return node;\n  }\n\n  var parent = {\n    type: \"\",\n    name: \"\",\n    state: {\n      allowType: true\n    }\n  };\n  var node = parent;\n\n  for (var i = 0; i < param.length; i++) {\n    var c = param[i];\n\n    switch (c) {\n      case \"(\":\n        if (node.state.allowType && node.type === \"\") {\n          node.type = \"tuple\";\n        } else if (!node.state.allowParams) {\n          throwError(i);\n        }\n\n        node.state.allowType = false;\n        node.type = verifyType(node.type);\n        node.components = [newNode(node)];\n        node = node.components[0];\n        break;\n\n      case \")\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        var child = node;\n        node = node.parent;\n\n        if (!node) {\n          throwError(i);\n        }\n\n        delete child.parent;\n        node.state.allowParams = false;\n        node.state.allowName = true;\n        node.state.allowArray = true;\n        break;\n\n      case \",\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        var sibling = newNode(node.parent); //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n\n        node.parent.components.push(sibling);\n        delete node.parent;\n        node = sibling;\n        break;\n      // Hit a space...\n\n      case \" \":\n        // If reading type, the type is done and may read a param or name\n        if (node.state.allowType) {\n          if (node.type !== \"\") {\n            node.type = verifyType(node.type);\n            delete node.state.allowType;\n            node.state.allowName = true;\n            node.state.allowParams = true;\n          }\n        } // If reading name, the name is done\n\n\n        if (node.state.allowName) {\n          if (node.name !== \"\") {\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n\n              if (node.indexed) {\n                throwError(i);\n              }\n\n              node.indexed = true;\n              node.name = \"\";\n            } else if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            } else {\n              node.state.allowName = false;\n            }\n          }\n        }\n\n        break;\n\n      case \"[\":\n        if (!node.state.allowArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.allowArray = false;\n        node.state.allowName = false;\n        node.state.readArray = true;\n        break;\n\n      case \"]\":\n        if (!node.state.readArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.readArray = false;\n        node.state.allowArray = true;\n        node.state.allowName = true;\n        break;\n\n      default:\n        if (node.state.allowType) {\n          node.type += c;\n          node.state.allowParams = true;\n          node.state.allowArray = true;\n        } else if (node.state.allowName) {\n          node.name += c;\n          delete node.state.allowArray;\n        } else if (node.state.readArray) {\n          node.type += c;\n        } else {\n          throwError(i);\n        }\n\n    }\n  }\n\n  if (node.parent) {\n    logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n  }\n\n  delete parent.state;\n\n  if (node.name === \"indexed\") {\n    if (!allowIndexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    if (node.indexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    node.indexed = true;\n    node.name = \"\";\n  } else if (checkModifier(node.type, node.name)) {\n    node.name = \"\";\n  }\n\n  parent.type = verifyType(parent.type);\n  return parent;\n}\n\nfunction populate(object, params) {\n  for (var key in params) {\n    defineReadOnly(object, key, params[key]);\n  }\n}\n\nexport var FormatTypes = Object.freeze({\n  // Bare formatting, as is needed for computing a sighash of an event or function\n  sighash: \"sighash\",\n  // Human-Readable with Minimal spacing and without names (compact human-readable)\n  minimal: \"minimal\",\n  // Human-Readable with nice spacing, including all names\n  full: \"full\",\n  // JSON-format a la Solidity\n  json: \"json\"\n});\nvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport var ParamType = /*#__PURE__*/function () {\n  function ParamType(constructorGuard, params) {\n    _classCallCheck(this, ParamType);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new ParamType()\"\n      });\n    }\n\n    populate(this, params);\n    var match = this.type.match(paramTypeArray);\n\n    if (match) {\n      populate(this, {\n        arrayLength: parseInt(match[2] || \"-1\"),\n        arrayChildren: ParamType.fromObject({\n          type: match[1],\n          components: this.components\n        }),\n        baseType: \"array\"\n      });\n    } else {\n      populate(this, {\n        arrayLength: null,\n        arrayChildren: null,\n        baseType: this.components != null ? \"tuple\" : this.type\n      });\n    }\n\n    this._isParamType = true;\n    Object.freeze(this);\n  } // Format the parameter fragment\n  //   - sighash: \"(uint256,address)\"\n  //   - minimal: \"tuple(uint256,address) indexed\"\n  //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n\n\n  _createClass(ParamType, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format);\n      }\n\n      if (_format === FormatTypes.json) {\n        var _result = {\n          type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n          name: this.name || undefined\n        };\n\n        if (typeof this.indexed === \"boolean\") {\n          _result.indexed = this.indexed;\n        }\n\n        if (this.components) {\n          _result.components = this.components.map(function (comp) {\n            return JSON.parse(comp.format(_format));\n          });\n        }\n\n        return JSON.stringify(_result);\n      }\n\n      var result = \"\"; // Array\n\n      if (this.baseType === \"array\") {\n        result += this.arrayChildren.format(_format);\n        result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n      } else {\n        if (this.baseType === \"tuple\") {\n          if (_format !== FormatTypes.sighash) {\n            result += this.type;\n          }\n\n          result += \"(\" + this.components.map(function (comp) {\n            return comp.format(_format);\n          }).join(_format === FormatTypes.full ? \", \" : \",\") + \")\";\n        } else {\n          result += this.type;\n        }\n      }\n\n      if (_format !== FormatTypes.sighash) {\n        if (this.indexed === true) {\n          result += \" indexed\";\n        }\n\n        if (_format === FormatTypes.full && this.name) {\n          result += \" \" + this.name;\n        }\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value, allowIndexed) {\n      if (typeof value === \"string\") {\n        return ParamType.fromString(value, allowIndexed);\n      }\n\n      return ParamType.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ParamType.isParamType(value)) {\n        return value;\n      }\n\n      return new ParamType(_constructorGuard, {\n        name: value.name || null,\n        type: verifyType(value.type),\n        indexed: value.indexed == null ? null : !!value.indexed,\n        components: value.components ? value.components.map(ParamType.fromObject) : null\n      });\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value, allowIndexed) {\n      function ParamTypify(node) {\n        return ParamType.fromObject({\n          name: node.name,\n          type: node.type,\n          indexed: node.indexed,\n          components: node.components\n        });\n      }\n\n      return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n  }, {\n    key: \"isParamType\",\n    value: function isParamType(value) {\n      return !!(value != null && value._isParamType);\n    }\n  }]);\n\n  return ParamType;\n}();\n;\n\nfunction parseParams(value, allowIndex) {\n  return splitNesting(value).map(function (param) {\n    return ParamType.fromString(param, allowIndex);\n  });\n}\n\nexport var Fragment = /*#__PURE__*/function () {\n  function Fragment(constructorGuard, params) {\n    _classCallCheck(this, Fragment);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new Fragment()\"\n      });\n    }\n\n    populate(this, params);\n    this._isFragment = true;\n    Object.freeze(this);\n  }\n\n  _createClass(Fragment, null, [{\n    key: \"from\",\n    value: function from(value) {\n      if (Fragment.isFragment(value)) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        return Fragment.fromString(value);\n      }\n\n      return Fragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (Fragment.isFragment(value)) {\n        return value;\n      }\n\n      switch (value.type) {\n        case \"function\":\n          return FunctionFragment.fromObject(value);\n\n        case \"event\":\n          return EventFragment.fromObject(value);\n\n        case \"constructor\":\n          return ConstructorFragment.fromObject(value);\n\n        case \"error\":\n          return ErrorFragment.fromObject(value);\n\n        case \"fallback\":\n        case \"receive\":\n          // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n          return null;\n      }\n\n      return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n      value = value.replace(/\\s/g, \" \");\n      value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n      value = value.trim();\n\n      if (value.split(\" \")[0] === \"event\") {\n        return EventFragment.fromString(value.substring(5).trim());\n      } else if (value.split(\" \")[0] === \"function\") {\n        return FunctionFragment.fromString(value.substring(8).trim());\n      } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n        return ConstructorFragment.fromString(value.trim());\n      } else if (value.split(\" \")[0] === \"error\") {\n        return ErrorFragment.fromString(value.substring(5).trim());\n      }\n\n      return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n  }, {\n    key: \"isFragment\",\n    value: function isFragment(value) {\n      return !!(value && value._isFragment);\n    }\n  }]);\n\n  return Fragment;\n}();\nexport var EventFragment = /*#__PURE__*/function (_Fragment) {\n  _inherits(EventFragment, _Fragment);\n\n  var _super = _createSuper(EventFragment);\n\n  function EventFragment() {\n    _classCallCheck(this, EventFragment);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EventFragment, [{\n    key: \"format\",\n    value: function format(_format2) {\n      if (!_format2) {\n        _format2 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format2]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format2);\n      }\n\n      if (_format2 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"event\",\n          anonymous: this.anonymous,\n          name: this.name,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format2));\n          })\n        });\n      }\n\n      var result = \"\";\n\n      if (_format2 !== FormatTypes.sighash) {\n        result += \"event \";\n      }\n\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format2);\n      }).join(_format2 === FormatTypes.full ? \", \" : \",\") + \") \";\n\n      if (_format2 !== FormatTypes.sighash) {\n        if (this.anonymous) {\n          result += \"anonymous \";\n        }\n      }\n\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return EventFragment.fromString(value);\n      }\n\n      return EventFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (EventFragment.isEventFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"event\") {\n        logger.throwArgumentError(\"invalid event object\", \"value\", value);\n      }\n\n      var params = {\n        name: verifyIdentifier(value.name),\n        anonymous: value.anonymous,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        type: \"event\"\n      };\n      return new EventFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var match = value.match(regexParen);\n\n      if (!match) {\n        logger.throwArgumentError(\"invalid event string\", \"value\", value);\n      }\n\n      var anonymous = false;\n      match[3].split(\" \").forEach(function (modifier) {\n        switch (modifier.trim()) {\n          case \"anonymous\":\n            anonymous = true;\n            break;\n\n          case \"\":\n            break;\n\n          default:\n            logger.warn(\"unknown modifier: \" + modifier);\n        }\n      });\n      return EventFragment.fromObject({\n        name: match[1].trim(),\n        anonymous: anonymous,\n        inputs: parseParams(match[2], true),\n        type: \"event\"\n      });\n    }\n  }, {\n    key: \"isEventFragment\",\n    value: function isEventFragment(value) {\n      return value && value._isFragment && value.type === \"event\";\n    }\n  }]);\n\n  return EventFragment;\n}(Fragment);\n\nfunction parseGas(value, params) {\n  params.gas = null;\n  var comps = value.split(\"@\");\n\n  if (comps.length !== 1) {\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n    }\n\n    if (!comps[1].match(/^[0-9]+$/)) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n    }\n\n    params.gas = BigNumber.from(comps[1]);\n    return comps[0];\n  }\n\n  return value;\n}\n\nfunction parseModifiers(value, params) {\n  params.constant = false;\n  params.payable = false;\n  params.stateMutability = \"nonpayable\";\n  value.split(\" \").forEach(function (modifier) {\n    switch (modifier.trim()) {\n      case \"constant\":\n        params.constant = true;\n        break;\n\n      case \"payable\":\n        params.payable = true;\n        params.stateMutability = \"payable\";\n        break;\n\n      case \"nonpayable\":\n        params.payable = false;\n        params.stateMutability = \"nonpayable\";\n        break;\n\n      case \"pure\":\n        params.constant = true;\n        params.stateMutability = \"pure\";\n        break;\n\n      case \"view\":\n        params.constant = true;\n        params.stateMutability = \"view\";\n        break;\n\n      case \"external\":\n      case \"public\":\n      case \"\":\n        break;\n\n      default:\n        console.log(\"unknown modifier: \" + modifier);\n    }\n  });\n}\n\nfunction verifyState(value) {\n  var result = {\n    constant: false,\n    payable: true,\n    stateMutability: \"payable\"\n  };\n\n  if (value.stateMutability != null) {\n    result.stateMutability = value.stateMutability; // Set (and check things are consistent) the constant property\n\n    result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n\n    if (value.constant != null) {\n      if (!!value.constant !== result.constant) {\n        logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    } // Set (and check things are consistent) the payable property\n\n\n    result.payable = result.stateMutability === \"payable\";\n\n    if (value.payable != null) {\n      if (!!value.payable !== result.payable) {\n        logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n  } else if (value.payable != null) {\n    result.payable = !!value.payable; // If payable we can assume non-constant; otherwise we can't assume\n\n    if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n      logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    result.constant = !!value.constant;\n\n    if (result.constant) {\n      result.stateMutability = \"view\";\n    } else {\n      result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n    }\n\n    if (result.payable && result.constant) {\n      logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n    }\n  } else if (value.constant != null) {\n    result.constant = !!value.constant;\n    result.payable = !result.constant;\n    result.stateMutability = result.constant ? \"view\" : \"payable\";\n  } else if (value.type !== \"constructor\") {\n    logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n  }\n\n  return result;\n}\n\nexport var ConstructorFragment = /*#__PURE__*/function (_Fragment2) {\n  _inherits(ConstructorFragment, _Fragment2);\n\n  var _super2 = _createSuper(ConstructorFragment);\n\n  function ConstructorFragment() {\n    _classCallCheck(this, ConstructorFragment);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ConstructorFragment, [{\n    key: \"format\",\n    value: function format(_format3) {\n      if (!_format3) {\n        _format3 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format3]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format3);\n      }\n\n      if (_format3 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"constructor\",\n          stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n          payable: this.payable,\n          gas: this.gas ? this.gas.toNumber() : undefined,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format3));\n          })\n        });\n      }\n\n      if (_format3 === FormatTypes.sighash) {\n        logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"format(sighash)\"\n        });\n      }\n\n      var result = \"constructor(\" + this.inputs.map(function (input) {\n        return input.format(_format3);\n      }).join(_format3 === FormatTypes.full ? \", \" : \",\") + \") \";\n\n      if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n        result += this.stateMutability + \" \";\n      }\n\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return ConstructorFragment.fromString(value);\n      }\n\n      return ConstructorFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ConstructorFragment.isConstructorFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n      }\n\n      var state = verifyState(value);\n\n      if (state.constant) {\n        logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n      }\n\n      var params = {\n        name: null,\n        type: value.type,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        payable: state.payable,\n        stateMutability: state.stateMutability,\n        gas: value.gas ? BigNumber.from(value.gas) : null\n      };\n      return new ConstructorFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"constructor\"\n      };\n      value = parseGas(value, params);\n      var parens = value.match(regexParen);\n\n      if (!parens || parens[1].trim() !== \"constructor\") {\n        logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n      }\n\n      params.inputs = parseParams(parens[2].trim(), false);\n      parseModifiers(parens[3].trim(), params);\n      return ConstructorFragment.fromObject(params);\n    }\n  }, {\n    key: \"isConstructorFragment\",\n    value: function isConstructorFragment(value) {\n      return value && value._isFragment && value.type === \"constructor\";\n    }\n  }]);\n\n  return ConstructorFragment;\n}(Fragment);\nexport var FunctionFragment = /*#__PURE__*/function (_ConstructorFragment) {\n  _inherits(FunctionFragment, _ConstructorFragment);\n\n  var _super3 = _createSuper(FunctionFragment);\n\n  function FunctionFragment() {\n    _classCallCheck(this, FunctionFragment);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(FunctionFragment, [{\n    key: \"format\",\n    value: function format(_format4) {\n      if (!_format4) {\n        _format4 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format4]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format4);\n      }\n\n      if (_format4 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"function\",\n          name: this.name,\n          constant: this.constant,\n          stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n          payable: this.payable,\n          gas: this.gas ? this.gas.toNumber() : undefined,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format4));\n          }),\n          outputs: this.outputs.map(function (output) {\n            return JSON.parse(output.format(_format4));\n          })\n        });\n      }\n\n      var result = \"\";\n\n      if (_format4 !== FormatTypes.sighash) {\n        result += \"function \";\n      }\n\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format4);\n      }).join(_format4 === FormatTypes.full ? \", \" : \",\") + \") \";\n\n      if (_format4 !== FormatTypes.sighash) {\n        if (this.stateMutability) {\n          if (this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n          }\n        } else if (this.constant) {\n          result += \"view \";\n        }\n\n        if (this.outputs && this.outputs.length) {\n          result += \"returns (\" + this.outputs.map(function (output) {\n            return output.format(_format4);\n          }).join(\", \") + \") \";\n        }\n\n        if (this.gas != null) {\n          result += \"@\" + this.gas.toString() + \" \";\n        }\n      }\n\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return FunctionFragment.fromString(value);\n      }\n\n      return FunctionFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (FunctionFragment.isFunctionFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"function\") {\n        logger.throwArgumentError(\"invalid function object\", \"value\", value);\n      }\n\n      var state = verifyState(value);\n      var params = {\n        type: value.type,\n        name: verifyIdentifier(value.name),\n        constant: state.constant,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n        payable: state.payable,\n        stateMutability: state.stateMutability,\n        gas: value.gas ? BigNumber.from(value.gas) : null\n      };\n      return new FunctionFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"function\"\n      };\n      value = parseGas(value, params);\n      var comps = value.split(\" returns \");\n\n      if (comps.length > 2) {\n        logger.throwArgumentError(\"invalid function string\", \"value\", value);\n      }\n\n      var parens = comps[0].match(regexParen);\n\n      if (!parens) {\n        logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n      }\n\n      params.name = parens[1].trim();\n\n      if (params.name) {\n        verifyIdentifier(params.name);\n      }\n\n      params.inputs = parseParams(parens[2], false);\n      parseModifiers(parens[3].trim(), params); // We have outputs\n\n      if (comps.length > 1) {\n        var returns = comps[1].match(regexParen);\n\n        if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n          logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n        }\n\n        params.outputs = parseParams(returns[2], false);\n      } else {\n        params.outputs = [];\n      }\n\n      return FunctionFragment.fromObject(params);\n    }\n  }, {\n    key: \"isFunctionFragment\",\n    value: function isFunctionFragment(value) {\n      return value && value._isFragment && value.type === \"function\";\n    }\n  }]);\n\n  return FunctionFragment;\n}(ConstructorFragment); //export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment) {\n  var sig = fragment.format();\n\n  if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n    logger.throwArgumentError(\"cannot specify user defined \".concat(sig, \" error\"), \"fragment\", fragment);\n  }\n\n  return fragment;\n}\n\nexport var ErrorFragment = /*#__PURE__*/function (_Fragment3) {\n  _inherits(ErrorFragment, _Fragment3);\n\n  var _super4 = _createSuper(ErrorFragment);\n\n  function ErrorFragment() {\n    _classCallCheck(this, ErrorFragment);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(ErrorFragment, [{\n    key: \"format\",\n    value: function format(_format5) {\n      if (!_format5) {\n        _format5 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format5]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format5);\n      }\n\n      if (_format5 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"error\",\n          name: this.name,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format5));\n          })\n        });\n      }\n\n      var result = \"\";\n\n      if (_format5 !== FormatTypes.sighash) {\n        result += \"error \";\n      }\n\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format5);\n      }).join(_format5 === FormatTypes.full ? \", \" : \",\") + \") \";\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return ErrorFragment.fromString(value);\n      }\n\n      return ErrorFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ErrorFragment.isErrorFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"error\") {\n        logger.throwArgumentError(\"invalid error object\", \"value\", value);\n      }\n\n      var params = {\n        type: value.type,\n        name: verifyIdentifier(value.name),\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []\n      };\n      return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"error\"\n      };\n      var parens = value.match(regexParen);\n\n      if (!parens) {\n        logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n      }\n\n      params.name = parens[1].trim();\n\n      if (params.name) {\n        verifyIdentifier(params.name);\n      }\n\n      params.inputs = parseParams(parens[2], false);\n      return checkForbidden(ErrorFragment.fromObject(params));\n    }\n  }, {\n    key: \"isErrorFragment\",\n    value: function isErrorFragment(value) {\n      return value && value._isFragment && value.type === \"error\";\n    }\n  }]);\n\n  return ErrorFragment;\n}(Fragment);\n\nfunction verifyType(type) {\n  // These need to be transformed to their full description\n  if (type.match(/^uint($|[^1-9])/)) {\n    type = \"uint256\" + type.substring(4);\n  } else if (type.match(/^int($|[^1-9])/)) {\n    type = \"int256\" + type.substring(3);\n  } // @TODO: more verification\n\n\n  return type;\n} // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\n\n\nvar regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\n\nfunction verifyIdentifier(value) {\n  if (!value || !value.match(regexIdentifier)) {\n    logger.throwArgumentError(\"invalid identifier \\\"\".concat(value, \"\\\"\"), \"value\", value);\n  }\n\n  return value;\n}\n\nvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value) {\n  value = value.trim();\n  var result = [];\n  var accum = \"\";\n  var depth = 0;\n\n  for (var offset = 0; offset < value.length; offset++) {\n    var c = value[offset];\n\n    if (c === \",\" && depth === 0) {\n      result.push(accum);\n      accum = \"\";\n    } else {\n      accum += c;\n\n      if (c === \"(\") {\n        depth++;\n      } else if (c === \")\") {\n        depth--;\n\n        if (depth === -1) {\n          logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n        }\n      }\n    }\n  }\n\n  if (accum) {\n    result.push(accum);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../src.ts/fragments.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n;\r\nconst _constructorGuard = {};\r\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\r\nlet ModifiersNest = { calldata: true, memory: true };\r\nfunction checkModifier(type, name) {\r\n    if (type === \"bytes\" || type === \"string\") {\r\n        if (ModifiersBytes[name]) {\r\n            return true;\r\n        }\r\n    }\r\n    else if (type === \"address\") {\r\n        if (name === \"payable\") {\r\n            return true;\r\n        }\r\n    }\r\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\r\n        if (ModifiersNest[name]) {\r\n            return true;\r\n        }\r\n    }\r\n    if (ModifiersBytes[name] || name === \"payable\") {\r\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\r\n    }\r\n    return false;\r\n}\r\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\r\nfunction parseParamType(param, allowIndexed) {\r\n    let originalParam = param;\r\n    function throwError(i) {\r\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\r\n    }\r\n    param = param.replace(/\\s/g, \" \");\r\n    function newNode(parent) {\r\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\r\n        if (allowIndexed) {\r\n            node.indexed = false;\r\n        }\r\n        return node;\r\n    }\r\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\r\n    let node = parent;\r\n    for (let i = 0; i < param.length; i++) {\r\n        let c = param[i];\r\n        switch (c) {\r\n            case \"(\":\r\n                if (node.state.allowType && node.type === \"\") {\r\n                    node.type = \"tuple\";\r\n                }\r\n                else if (!node.state.allowParams) {\r\n                    throwError(i);\r\n                }\r\n                node.state.allowType = false;\r\n                node.type = verifyType(node.type);\r\n                node.components = [newNode(node)];\r\n                node = node.components[0];\r\n                break;\r\n            case \")\":\r\n                delete node.state;\r\n                if (node.name === \"indexed\") {\r\n                    if (!allowIndexed) {\r\n                        throwError(i);\r\n                    }\r\n                    node.indexed = true;\r\n                    node.name = \"\";\r\n                }\r\n                if (checkModifier(node.type, node.name)) {\r\n                    node.name = \"\";\r\n                }\r\n                node.type = verifyType(node.type);\r\n                let child = node;\r\n                node = node.parent;\r\n                if (!node) {\r\n                    throwError(i);\r\n                }\r\n                delete child.parent;\r\n                node.state.allowParams = false;\r\n                node.state.allowName = true;\r\n                node.state.allowArray = true;\r\n                break;\r\n            case \",\":\r\n                delete node.state;\r\n                if (node.name === \"indexed\") {\r\n                    if (!allowIndexed) {\r\n                        throwError(i);\r\n                    }\r\n                    node.indexed = true;\r\n                    node.name = \"\";\r\n                }\r\n                if (checkModifier(node.type, node.name)) {\r\n                    node.name = \"\";\r\n                }\r\n                node.type = verifyType(node.type);\r\n                let sibling = newNode(node.parent);\r\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\r\n                node.parent.components.push(sibling);\r\n                delete node.parent;\r\n                node = sibling;\r\n                break;\r\n            // Hit a space...\r\n            case \" \":\r\n                // If reading type, the type is done and may read a param or name\r\n                if (node.state.allowType) {\r\n                    if (node.type !== \"\") {\r\n                        node.type = verifyType(node.type);\r\n                        delete node.state.allowType;\r\n                        node.state.allowName = true;\r\n                        node.state.allowParams = true;\r\n                    }\r\n                }\r\n                // If reading name, the name is done\r\n                if (node.state.allowName) {\r\n                    if (node.name !== \"\") {\r\n                        if (node.name === \"indexed\") {\r\n                            if (!allowIndexed) {\r\n                                throwError(i);\r\n                            }\r\n                            if (node.indexed) {\r\n                                throwError(i);\r\n                            }\r\n                            node.indexed = true;\r\n                            node.name = \"\";\r\n                        }\r\n                        else if (checkModifier(node.type, node.name)) {\r\n                            node.name = \"\";\r\n                        }\r\n                        else {\r\n                            node.state.allowName = false;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"[\":\r\n                if (!node.state.allowArray) {\r\n                    throwError(i);\r\n                }\r\n                node.type += c;\r\n                node.state.allowArray = false;\r\n                node.state.allowName = false;\r\n                node.state.readArray = true;\r\n                break;\r\n            case \"]\":\r\n                if (!node.state.readArray) {\r\n                    throwError(i);\r\n                }\r\n                node.type += c;\r\n                node.state.readArray = false;\r\n                node.state.allowArray = true;\r\n                node.state.allowName = true;\r\n                break;\r\n            default:\r\n                if (node.state.allowType) {\r\n                    node.type += c;\r\n                    node.state.allowParams = true;\r\n                    node.state.allowArray = true;\r\n                }\r\n                else if (node.state.allowName) {\r\n                    node.name += c;\r\n                    delete node.state.allowArray;\r\n                }\r\n                else if (node.state.readArray) {\r\n                    node.type += c;\r\n                }\r\n                else {\r\n                    throwError(i);\r\n                }\r\n        }\r\n    }\r\n    if (node.parent) {\r\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\r\n    }\r\n    delete parent.state;\r\n    if (node.name === \"indexed\") {\r\n        if (!allowIndexed) {\r\n            throwError(originalParam.length - 7);\r\n        }\r\n        if (node.indexed) {\r\n            throwError(originalParam.length - 7);\r\n        }\r\n        node.indexed = true;\r\n        node.name = \"\";\r\n    }\r\n    else if (checkModifier(node.type, node.name)) {\r\n        node.name = \"\";\r\n    }\r\n    parent.type = verifyType(parent.type);\r\n    return parent;\r\n}\r\nfunction populate(object, params) {\r\n    for (let key in params) {\r\n        defineReadOnly(object, key, params[key]);\r\n    }\r\n}\r\nexport const FormatTypes = Object.freeze({\r\n    // Bare formatting, as is needed for computing a sighash of an event or function\r\n    sighash: \"sighash\",\r\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\r\n    minimal: \"minimal\",\r\n    // Human-Readable with nice spacing, including all names\r\n    full: \"full\",\r\n    // JSON-format a la Solidity\r\n    json: \"json\"\r\n});\r\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\r\nexport class ParamType {\r\n    constructor(constructorGuard, params) {\r\n        if (constructorGuard !== _constructorGuard) {\r\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"new ParamType()\"\r\n            });\r\n        }\r\n        populate(this, params);\r\n        let match = this.type.match(paramTypeArray);\r\n        if (match) {\r\n            populate(this, {\r\n                arrayLength: parseInt(match[2] || \"-1\"),\r\n                arrayChildren: ParamType.fromObject({\r\n                    type: match[1],\r\n                    components: this.components\r\n                }),\r\n                baseType: \"array\"\r\n            });\r\n        }\r\n        else {\r\n            populate(this, {\r\n                arrayLength: null,\r\n                arrayChildren: null,\r\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\r\n            });\r\n        }\r\n        this._isParamType = true;\r\n        Object.freeze(this);\r\n    }\r\n    // Format the parameter fragment\r\n    //   - sighash: \"(uint256,address)\"\r\n    //   - minimal: \"tuple(uint256,address) indexed\"\r\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\r\n    format(format) {\r\n        if (!format) {\r\n            format = FormatTypes.sighash;\r\n        }\r\n        if (!FormatTypes[format]) {\r\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\r\n        }\r\n        if (format === FormatTypes.json) {\r\n            let result = {\r\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\r\n                name: (this.name || undefined)\r\n            };\r\n            if (typeof (this.indexed) === \"boolean\") {\r\n                result.indexed = this.indexed;\r\n            }\r\n            if (this.components) {\r\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\r\n            }\r\n            return JSON.stringify(result);\r\n        }\r\n        let result = \"\";\r\n        // Array\r\n        if (this.baseType === \"array\") {\r\n            result += this.arrayChildren.format(format);\r\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\r\n        }\r\n        else {\r\n            if (this.baseType === \"tuple\") {\r\n                if (format !== FormatTypes.sighash) {\r\n                    result += this.type;\r\n                }\r\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\r\n            }\r\n            else {\r\n                result += this.type;\r\n            }\r\n        }\r\n        if (format !== FormatTypes.sighash) {\r\n            if (this.indexed === true) {\r\n                result += \" indexed\";\r\n            }\r\n            if (format === FormatTypes.full && this.name) {\r\n                result += \" \" + this.name;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static from(value, allowIndexed) {\r\n        if (typeof (value) === \"string\") {\r\n            return ParamType.fromString(value, allowIndexed);\r\n        }\r\n        return ParamType.fromObject(value);\r\n    }\r\n    static fromObject(value) {\r\n        if (ParamType.isParamType(value)) {\r\n            return value;\r\n        }\r\n        return new ParamType(_constructorGuard, {\r\n            name: (value.name || null),\r\n            type: verifyType(value.type),\r\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\r\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\r\n        });\r\n    }\r\n    static fromString(value, allowIndexed) {\r\n        function ParamTypify(node) {\r\n            return ParamType.fromObject({\r\n                name: node.name,\r\n                type: node.type,\r\n                indexed: node.indexed,\r\n                components: node.components\r\n            });\r\n        }\r\n        return ParamTypify(parseParamType(value, !!allowIndexed));\r\n    }\r\n    static isParamType(value) {\r\n        return !!(value != null && value._isParamType);\r\n    }\r\n}\r\n;\r\nfunction parseParams(value, allowIndex) {\r\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\r\n}\r\nexport class Fragment {\r\n    constructor(constructorGuard, params) {\r\n        if (constructorGuard !== _constructorGuard) {\r\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"new Fragment()\"\r\n            });\r\n        }\r\n        populate(this, params);\r\n        this._isFragment = true;\r\n        Object.freeze(this);\r\n    }\r\n    static from(value) {\r\n        if (Fragment.isFragment(value)) {\r\n            return value;\r\n        }\r\n        if (typeof (value) === \"string\") {\r\n            return Fragment.fromString(value);\r\n        }\r\n        return Fragment.fromObject(value);\r\n    }\r\n    static fromObject(value) {\r\n        if (Fragment.isFragment(value)) {\r\n            return value;\r\n        }\r\n        switch (value.type) {\r\n            case \"function\":\r\n                return FunctionFragment.fromObject(value);\r\n            case \"event\":\r\n                return EventFragment.fromObject(value);\r\n            case \"constructor\":\r\n                return ConstructorFragment.fromObject(value);\r\n            case \"error\":\r\n                return ErrorFragment.fromObject(value);\r\n            case \"fallback\":\r\n            case \"receive\":\r\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\r\n                return null;\r\n        }\r\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\r\n    }\r\n    static fromString(value) {\r\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\r\n        value = value.replace(/\\s/g, \" \");\r\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\r\n        value = value.trim();\r\n        if (value.split(\" \")[0] === \"event\") {\r\n            return EventFragment.fromString(value.substring(5).trim());\r\n        }\r\n        else if (value.split(\" \")[0] === \"function\") {\r\n            return FunctionFragment.fromString(value.substring(8).trim());\r\n        }\r\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\r\n            return ConstructorFragment.fromString(value.trim());\r\n        }\r\n        else if (value.split(\" \")[0] === \"error\") {\r\n            return ErrorFragment.fromString(value.substring(5).trim());\r\n        }\r\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\r\n    }\r\n    static isFragment(value) {\r\n        return !!(value && value._isFragment);\r\n    }\r\n}\r\nexport class EventFragment extends Fragment {\r\n    format(format) {\r\n        if (!format) {\r\n            format = FormatTypes.sighash;\r\n        }\r\n        if (!FormatTypes[format]) {\r\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\r\n        }\r\n        if (format === FormatTypes.json) {\r\n            return JSON.stringify({\r\n                type: \"event\",\r\n                anonymous: this.anonymous,\r\n                name: this.name,\r\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\r\n            });\r\n        }\r\n        let result = \"\";\r\n        if (format !== FormatTypes.sighash) {\r\n            result += \"event \";\r\n        }\r\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\r\n        if (format !== FormatTypes.sighash) {\r\n            if (this.anonymous) {\r\n                result += \"anonymous \";\r\n            }\r\n        }\r\n        return result.trim();\r\n    }\r\n    static from(value) {\r\n        if (typeof (value) === \"string\") {\r\n            return EventFragment.fromString(value);\r\n        }\r\n        return EventFragment.fromObject(value);\r\n    }\r\n    static fromObject(value) {\r\n        if (EventFragment.isEventFragment(value)) {\r\n            return value;\r\n        }\r\n        if (value.type !== \"event\") {\r\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\r\n        }\r\n        const params = {\r\n            name: verifyIdentifier(value.name),\r\n            anonymous: value.anonymous,\r\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\r\n            type: \"event\"\r\n        };\r\n        return new EventFragment(_constructorGuard, params);\r\n    }\r\n    static fromString(value) {\r\n        let match = value.match(regexParen);\r\n        if (!match) {\r\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\r\n        }\r\n        let anonymous = false;\r\n        match[3].split(\" \").forEach((modifier) => {\r\n            switch (modifier.trim()) {\r\n                case \"anonymous\":\r\n                    anonymous = true;\r\n                    break;\r\n                case \"\":\r\n                    break;\r\n                default:\r\n                    logger.warn(\"unknown modifier: \" + modifier);\r\n            }\r\n        });\r\n        return EventFragment.fromObject({\r\n            name: match[1].trim(),\r\n            anonymous: anonymous,\r\n            inputs: parseParams(match[2], true),\r\n            type: \"event\"\r\n        });\r\n    }\r\n    static isEventFragment(value) {\r\n        return (value && value._isFragment && value.type === \"event\");\r\n    }\r\n}\r\nfunction parseGas(value, params) {\r\n    params.gas = null;\r\n    let comps = value.split(\"@\");\r\n    if (comps.length !== 1) {\r\n        if (comps.length > 2) {\r\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\r\n        }\r\n        if (!comps[1].match(/^[0-9]+$/)) {\r\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\r\n        }\r\n        params.gas = BigNumber.from(comps[1]);\r\n        return comps[0];\r\n    }\r\n    return value;\r\n}\r\nfunction parseModifiers(value, params) {\r\n    params.constant = false;\r\n    params.payable = false;\r\n    params.stateMutability = \"nonpayable\";\r\n    value.split(\" \").forEach((modifier) => {\r\n        switch (modifier.trim()) {\r\n            case \"constant\":\r\n                params.constant = true;\r\n                break;\r\n            case \"payable\":\r\n                params.payable = true;\r\n                params.stateMutability = \"payable\";\r\n                break;\r\n            case \"nonpayable\":\r\n                params.payable = false;\r\n                params.stateMutability = \"nonpayable\";\r\n                break;\r\n            case \"pure\":\r\n                params.constant = true;\r\n                params.stateMutability = \"pure\";\r\n                break;\r\n            case \"view\":\r\n                params.constant = true;\r\n                params.stateMutability = \"view\";\r\n                break;\r\n            case \"external\":\r\n            case \"public\":\r\n            case \"\":\r\n                break;\r\n            default:\r\n                console.log(\"unknown modifier: \" + modifier);\r\n        }\r\n    });\r\n}\r\nfunction verifyState(value) {\r\n    let result = {\r\n        constant: false,\r\n        payable: true,\r\n        stateMutability: \"payable\"\r\n    };\r\n    if (value.stateMutability != null) {\r\n        result.stateMutability = value.stateMutability;\r\n        // Set (and check things are consistent) the constant property\r\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\r\n        if (value.constant != null) {\r\n            if ((!!value.constant) !== result.constant) {\r\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\r\n            }\r\n        }\r\n        // Set (and check things are consistent) the payable property\r\n        result.payable = (result.stateMutability === \"payable\");\r\n        if (value.payable != null) {\r\n            if ((!!value.payable) !== result.payable) {\r\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\r\n            }\r\n        }\r\n    }\r\n    else if (value.payable != null) {\r\n        result.payable = !!value.payable;\r\n        // If payable we can assume non-constant; otherwise we can't assume\r\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\r\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\r\n        }\r\n        result.constant = !!value.constant;\r\n        if (result.constant) {\r\n            result.stateMutability = \"view\";\r\n        }\r\n        else {\r\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\r\n        }\r\n        if (result.payable && result.constant) {\r\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\r\n        }\r\n    }\r\n    else if (value.constant != null) {\r\n        result.constant = !!value.constant;\r\n        result.payable = !result.constant;\r\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\r\n    }\r\n    else if (value.type !== \"constructor\") {\r\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\r\n    }\r\n    return result;\r\n}\r\nexport class ConstructorFragment extends Fragment {\r\n    format(format) {\r\n        if (!format) {\r\n            format = FormatTypes.sighash;\r\n        }\r\n        if (!FormatTypes[format]) {\r\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\r\n        }\r\n        if (format === FormatTypes.json) {\r\n            return JSON.stringify({\r\n                type: \"constructor\",\r\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\r\n                payable: this.payable,\r\n                gas: (this.gas ? this.gas.toNumber() : undefined),\r\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\r\n            });\r\n        }\r\n        if (format === FormatTypes.sighash) {\r\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"format(sighash)\"\r\n            });\r\n        }\r\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\r\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\r\n            result += this.stateMutability + \" \";\r\n        }\r\n        return result.trim();\r\n    }\r\n    static from(value) {\r\n        if (typeof (value) === \"string\") {\r\n            return ConstructorFragment.fromString(value);\r\n        }\r\n        return ConstructorFragment.fromObject(value);\r\n    }\r\n    static fromObject(value) {\r\n        if (ConstructorFragment.isConstructorFragment(value)) {\r\n            return value;\r\n        }\r\n        if (value.type !== \"constructor\") {\r\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\r\n        }\r\n        let state = verifyState(value);\r\n        if (state.constant) {\r\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\r\n        }\r\n        const params = {\r\n            name: null,\r\n            type: value.type,\r\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\r\n            payable: state.payable,\r\n            stateMutability: state.stateMutability,\r\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\r\n        };\r\n        return new ConstructorFragment(_constructorGuard, params);\r\n    }\r\n    static fromString(value) {\r\n        let params = { type: \"constructor\" };\r\n        value = parseGas(value, params);\r\n        let parens = value.match(regexParen);\r\n        if (!parens || parens[1].trim() !== \"constructor\") {\r\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\r\n        }\r\n        params.inputs = parseParams(parens[2].trim(), false);\r\n        parseModifiers(parens[3].trim(), params);\r\n        return ConstructorFragment.fromObject(params);\r\n    }\r\n    static isConstructorFragment(value) {\r\n        return (value && value._isFragment && value.type === \"constructor\");\r\n    }\r\n}\r\nexport class FunctionFragment extends ConstructorFragment {\r\n    format(format) {\r\n        if (!format) {\r\n            format = FormatTypes.sighash;\r\n        }\r\n        if (!FormatTypes[format]) {\r\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\r\n        }\r\n        if (format === FormatTypes.json) {\r\n            return JSON.stringify({\r\n                type: \"function\",\r\n                name: this.name,\r\n                constant: this.constant,\r\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\r\n                payable: this.payable,\r\n                gas: (this.gas ? this.gas.toNumber() : undefined),\r\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\r\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\r\n            });\r\n        }\r\n        let result = \"\";\r\n        if (format !== FormatTypes.sighash) {\r\n            result += \"function \";\r\n        }\r\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\r\n        if (format !== FormatTypes.sighash) {\r\n            if (this.stateMutability) {\r\n                if (this.stateMutability !== \"nonpayable\") {\r\n                    result += (this.stateMutability + \" \");\r\n                }\r\n            }\r\n            else if (this.constant) {\r\n                result += \"view \";\r\n            }\r\n            if (this.outputs && this.outputs.length) {\r\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\r\n            }\r\n            if (this.gas != null) {\r\n                result += \"@\" + this.gas.toString() + \" \";\r\n            }\r\n        }\r\n        return result.trim();\r\n    }\r\n    static from(value) {\r\n        if (typeof (value) === \"string\") {\r\n            return FunctionFragment.fromString(value);\r\n        }\r\n        return FunctionFragment.fromObject(value);\r\n    }\r\n    static fromObject(value) {\r\n        if (FunctionFragment.isFunctionFragment(value)) {\r\n            return value;\r\n        }\r\n        if (value.type !== \"function\") {\r\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\r\n        }\r\n        let state = verifyState(value);\r\n        const params = {\r\n            type: value.type,\r\n            name: verifyIdentifier(value.name),\r\n            constant: state.constant,\r\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\r\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\r\n            payable: state.payable,\r\n            stateMutability: state.stateMutability,\r\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\r\n        };\r\n        return new FunctionFragment(_constructorGuard, params);\r\n    }\r\n    static fromString(value) {\r\n        let params = { type: \"function\" };\r\n        value = parseGas(value, params);\r\n        let comps = value.split(\" returns \");\r\n        if (comps.length > 2) {\r\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\r\n        }\r\n        let parens = comps[0].match(regexParen);\r\n        if (!parens) {\r\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\r\n        }\r\n        params.name = parens[1].trim();\r\n        if (params.name) {\r\n            verifyIdentifier(params.name);\r\n        }\r\n        params.inputs = parseParams(parens[2], false);\r\n        parseModifiers(parens[3].trim(), params);\r\n        // We have outputs\r\n        if (comps.length > 1) {\r\n            let returns = comps[1].match(regexParen);\r\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\r\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\r\n            }\r\n            params.outputs = parseParams(returns[2], false);\r\n        }\r\n        else {\r\n            params.outputs = [];\r\n        }\r\n        return FunctionFragment.fromObject(params);\r\n    }\r\n    static isFunctionFragment(value) {\r\n        return (value && value._isFragment && value.type === \"function\");\r\n    }\r\n}\r\n//export class StructFragment extends Fragment {\r\n//}\r\nfunction checkForbidden(fragment) {\r\n    const sig = fragment.format();\r\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\r\n        logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\r\n    }\r\n    return fragment;\r\n}\r\nexport class ErrorFragment extends Fragment {\r\n    format(format) {\r\n        if (!format) {\r\n            format = FormatTypes.sighash;\r\n        }\r\n        if (!FormatTypes[format]) {\r\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\r\n        }\r\n        if (format === FormatTypes.json) {\r\n            return JSON.stringify({\r\n                type: \"error\",\r\n                name: this.name,\r\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\r\n            });\r\n        }\r\n        let result = \"\";\r\n        if (format !== FormatTypes.sighash) {\r\n            result += \"error \";\r\n        }\r\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\r\n        return result.trim();\r\n    }\r\n    static from(value) {\r\n        if (typeof (value) === \"string\") {\r\n            return ErrorFragment.fromString(value);\r\n        }\r\n        return ErrorFragment.fromObject(value);\r\n    }\r\n    static fromObject(value) {\r\n        if (ErrorFragment.isErrorFragment(value)) {\r\n            return value;\r\n        }\r\n        if (value.type !== \"error\") {\r\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\r\n        }\r\n        const params = {\r\n            type: value.type,\r\n            name: verifyIdentifier(value.name),\r\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\r\n        };\r\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\r\n    }\r\n    static fromString(value) {\r\n        let params = { type: \"error\" };\r\n        let parens = value.match(regexParen);\r\n        if (!parens) {\r\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\r\n        }\r\n        params.name = parens[1].trim();\r\n        if (params.name) {\r\n            verifyIdentifier(params.name);\r\n        }\r\n        params.inputs = parseParams(parens[2], false);\r\n        return checkForbidden(ErrorFragment.fromObject(params));\r\n    }\r\n    static isErrorFragment(value) {\r\n        return (value && value._isFragment && value.type === \"error\");\r\n    }\r\n}\r\nfunction verifyType(type) {\r\n    // These need to be transformed to their full description\r\n    if (type.match(/^uint($|[^1-9])/)) {\r\n        type = \"uint256\" + type.substring(4);\r\n    }\r\n    else if (type.match(/^int($|[^1-9])/)) {\r\n        type = \"int256\" + type.substring(3);\r\n    }\r\n    // @TODO: more verification\r\n    return type;\r\n}\r\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\r\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\r\nfunction verifyIdentifier(value) {\r\n    if (!value || !value.match(regexIdentifier)) {\r\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\r\n    }\r\n    return value;\r\n}\r\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\r\nfunction splitNesting(value) {\r\n    value = value.trim();\r\n    let result = [];\r\n    let accum = \"\";\r\n    let depth = 0;\r\n    for (let offset = 0; offset < value.length; offset++) {\r\n        let c = value[offset];\r\n        if (c === \",\" && depth === 0) {\r\n            result.push(accum);\r\n            accum = \"\";\r\n        }\r\n        else {\r\n            accum += c;\r\n            if (c === \"(\") {\r\n                depth++;\r\n            }\r\n            else if (c === \")\") {\r\n                depth--;\r\n                if (depth === -1) {\r\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (accum) {\r\n        result.push(accum);\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=fragments.js.map"]},"metadata":{},"sourceType":"module"}