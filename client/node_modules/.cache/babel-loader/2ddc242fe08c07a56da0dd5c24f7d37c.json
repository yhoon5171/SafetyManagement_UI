{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nexports.EthereumDefinition = {\n  initNetworkType: function initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // truffle has started expecting gas used/limit to be\n              // hex strings to support bignumbers for other ledgers\n              overrides.getBlock(web3);\n              overrides.getTransaction(web3);\n              overrides.getTransactionReceipt(web3);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n};\nvar overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  \"getBlock\": function getBlock(web3) {\n    // @ts-ignore\n    var _oldFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getBlock.method.outputFormatter = function (block) {\n      // @ts-ignore\n      var result = _oldFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  },\n  \"getTransaction\": function getTransaction(web3) {\n    var _oldTransactionFormatter = // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransaction.method.outputFormatter = function (tx) {\n      var result = _oldTransactionFormatter.call( // @ts-ignore\n      web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\n      return result;\n    };\n  },\n  \"getTransactionReceipt\": function getTransactionReceipt(web3) {\n    var _oldTransactionReceiptFormatter = // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransactionReceipt.method.outputFormatter = function (receipt) {\n      var result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  }\n};","map":{"version":3,"sources":["../lib/ethereum-overloads.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGa,OAAA,CAAA,kBAAA,GAAqB;EAC1B,eAD0B,2BACT,IADS,EACK;;;;;;cACnC;cACA;cACA,SAAS,CAAC,QAAV,CAAmB,IAAnB;cACA,SAAS,CAAC,cAAV,CAAyB,IAAzB;cACA,SAAS,CAAC,qBAAV,CAAgC,IAAhC;;;;;;;;;EACD;AAP+B,CAArB;AAUb,IAAM,SAAS,GAAG;EAClB;EACA;EACA;EACE,YAAY,kBAAC,IAAD,EAAmB;IAC/B;IACA,IAAM,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,MAAlB,CAAyB,eAA/C,CAF+B,CAI/B;;IACA,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,MAAlB,CAAyB,eAAzB,GAA2C,UAAA,KAAK,EAAG;MACjD;MACA,IAAI,MAAM,GAAG,aAAa,CAAC,IAAd,CAAmB,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,MAArC,EAA6C,KAA7C,CAAb,CAFiD,CAIjD;MACA;;;MACA,MAAM,CAAC,QAAP,GAAkB,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,QAAd,EAAwB,QAAxB,CAAiC,EAAjC,CAAzB;MACA,MAAM,CAAC,OAAP,GAAiB,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,OAAd,EAAuB,QAAvB,CAAgC,EAAhC,CAAxB;MAEA,OAAO,MAAP;IACD,CAVD;EAWC,CApBe;EAsBhB,kBAAkB,wBAAC,IAAD,EAAmB;IACrC,IAAM,wBAAwB,GAC5B;IACA,IAAI,CAAC,GAAL,CAAS,cAAT,CAAwB,MAAxB,CAA+B,eAFjC,CADqC,CAKrC;;IACA,IAAI,CAAC,GAAL,CAAS,cAAT,CAAwB,MAAxB,CAA+B,eAA/B,GAAiD,UAAA,EAAE,EAAG;MACpD,IAAI,MAAM,GAAG,wBAAwB,CAAC,IAAzB,EACX;MACA,IAAI,CAAC,GAAL,CAAS,cAAT,CAAwB,MAFb,EAGX,EAHW,CAAb,CADoD,CAOpD;MACA;;;MACA,MAAM,CAAC,GAAP,GAAa,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,GAAd,EAAmB,QAAnB,CAA4B,EAA5B,CAApB;MAEA,OAAO,MAAP;IACD,CAZD;EAcC,CA1Ce;EA4ChB,yBAAyB,+BAAC,IAAD,EAAmB;IAC1C,IAAM,+BAA+B,GACrC;IACA,IAAI,CAAC,GAAL,CAAS,qBAAT,CAA+B,MAA/B,CAAsC,eAFtC,CAD0C,CAK5C;;IACA,IAAI,CAAC,GAAL,CAAS,qBAAT,CAA+B,MAA/B,CAAsC,eAAtC,GAAwD,UAAA,OAAO,EAAG;MAChE,IAAI,MAAM,GAAG,+BAA+B,CAAC,IAAhC,EACX;MACA,IAAI,CAAC,GAAL,CAAS,qBAAT,CAA+B,MAFpB,EAGX,OAHW,CAAb,CADgE,CAOhE;MACA;;;MACA,MAAM,CAAC,OAAP,GAAiB,OAAO,IAAI,OAAA,CAAA,OAAJ,CAAO,MAAM,CAAC,OAAd,EAAuB,QAAvB,CAAgC,EAAhC,CAAxB;MAEA,OAAO,MAAP;IACD,CAZD;EAaC;AA/De,CAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\r\nexports.EthereumDefinition = {\r\n    initNetworkType(web3) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // truffle has started expecting gas used/limit to be\r\n            // hex strings to support bignumbers for other ledgers\r\n            overrides.getBlock(web3);\r\n            overrides.getTransaction(web3);\r\n            overrides.getTransactionReceipt(web3);\r\n        });\r\n    }\r\n};\r\nconst overrides = {\r\n    // The ts-ignores are ignoring the checks that are\r\n    // saying that web3.eth.getBlock is a function and doesn't\r\n    // have a `method` property, which it does\r\n    \"getBlock\": (web3) => {\r\n        // @ts-ignore\r\n        const _oldFormatter = web3.eth.getBlock.method.outputFormatter;\r\n        // @ts-ignore\r\n        web3.eth.getBlock.method.outputFormatter = block => {\r\n            // @ts-ignore\r\n            let result = _oldFormatter.call(web3.eth.getBlock.method, block);\r\n            // Perhaps there is a better method of doing this,\r\n            // but the raw hexstrings work for the time being\r\n            result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\r\n            result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\r\n            return result;\r\n        };\r\n    },\r\n    \"getTransaction\": (web3) => {\r\n        const _oldTransactionFormatter = \r\n        // @ts-ignore\r\n        web3.eth.getTransaction.method.outputFormatter;\r\n        // @ts-ignore\r\n        web3.eth.getTransaction.method.outputFormatter = tx => {\r\n            let result = _oldTransactionFormatter.call(\r\n            // @ts-ignore\r\n            web3.eth.getTransaction.method, tx);\r\n            // Perhaps there is a better method of doing this,\r\n            // but the raw hexstrings work for the time being\r\n            result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\r\n            return result;\r\n        };\r\n    },\r\n    \"getTransactionReceipt\": (web3) => {\r\n        const _oldTransactionReceiptFormatter = \r\n        // @ts-ignore\r\n        web3.eth.getTransactionReceipt.method.outputFormatter;\r\n        // @ts-ignore\r\n        web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\r\n            let result = _oldTransactionReceiptFormatter.call(\r\n            // @ts-ignore\r\n            web3.eth.getTransactionReceipt.method, receipt);\r\n            // Perhaps there is a better method of doing this,\r\n            // but the raw hexstrings work for the time being\r\n            result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\r\n            return result;\r\n        };\r\n    }\r\n};\r\n//# sourceMappingURL=ethereum-overloads.js.map"]},"metadata":{},"sourceType":"script"}