{"ast":null,"code":"var Reason = require('./reason');\n\nvar handlers = require('./handlers');\n\nvar override = {\n  timeoutMessage: 'not mined within',\n  // Substring of timeout err fired by web3\n  defaultMaxBlocks: 50,\n  // Max # of blocks web3 will wait for a tx\n  pollingInterval: 1000,\n\n  /**\r\n   * Attempts to extract receipt object from Web3 error message\r\n   * @param  {Object} message       web3 error\r\n   * @return {Object|undefined} receipt\r\n   */\n  extractReceipt(message) {\n    const hasReceipt = message && message.includes('{');\n    message.includes('}');\n\n    if (hasReceipt) {\n      const receiptString = '{' + message.split('{')[1].trim();\n\n      try {\n        return JSON.parse(receiptString);\n      } catch (err) {// ignore\n      }\n    }\n  },\n\n  /**\r\n   * Fired after web3 ceases to support subscriptions if user has specified\r\n   * a higher block wait time than web3's 50 blocks limit. Opens a subscription to listen\r\n   * for new blocks and begins evaluating whether block height has reached the user\r\n   * defined timeout threshhold. Resolves either a contract instance or a transaction receipt.\r\n   *\r\n   * @param  {Object} context execution state\r\n   * @param  {Object} err     error\r\n   */\n  start: async function (context, web3Error) {\n    var constructor = this;\n    var blockNumber = null;\n    var currentBlock = override.defaultMaxBlocks;\n    var maxBlocks = constructor.timeoutBlocks;\n    var timedOut = web3Error.message && web3Error.message.includes(override.timeoutMessage);\n    var shouldWait = maxBlocks > currentBlock; // Reject after attempting to get reason string if we shouldn't be waiting.\n\n    if (!timedOut || !shouldWait) {\n      // We might have been routed here in web3 >= beta.34 by their own status check\n      // error. We want to extract the receipt, emit a receipt event\n      // and reject it ourselves.\n      var receipt = override.extractReceipt(web3Error.message);\n\n      if (receipt) {\n        await handlers.receipt(context, receipt);\n        return;\n      } // This will run if there's a reason and no status field\n      // e.g: revert with reason ganache-cli --vmErrorsOnRPCResponse=true\n\n\n      var reason = await Reason.get(context.params, constructor.web3);\n\n      if (reason) {\n        web3Error.reason = reason;\n        web3Error.message += ` -- Reason given: ${reason}.`;\n      }\n\n      return context.promiEvent.reject(web3Error);\n    } // This will run every block from now until contract.timeoutBlocks\n\n\n    var listener = function (pollID) {\n      var self = this;\n      currentBlock++;\n\n      if (currentBlock > constructor.timeoutBlocks) {\n        clearInterval(pollID);\n        return;\n      }\n\n      constructor.web3.eth.getTransactionReceipt(context.transactionHash).then(result => {\n        if (!result) return;\n        result.contractAddress ? constructor.at(result.contractAddress).then(context.promiEvent.resolve).catch(context.promiEvent.reject) : constructor.promiEvent.resolve(result);\n      }).catch(err => {\n        clearInterval(pollID);\n        context.promiEvent.reject(err);\n      });\n    }; // Start polling\n\n\n    let currentPollingBlock = await constructor.web3.eth.getBlockNumber();\n    const pollID = setInterval(async () => {\n      const newBlock = await constructor.web3.eth.getBlockNumber();\n\n      if (newBlock > currentPollingBlock) {\n        currentPollingBlock = newBlock;\n        listener(pollID);\n      }\n    }, override.pollingInterval);\n  }\n};\nmodule.exports = override;","map":{"version":3,"names":["Reason","require","handlers","override","timeoutMessage","defaultMaxBlocks","pollingInterval","extractReceipt","message","hasReceipt","includes","receiptString","split","trim","JSON","parse","err","start","context","web3Error","constructor","blockNumber","currentBlock","maxBlocks","timeoutBlocks","timedOut","shouldWait","receipt","reason","get","params","web3","promiEvent","reject","listener","pollID","self","clearInterval","eth","getTransactionReceipt","transactionHash","then","result","contractAddress","at","resolve","catch","currentPollingBlock","getBlockNumber","setInterval","newBlock","module","exports"],"sources":["C:/Users/Runner/Desktop/test1/SafetyManagement_UI/client/node_modules/truffle-contract/lib/override.js"],"sourcesContent":["var Reason = require('./reason');\r\nvar handlers = require('./handlers');\r\n\r\nvar override = {\r\n\r\n  timeoutMessage: 'not mined within', // Substring of timeout err fired by web3\r\n  defaultMaxBlocks: 50,               // Max # of blocks web3 will wait for a tx\r\n  pollingInterval: 1000,\r\n\r\n  /**\r\n   * Attempts to extract receipt object from Web3 error message\r\n   * @param  {Object} message       web3 error\r\n   * @return {Object|undefined} receipt\r\n   */\r\n  extractReceipt(message){\r\n    const hasReceipt = message &&\r\n                       message.includes('{');\r\n                       message.includes('}');\r\n\r\n    if (hasReceipt){\r\n      const receiptString =  '{' + message.split('{')[1].trim();\r\n      try {\r\n        return JSON.parse(receiptString);\r\n      } catch (err){\r\n        // ignore\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fired after web3 ceases to support subscriptions if user has specified\r\n   * a higher block wait time than web3's 50 blocks limit. Opens a subscription to listen\r\n   * for new blocks and begins evaluating whether block height has reached the user\r\n   * defined timeout threshhold. Resolves either a contract instance or a transaction receipt.\r\n   *\r\n   * @param  {Object} context execution state\r\n   * @param  {Object} err     error\r\n   */\r\n  start: async function(context, web3Error){\r\n    var constructor = this;\r\n    var blockNumber = null;\r\n    var currentBlock = override.defaultMaxBlocks;\r\n    var maxBlocks = constructor.timeoutBlocks;\r\n\r\n    var timedOut = web3Error.message && web3Error.message.includes(override.timeoutMessage);\r\n    var shouldWait = maxBlocks > currentBlock;\r\n\r\n    // Reject after attempting to get reason string if we shouldn't be waiting.\r\n    if (!timedOut || !shouldWait){\r\n\r\n      // We might have been routed here in web3 >= beta.34 by their own status check\r\n      // error. We want to extract the receipt, emit a receipt event\r\n      // and reject it ourselves.\r\n      var receipt = override.extractReceipt(web3Error.message);\r\n      if (receipt){\r\n        await handlers.receipt(context, receipt);\r\n        return;\r\n      }\r\n\r\n      // This will run if there's a reason and no status field\r\n      // e.g: revert with reason ganache-cli --vmErrorsOnRPCResponse=true\r\n      var reason = await Reason.get(context.params, constructor.web3);\r\n      if (reason) {\r\n        web3Error.reason = reason;\r\n        web3Error.message += ` -- Reason given: ${reason}.`;\r\n      }\r\n\r\n      return context.promiEvent.reject(web3Error);\r\n    }\r\n\r\n    // This will run every block from now until contract.timeoutBlocks\r\n    var listener = function(pollID){\r\n      var self = this;\r\n      currentBlock++;\r\n\r\n      if (currentBlock > constructor.timeoutBlocks){\r\n        clearInterval(pollID);\r\n        return;\r\n      }\r\n\r\n      constructor.web3.eth.getTransactionReceipt(context.transactionHash)\r\n        .then(result => {\r\n          if (!result) return;\r\n\r\n          (result.contractAddress)\r\n            ? constructor\r\n                .at(result.contractAddress)\r\n                .then(context.promiEvent.resolve)\r\n                .catch(context.promiEvent.reject)\r\n\r\n            : constructor.promiEvent.resolve(result);\r\n\r\n        })\r\n        .catch(err => {\r\n          clearInterval(pollID);\r\n          context.promiEvent.reject(err);\r\n        });\r\n    };\r\n\r\n    // Start polling\r\n    let currentPollingBlock = await constructor.web3.eth.getBlockNumber();\r\n\r\n    const pollID = setInterval(async() => {\r\n      const newBlock = await constructor.web3.eth.getBlockNumber();\r\n\r\n      if(newBlock > currentPollingBlock){\r\n        currentPollingBlock = newBlock;\r\n        listener(pollID);\r\n      }\r\n    }, override.pollingInterval);\r\n  },\r\n};\r\n\r\nmodule.exports = override;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}