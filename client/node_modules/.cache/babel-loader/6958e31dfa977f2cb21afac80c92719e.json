{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport var TupleCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(TupleCoder, _Coder);\n\n  var _super = _createSuper(TupleCoder);\n\n  function TupleCoder(coders, localName) {\n    var _this;\n\n    _classCallCheck(this, TupleCoder);\n\n    var dynamic = false;\n    var types = [];\n    coders.forEach(function (coder) {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n\n      types.push(coder.type);\n    });\n    var type = \"tuple(\" + types.join(\",\") + \")\";\n    _this = _super.call(this, \"tuple\", type, localName, dynamic);\n    _this.coders = coders;\n    return _this;\n  }\n\n  _createClass(TupleCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      var values = [];\n      this.coders.forEach(function (coder) {\n        values.push(coder.defaultValue());\n      }); // We only output named properties for uniquely named coders\n\n      var uniqueNames = this.coders.reduce(function (accum, coder) {\n        var name = coder.localName;\n\n        if (name) {\n          if (!accum[name]) {\n            accum[name] = 0;\n          }\n\n          accum[name]++;\n        }\n\n        return accum;\n      }, {}); // Add named values\n\n      this.coders.forEach(function (coder, index) {\n        var name = coder.localName;\n\n        if (!name || uniqueNames[name] !== 1) {\n          return;\n        }\n\n        if (name === \"length\") {\n          name = \"_length\";\n        }\n\n        if (values[name] != null) {\n          return;\n        }\n\n        values[name] = values[index];\n      });\n      return Object.freeze(values);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, value) {\n      return pack(writer, this.coders, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n  }]);\n\n  return TupleCoder;\n}(Coder);","map":{"version":3,"sources":["../../src.ts/coders/tuple.ts"],"names":[],"mappings":"AAAA;;;;;;AAEA,SAAS,KAAT,QAAsC,kBAAtC;AACA,SAAS,IAAT,EAAe,MAAf,QAA6B,SAA7B;AAEA,WAAa,UAAb;EAAA;;EAAA;;EAGI,oBAAY,MAAZ,EAAkC,SAAlC,EAAmD;IAAA;;IAAA;;IAC/C,IAAI,OAAO,GAAG,KAAd;IACA,IAAM,KAAK,GAAkB,EAA7B;IACA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAU;MACrB,IAAI,KAAK,CAAC,OAAV,EAAmB;QAAE,OAAO,GAAG,IAAV;MAAiB;;MACtC,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,IAAjB;IACH,CAHD;IAIA,IAAM,IAAI,GAAI,WAAW,KAAK,CAAC,IAAN,CAAW,GAAX,CAAX,GAA6B,GAA3C;IAEA,0BAAM,OAAN,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC;IACA,MAAK,MAAL,GAAc,MAAd;IAV+C;EAWlD;;EAdL;IAAA;IAAA,OAgBI,wBAAY;MACR,IAAM,MAAM,GAAQ,EAApB;MACA,KAAK,MAAL,CAAY,OAAZ,CAAoB,UAAC,KAAD,EAAU;QAC1B,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,YAAN,EAAZ;MACH,CAFD,EAFQ,CAMR;;MACA,IAAM,WAAW,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,UAAC,KAAD,EAAQ,KAAR,EAAiB;QACpD,IAAM,IAAI,GAAG,KAAK,CAAC,SAAnB;;QACA,IAAI,IAAJ,EAAU;UACN,IAAI,CAAC,KAAK,CAAC,IAAD,CAAV,EAAkB;YAAE,KAAK,CAAC,IAAD,CAAL,GAAc,CAAd;UAAkB;;UACtC,KAAK,CAAC,IAAD,CAAL;QACH;;QACD,OAAO,KAAP;MACH,CAPmB,EAOa,EAPb,CAApB,CAPQ,CAgBR;;MACA,KAAK,MAAL,CAAY,OAAZ,CAAoB,UAAC,KAAD,EAAe,KAAf,EAAgC;QAChD,IAAI,IAAI,GAAG,KAAK,CAAC,SAAjB;;QACA,IAAI,CAAC,IAAD,IAAS,WAAW,CAAC,IAAD,CAAX,KAAsB,CAAnC,EAAsC;UAAE;QAAS;;QAEjD,IAAI,IAAI,KAAK,QAAb,EAAuB;UAAE,IAAI,GAAG,SAAP;QAAmB;;QAE5C,IAAI,MAAM,CAAC,IAAD,CAAN,IAAgB,IAApB,EAA0B;UAAE;QAAS;;QAErC,MAAM,CAAC,IAAD,CAAN,GAAe,MAAM,CAAC,KAAD,CAArB;MACH,CATD;MAWA,OAAO,MAAM,CAAC,MAAP,CAAc,MAAd,CAAP;IACH;EA7CL;IAAA;IAAA,OA+CI,gBAAO,MAAP,EAAuB,KAAvB,EAAoE;MAChE,OAAO,IAAI,CAAC,MAAD,EAAS,KAAK,MAAd,EAAsB,KAAtB,CAAX;IACH;EAjDL;IAAA;IAAA,OAmDI,gBAAO,MAAP,EAAqB;MACjB,OAAO,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAM,CAAC,MAAD,EAAS,KAAK,MAAd,CAA/B,CAAP;IACH;EArDL;;EAAA;AAAA,EAAgC,KAAhC","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map"]},"metadata":{},"sourceType":"module"}