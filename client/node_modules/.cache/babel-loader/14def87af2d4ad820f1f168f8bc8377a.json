{"ast":null,"code":"/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n * @module Multibase\r\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst constants = require('./constants');\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.names = Object.freeze(Object.keys(constants.names));\nexports.codes = Object.freeze(Object.keys(constants.codes));\n/**\r\n * Create a new buffer with the multibase varint+code.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be prefixed with multibase.\r\n * @memberof Multibase\r\n * @returns {Buffer}\r\n */\n\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n\n  const base = getBase(nameOrCode);\n  const codeBuf = Buffer.from(base.code);\n  const name = base.name;\n  validEncode(name, buf);\n  return Buffer.concat([codeBuf, buf]);\n}\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be encoded.\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n */\n\n\nfunction encode(nameOrCode, buf) {\n  const base = getBase(nameOrCode);\n  const name = base.name;\n  return multibase(name, Buffer.from(base.encode(buf)));\n}\n/**\r\n * Takes a buffer or string encoded with multibase header, decodes it and\r\n * returns the decoded buffer\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n *\r\n */\n\n\nfunction decode(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n\n  const code = bufOrString.substring(0, 1);\n  bufOrString = bufOrString.substring(1, bufOrString.length);\n\n  if (typeof bufOrString === 'string') {\n    bufOrString = Buffer.from(bufOrString);\n  }\n\n  const base = getBase(code);\n  return Buffer.from(base.decode(bufOrString.toString()));\n}\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {boolean}\r\n * @memberof Multibase\r\n */\n\n\nfunction isEncoded(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  } // Ensure bufOrString is a string\n\n\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\n    return false;\n  }\n\n  const code = bufOrString.substring(0, 1);\n\n  try {\n    const base = getBase(code);\n    return base.name;\n  } catch (err) {\n    return false;\n  }\n}\n/**\r\n * @param {string} name\r\n * @param {Buffer} buf\r\n * @private\r\n * @returns {undefined}\r\n */\n\n\nfunction validEncode(name, buf) {\n  const base = getBase(name);\n  base.decode(buf.toString());\n}\n\nfunction getBase(nameOrCode) {\n  let base;\n\n  if (constants.names[nameOrCode]) {\n    base = constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    base = constants.codes[nameOrCode];\n  } else {\n    throw new Error('Unsupported encoding');\n  }\n\n  if (!base.isImplemented()) {\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet');\n  }\n\n  return base;\n}","map":{"version":3,"names":["Buffer","require","constants","exports","module","multibase","encode","decode","isEncoded","names","Object","freeze","keys","codes","nameOrCode","buf","Error","base","getBase","codeBuf","from","code","name","validEncode","concat","bufOrString","isBuffer","toString","substring","length","prototype","call","err","isImplemented"],"sources":["C:/Users/Runner/Desktop/test1/SafetyManagement_UI/client/node_modules/multihashes/node_modules/multibase/src/index.js"],"sourcesContent":["/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n * @module Multibase\r\n */\r\n'use strict'\r\n\r\nconst { Buffer } = require('buffer')\r\nconst constants = require('./constants')\r\n\r\nexports = module.exports = multibase\r\nexports.encode = encode\r\nexports.decode = decode\r\nexports.isEncoded = isEncoded\r\nexports.names = Object.freeze(Object.keys(constants.names))\r\nexports.codes = Object.freeze(Object.keys(constants.codes))\r\n\r\n/**\r\n * Create a new buffer with the multibase varint+code.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be prefixed with multibase.\r\n * @memberof Multibase\r\n * @returns {Buffer}\r\n */\r\nfunction multibase (nameOrCode, buf) {\r\n  if (!buf) {\r\n    throw new Error('requires an encoded buffer')\r\n  }\r\n  const base = getBase(nameOrCode)\r\n  const codeBuf = Buffer.from(base.code)\r\n\r\n  const name = base.name\r\n  validEncode(name, buf)\r\n  return Buffer.concat([codeBuf, buf])\r\n}\r\n\r\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be encoded.\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n */\r\nfunction encode (nameOrCode, buf) {\r\n  const base = getBase(nameOrCode)\r\n  const name = base.name\r\n\r\n  return multibase(name, Buffer.from(base.encode(buf)))\r\n}\r\n\r\n/**\r\n * Takes a buffer or string encoded with multibase header, decodes it and\r\n * returns the decoded buffer\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n *\r\n */\r\nfunction decode (bufOrString) {\r\n  if (Buffer.isBuffer(bufOrString)) {\r\n    bufOrString = bufOrString.toString()\r\n  }\r\n\r\n  const code = bufOrString.substring(0, 1)\r\n  bufOrString = bufOrString.substring(1, bufOrString.length)\r\n\r\n  if (typeof bufOrString === 'string') {\r\n    bufOrString = Buffer.from(bufOrString)\r\n  }\r\n\r\n  const base = getBase(code)\r\n  return Buffer.from(base.decode(bufOrString.toString()))\r\n}\r\n\r\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {boolean}\r\n * @memberof Multibase\r\n */\r\nfunction isEncoded (bufOrString) {\r\n  if (Buffer.isBuffer(bufOrString)) {\r\n    bufOrString = bufOrString.toString()\r\n  }\r\n\r\n  // Ensure bufOrString is a string\r\n  if (Object.prototype.toString.call(bufOrString) !== '[object String]') {\r\n    return false\r\n  }\r\n\r\n  const code = bufOrString.substring(0, 1)\r\n  try {\r\n    const base = getBase(code)\r\n    return base.name\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} name\r\n * @param {Buffer} buf\r\n * @private\r\n * @returns {undefined}\r\n */\r\nfunction validEncode (name, buf) {\r\n  const base = getBase(name)\r\n  base.decode(buf.toString())\r\n}\r\n\r\nfunction getBase (nameOrCode) {\r\n  let base\r\n\r\n  if (constants.names[nameOrCode]) {\r\n    base = constants.names[nameOrCode]\r\n  } else if (constants.codes[nameOrCode]) {\r\n    base = constants.codes[nameOrCode]\r\n  } else {\r\n    throw new Error('Unsupported encoding')\r\n  }\r\n\r\n  if (!base.isImplemented()) {\r\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet')\r\n  }\r\n\r\n  return base\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}