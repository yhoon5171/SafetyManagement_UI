{"ast":null,"code":"/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n\n/**\r\n * @file utils.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\nvar _ = require('underscore');\n\nvar BN = require('bn.js');\n\nvar numberToBN = require('number-to-bn');\n\nvar utf8 = require('utf8');\n\nvar Hash = require(\"eth-lib/lib/hash\");\n/**\r\n * Returns true if object is BN, otherwise false\r\n *\r\n * @method isBN\r\n * @param {Object} object\r\n * @return {Boolean}\r\n */\n\n\nvar isBN = function (object) {\n  return object instanceof BN || object && object.constructor && object.constructor.name === 'BN';\n};\n/**\r\n * Returns true if object is BigNumber, otherwise false\r\n *\r\n * @method isBigNumber\r\n * @param {Object} object\r\n * @return {Boolean}\r\n */\n\n\nvar isBigNumber = function (object) {\n  return object && object.constructor && object.constructor.name === 'BigNumber';\n};\n/**\r\n * Takes an input and transforms it into an BN\r\n *\r\n * @method toBN\r\n * @param {Number|String|BN} number, string, HEX string or BN\r\n * @return {BN} BN\r\n */\n\n\nvar toBN = function (number) {\n  try {\n    return numberToBN.apply(null, arguments);\n  } catch (e) {\n    throw new Error(e + ' Given value: \"' + number + '\"');\n  }\n};\n/**\r\n * Takes and input transforms it into BN and if it is negative value, into two's complement\r\n *\r\n * @method toTwosComplement\r\n * @param {Number|String|BN} number\r\n * @return {String}\r\n */\n\n\nvar toTwosComplement = function (number) {\n  return '0x' + toBN(number).toTwos(256).toString(16, 64);\n};\n/**\r\n * Checks if the given string is an address\r\n *\r\n * @method isAddress\r\n * @param {String} address the given HEX address\r\n * @return {Boolean}\r\n */\n\n\nvar isAddress = function (address) {\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false; // If it's ALL lowercase or ALL upppercase\n  } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n    return true; // Otherwise check each case\n  } else {\n    return checkAddressChecksum(address);\n  }\n};\n/**\r\n * Checks if the given string is a checksummed address\r\n *\r\n * @method checkAddressChecksum\r\n * @param {String} address the given HEX address\r\n * @return {Boolean}\r\n */\n\n\nvar checkAddressChecksum = function (address) {\n  // Check each case\n  address = address.replace(/^0x/i, '');\n  var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');\n\n  for (var i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\r\n * Should be called to pad string to expected length\r\n *\r\n * @method leftPad\r\n * @param {String} string to be padded\r\n * @param {Number} chars that result string should have\r\n * @param {String} sign, by default 0\r\n * @returns {String} right aligned string\r\n */\n\n\nvar leftPad = function (string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n/**\r\n * Should be called to pad string to expected length\r\n *\r\n * @method rightPad\r\n * @param {String} string to be padded\r\n * @param {Number} chars that result string should have\r\n * @param {String} sign, by default 0\r\n * @returns {String} right aligned string\r\n */\n\n\nvar rightPad = function (string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + string + new Array(padding).join(sign ? sign : \"0\");\n};\n/**\r\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\r\n *\r\n * @method utf8ToHex\r\n * @param {String} str\r\n * @returns {String} hex representation of input string\r\n */\n\n\nvar utf8ToHex = function (str) {\n  str = utf8.encode(str);\n  var hex = \"\"; // remove \\u0000 padding from either side\n\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i); // if (code !== 0) {\n\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n; // }\n  }\n\n  return \"0x\" + hex;\n};\n/**\r\n * Should be called to get utf8 from it's hex representation\r\n *\r\n * @method hexToUtf8\r\n * @param {String} hex\r\n * @returns {String} ascii string representation of hex value\r\n */\n\n\nvar hexToUtf8 = function (hex) {\n  if (!isHexStrict(hex)) throw new Error('The parameter \"' + hex + '\" must be a valid HEX string.');\n  var str = \"\";\n  var code = 0;\n  hex = hex.replace(/^0x/i, ''); // remove 00 padding from either side\n\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  var l = hex.length;\n\n  for (var i = 0; i < l; i += 2) {\n    code = parseInt(hex.substr(i, 2), 16); // if (code !== 0) {\n\n    str += String.fromCharCode(code); // }\n  }\n\n  return utf8.decode(str);\n};\n/**\r\n * Converts value to it's number representation\r\n *\r\n * @method hexToNumber\r\n * @param {String|Number|BN} value\r\n * @return {String}\r\n */\n\n\nvar hexToNumber = function (value) {\n  if (!value) {\n    return value;\n  }\n\n  return toBN(value).toNumber();\n};\n/**\r\n * Converts value to it's decimal representation in string\r\n *\r\n * @method hexToNumberString\r\n * @param {String|Number|BN} value\r\n * @return {String}\r\n */\n\n\nvar hexToNumberString = function (value) {\n  if (!value) return value;\n  return toBN(value).toString(10);\n};\n/**\r\n * Converts value to it's hex representation\r\n *\r\n * @method numberToHex\r\n * @param {String|Number|BN} value\r\n * @return {String}\r\n */\n\n\nvar numberToHex = function (value) {\n  if (_.isNull(value) || _.isUndefined(value)) {\n    return value;\n  }\n\n  if (!isFinite(value) && !isHexStrict(value)) {\n    throw new Error('Given input \"' + value + '\" is not a number.');\n  }\n\n  var number = toBN(value);\n  var result = number.toString(16);\n  return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n/**\r\n * Convert a byte array to a hex string\r\n *\r\n * Note: Implementation from crypto-js\r\n *\r\n * @method bytesToHex\r\n * @param {Array} bytes\r\n * @return {String} the hex string\r\n */\n\n\nvar bytesToHex = function (bytes) {\n  for (var hex = [], i = 0; i < bytes.length; i++) {\n    /* jshint ignore:start */\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xF).toString(16));\n    /* jshint ignore:end */\n  }\n\n  return '0x' + hex.join(\"\");\n};\n/**\r\n * Convert a hex string to a byte array\r\n *\r\n * Note: Implementation from crypto-js\r\n *\r\n * @method hexToBytes\r\n * @param {string} hex\r\n * @return {Array} the byte array\r\n */\n\n\nvar hexToBytes = function (hex) {\n  hex = hex.toString(16);\n\n  if (!isHexStrict(hex)) {\n    throw new Error('Given value \"' + hex + '\" is not a valid hex string.');\n  }\n\n  hex = hex.replace(/^0x/i, '');\n\n  for (var bytes = [], c = 0; c < hex.length; c += 2) bytes.push(parseInt(hex.substr(c, 2), 16));\n\n  return bytes;\n};\n/**\r\n * Auto converts any given value into it's hex representation.\r\n *\r\n * And even stringifys objects before.\r\n *\r\n * @method toHex\r\n * @param {String|Number|BN|Object} value\r\n * @param {Boolean} returnType\r\n * @return {String}\r\n */\n\n\nvar toHex = function (value, returnType) {\n  /*jshint maxcomplexity: false */\n  if (isAddress(value)) {\n    return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');\n  }\n\n  if (_.isBoolean(value)) {\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n\n  if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n  } // if its a negative number, pass it through numberToHex\n\n\n  if (_.isString(value)) {\n    if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n      return returnType ? 'int256' : numberToHex(value);\n    } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n      return returnType ? 'bytes' : value;\n    } else if (!isFinite(value)) {\n      return returnType ? 'string' : utf8ToHex(value);\n    }\n  }\n\n  return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);\n};\n/**\r\n * Check if string is HEX, requires a 0x in front\r\n *\r\n * @method isHexStrict\r\n * @param {String} hex to be checked\r\n * @returns {Boolean}\r\n */\n\n\nvar isHexStrict = function (hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n/**\r\n * Check if string is HEX\r\n *\r\n * @method isHex\r\n * @param {String} hex to be checked\r\n * @returns {Boolean}\r\n */\n\n\nvar isHex = function (hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n};\n/**\r\n * Returns true if given string is a valid Ethereum block header bloom.\r\n *\r\n * TODO UNDOCUMENTED\r\n *\r\n * @method isBloom\r\n * @param {String} hex encoded bloom filter\r\n * @return {Boolean}\r\n */\n\n\nvar isBloom = function (bloom) {\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n\n  return false;\n};\n/**\r\n * Returns true if given string is a valid log topic.\r\n *\r\n * TODO UNDOCUMENTED\r\n *\r\n * @method isTopic\r\n * @param {String} hex encoded topic\r\n * @return {Boolean}\r\n */\n\n\nvar isTopic = function (topic) {\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n    return true;\n  }\n\n  return false;\n};\n/**\r\n * Hashes values to a sha3 hash using keccak 256\r\n *\r\n * To hash a HEX string the hex must have 0x in front.\r\n *\r\n * @method sha3\r\n * @return {String} the sha3 string\r\n */\n\n\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n  if (isBN(value)) {\n    value = value.toString();\n  }\n\n  if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n    value = hexToBytes(value);\n  }\n\n  var returnValue = Hash.keccak256(value); // jshint ignore:line\n\n  if (returnValue === SHA3_NULL_S) {\n    return null;\n  } else {\n    return returnValue;\n  }\n}; // expose the under the hood keccak256\n\n\nsha3._Hash = Hash;\nmodule.exports = {\n  BN: BN,\n  isBN: isBN,\n  isBigNumber: isBigNumber,\n  toBN: toBN,\n  isAddress: isAddress,\n  isBloom: isBloom,\n  // TODO UNDOCUMENTED\n  isTopic: isTopic,\n  // TODO UNDOCUMENTED\n  checkAddressChecksum: checkAddressChecksum,\n  utf8ToHex: utf8ToHex,\n  hexToUtf8: hexToUtf8,\n  hexToNumber: hexToNumber,\n  hexToNumberString: hexToNumberString,\n  numberToHex: numberToHex,\n  toHex: toHex,\n  hexToBytes: hexToBytes,\n  bytesToHex: bytesToHex,\n  isHex: isHex,\n  isHexStrict: isHexStrict,\n  leftPad: leftPad,\n  rightPad: rightPad,\n  toTwosComplement: toTwosComplement,\n  sha3: sha3\n};","map":{"version":3,"names":["_","require","BN","numberToBN","utf8","Hash","isBN","object","constructor","name","isBigNumber","toBN","number","apply","arguments","e","Error","toTwosComplement","toTwos","toString","isAddress","address","test","checkAddressChecksum","replace","addressHash","sha3","toLowerCase","i","parseInt","toUpperCase","leftPad","string","chars","sign","hasPrefix","padding","length","Array","join","rightPad","utf8ToHex","str","encode","hex","split","reverse","code","charCodeAt","n","hexToUtf8","isHexStrict","l","substr","String","fromCharCode","decode","hexToNumber","value","toNumber","hexToNumberString","numberToHex","isNull","isUndefined","isFinite","result","lt","bytesToHex","bytes","push","hexToBytes","c","toHex","returnType","isBoolean","isObject","JSON","stringify","isString","indexOf","isNumber","isHex","isBloom","bloom","isTopic","topic","SHA3_NULL_S","returnValue","keccak256","_Hash","module","exports"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/web3-utils/src/utils.js"],"sourcesContent":["/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n/**\r\n * @file utils.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\nvar _ = require('underscore');\r\nvar BN = require('bn.js');\r\nvar numberToBN = require('number-to-bn');\r\nvar utf8 = require('utf8');\r\nvar Hash = require(\"eth-lib/lib/hash\");\r\n\r\n\r\n/**\r\n * Returns true if object is BN, otherwise false\r\n *\r\n * @method isBN\r\n * @param {Object} object\r\n * @return {Boolean}\r\n */\r\nvar isBN = function (object) {\r\n    return object instanceof BN ||\r\n        (object && object.constructor && object.constructor.name === 'BN');\r\n};\r\n\r\n/**\r\n * Returns true if object is BigNumber, otherwise false\r\n *\r\n * @method isBigNumber\r\n * @param {Object} object\r\n * @return {Boolean}\r\n */\r\nvar isBigNumber = function (object) {\r\n    return object && object.constructor && object.constructor.name === 'BigNumber';\r\n};\r\n\r\n/**\r\n * Takes an input and transforms it into an BN\r\n *\r\n * @method toBN\r\n * @param {Number|String|BN} number, string, HEX string or BN\r\n * @return {BN} BN\r\n */\r\nvar toBN = function(number){\r\n    try {\r\n        return numberToBN.apply(null, arguments);\r\n    } catch(e) {\r\n        throw new Error(e + ' Given value: \"'+ number +'\"');\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Takes and input transforms it into BN and if it is negative value, into two's complement\r\n *\r\n * @method toTwosComplement\r\n * @param {Number|String|BN} number\r\n * @return {String}\r\n */\r\nvar toTwosComplement = function (number) {\r\n    return '0x'+ toBN(number).toTwos(256).toString(16, 64);\r\n};\r\n\r\n/**\r\n * Checks if the given string is an address\r\n *\r\n * @method isAddress\r\n * @param {String} address the given HEX address\r\n * @return {Boolean}\r\n */\r\nvar isAddress = function (address) {\r\n    // check if it has the basic requirements of an address\r\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n        return false;\r\n        // If it's ALL lowercase or ALL upppercase\r\n    } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\r\n        return true;\r\n        // Otherwise check each case\r\n    } else {\r\n        return checkAddressChecksum(address);\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * Checks if the given string is a checksummed address\r\n *\r\n * @method checkAddressChecksum\r\n * @param {String} address the given HEX address\r\n * @return {Boolean}\r\n */\r\nvar checkAddressChecksum = function (address) {\r\n    // Check each case\r\n    address = address.replace(/^0x/i,'');\r\n    var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');\r\n\r\n    for (var i = 0; i < 40; i++ ) {\r\n        // the nth letter should be uppercase if the nth digit of casemap is 1\r\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Should be called to pad string to expected length\r\n *\r\n * @method leftPad\r\n * @param {String} string to be padded\r\n * @param {Number} chars that result string should have\r\n * @param {String} sign, by default 0\r\n * @returns {String} right aligned string\r\n */\r\nvar leftPad = function (string, chars, sign) {\r\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\r\n    string = string.toString(16).replace(/^0x/i,'');\r\n\r\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\r\n\r\n    return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\r\n};\r\n\r\n/**\r\n * Should be called to pad string to expected length\r\n *\r\n * @method rightPad\r\n * @param {String} string to be padded\r\n * @param {Number} chars that result string should have\r\n * @param {String} sign, by default 0\r\n * @returns {String} right aligned string\r\n */\r\nvar rightPad = function (string, chars, sign) {\r\n    var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\r\n    string = string.toString(16).replace(/^0x/i,'');\r\n\r\n    var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;\r\n\r\n    return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : \"0\"));\r\n};\r\n\r\n\r\n/**\r\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\r\n *\r\n * @method utf8ToHex\r\n * @param {String} str\r\n * @returns {String} hex representation of input string\r\n */\r\nvar utf8ToHex = function(str) {\r\n    str = utf8.encode(str);\r\n    var hex = \"\";\r\n\r\n    // remove \\u0000 padding from either side\r\n    str = str.replace(/^(?:\\u0000)*/,'');\r\n    str = str.split(\"\").reverse().join(\"\");\r\n    str = str.replace(/^(?:\\u0000)*/,'');\r\n    str = str.split(\"\").reverse().join(\"\");\r\n\r\n    for(var i = 0; i < str.length; i++) {\r\n        var code = str.charCodeAt(i);\r\n        // if (code !== 0) {\r\n        var n = code.toString(16);\r\n        hex += n.length < 2 ? '0' + n : n;\r\n        // }\r\n    }\r\n\r\n    return \"0x\" + hex;\r\n};\r\n\r\n/**\r\n * Should be called to get utf8 from it's hex representation\r\n *\r\n * @method hexToUtf8\r\n * @param {String} hex\r\n * @returns {String} ascii string representation of hex value\r\n */\r\nvar hexToUtf8 = function(hex) {\r\n    if (!isHexStrict(hex))\r\n        throw new Error('The parameter \"'+ hex +'\" must be a valid HEX string.');\r\n\r\n    var str = \"\";\r\n    var code = 0;\r\n    hex = hex.replace(/^0x/i,'');\r\n\r\n    // remove 00 padding from either side\r\n    hex = hex.replace(/^(?:00)*/,'');\r\n    hex = hex.split(\"\").reverse().join(\"\");\r\n    hex = hex.replace(/^(?:00)*/,'');\r\n    hex = hex.split(\"\").reverse().join(\"\");\r\n\r\n    var l = hex.length;\r\n\r\n    for (var i=0; i < l; i+=2) {\r\n        code = parseInt(hex.substr(i, 2), 16);\r\n        // if (code !== 0) {\r\n        str += String.fromCharCode(code);\r\n        // }\r\n    }\r\n\r\n    return utf8.decode(str);\r\n};\r\n\r\n\r\n/**\r\n * Converts value to it's number representation\r\n *\r\n * @method hexToNumber\r\n * @param {String|Number|BN} value\r\n * @return {String}\r\n */\r\nvar hexToNumber = function (value) {\r\n    if (!value) {\r\n        return value;\r\n    }\r\n\r\n    return toBN(value).toNumber();\r\n};\r\n\r\n/**\r\n * Converts value to it's decimal representation in string\r\n *\r\n * @method hexToNumberString\r\n * @param {String|Number|BN} value\r\n * @return {String}\r\n */\r\nvar hexToNumberString = function (value) {\r\n    if (!value) return value;\r\n\r\n    return toBN(value).toString(10);\r\n};\r\n\r\n\r\n/**\r\n * Converts value to it's hex representation\r\n *\r\n * @method numberToHex\r\n * @param {String|Number|BN} value\r\n * @return {String}\r\n */\r\nvar numberToHex = function (value) {\r\n    if (_.isNull(value) || _.isUndefined(value)) {\r\n        return value;\r\n    }\r\n\r\n    if (!isFinite(value) && !isHexStrict(value)) {\r\n        throw new Error('Given input \"'+value+'\" is not a number.');\r\n    }\r\n\r\n    var number = toBN(value);\r\n    var result = number.toString(16);\r\n\r\n    return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\r\n};\r\n\r\n\r\n/**\r\n * Convert a byte array to a hex string\r\n *\r\n * Note: Implementation from crypto-js\r\n *\r\n * @method bytesToHex\r\n * @param {Array} bytes\r\n * @return {String} the hex string\r\n */\r\nvar bytesToHex = function(bytes) {\r\n    for (var hex = [], i = 0; i < bytes.length; i++) {\r\n        /* jshint ignore:start */\r\n        hex.push((bytes[i] >>> 4).toString(16));\r\n        hex.push((bytes[i] & 0xF).toString(16));\r\n        /* jshint ignore:end */\r\n    }\r\n    return '0x'+ hex.join(\"\");\r\n};\r\n\r\n/**\r\n * Convert a hex string to a byte array\r\n *\r\n * Note: Implementation from crypto-js\r\n *\r\n * @method hexToBytes\r\n * @param {string} hex\r\n * @return {Array} the byte array\r\n */\r\nvar hexToBytes = function(hex) {\r\n    hex = hex.toString(16);\r\n\r\n    if (!isHexStrict(hex)) {\r\n        throw new Error('Given value \"'+ hex +'\" is not a valid hex string.');\r\n    }\r\n\r\n    hex = hex.replace(/^0x/i,'');\r\n\r\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\r\n        bytes.push(parseInt(hex.substr(c, 2), 16));\r\n    return bytes;\r\n};\r\n\r\n/**\r\n * Auto converts any given value into it's hex representation.\r\n *\r\n * And even stringifys objects before.\r\n *\r\n * @method toHex\r\n * @param {String|Number|BN|Object} value\r\n * @param {Boolean} returnType\r\n * @return {String}\r\n */\r\nvar toHex = function (value, returnType) {\r\n    /*jshint maxcomplexity: false */\r\n\r\n    if (isAddress(value)) {\r\n        return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');\r\n    }\r\n\r\n    if (_.isBoolean(value)) {\r\n        return returnType ? 'bool' : value ? '0x01' : '0x00';\r\n    }\r\n\r\n\r\n    if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\r\n        return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\r\n    }\r\n\r\n    // if its a negative number, pass it through numberToHex\r\n    if (_.isString(value)) {\r\n        if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\r\n            return returnType ? 'int256' : numberToHex(value);\r\n        } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\r\n            return returnType ? 'bytes' : value;\r\n        } else if (!isFinite(value)) {\r\n            return returnType ? 'string' : utf8ToHex(value);\r\n        }\r\n    }\r\n\r\n    return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);\r\n};\r\n\r\n\r\n/**\r\n * Check if string is HEX, requires a 0x in front\r\n *\r\n * @method isHexStrict\r\n * @param {String} hex to be checked\r\n * @returns {Boolean}\r\n */\r\nvar isHexStrict = function (hex) {\r\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));\r\n};\r\n\r\n/**\r\n * Check if string is HEX\r\n *\r\n * @method isHex\r\n * @param {String} hex to be checked\r\n * @returns {Boolean}\r\n */\r\nvar isHex = function (hex) {\r\n    return ((_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));\r\n};\r\n\r\n\r\n/**\r\n * Returns true if given string is a valid Ethereum block header bloom.\r\n *\r\n * TODO UNDOCUMENTED\r\n *\r\n * @method isBloom\r\n * @param {String} hex encoded bloom filter\r\n * @return {Boolean}\r\n */\r\nvar isBloom = function (bloom) {\r\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\r\n        return false;\r\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Returns true if given string is a valid log topic.\r\n *\r\n * TODO UNDOCUMENTED\r\n *\r\n * @method isTopic\r\n * @param {String} hex encoded topic\r\n * @return {Boolean}\r\n */\r\nvar isTopic = function (topic) {\r\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\r\n        return false;\r\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\n\r\n/**\r\n * Hashes values to a sha3 hash using keccak 256\r\n *\r\n * To hash a HEX string the hex must have 0x in front.\r\n *\r\n * @method sha3\r\n * @return {String} the sha3 string\r\n */\r\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\r\n\r\nvar sha3 = function (value) {\r\n    if (isBN(value)) {\r\n        value = value.toString();\r\n    }\r\n\r\n    if (isHexStrict(value) && /^0x/i.test((value).toString())) {\r\n        value = hexToBytes(value);\r\n    }\r\n\r\n    var returnValue = Hash.keccak256(value); // jshint ignore:line\r\n\r\n    if(returnValue === SHA3_NULL_S) {\r\n        return null;\r\n    } else {\r\n        return returnValue;\r\n    }\r\n};\r\n// expose the under the hood keccak256\r\nsha3._Hash = Hash;\r\n\r\n\r\nmodule.exports = {\r\n    BN: BN,\r\n    isBN: isBN,\r\n    isBigNumber: isBigNumber,\r\n    toBN: toBN,\r\n    isAddress: isAddress,\r\n    isBloom: isBloom, // TODO UNDOCUMENTED\r\n    isTopic: isTopic, // TODO UNDOCUMENTED\r\n    checkAddressChecksum: checkAddressChecksum,\r\n    utf8ToHex: utf8ToHex,\r\n    hexToUtf8: hexToUtf8,\r\n    hexToNumber: hexToNumber,\r\n    hexToNumberString: hexToNumberString,\r\n    numberToHex: numberToHex,\r\n    toHex: toHex,\r\n    hexToBytes: hexToBytes,\r\n    bytesToHex: bytesToHex,\r\n    isHex: isHex,\r\n    isHexStrict: isHexStrict,\r\n    leftPad: leftPad,\r\n    rightPad: rightPad,\r\n    toTwosComplement: toTwosComplement,\r\n    sha3: sha3\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}