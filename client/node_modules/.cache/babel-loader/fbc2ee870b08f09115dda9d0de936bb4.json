{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar createHash = require('create-hash');\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\r\n * Creates Keccak hash of a Buffer input\r\n * @param a The input data (Buffer)\r\n * @param bits (number = 256) The Keccak width\r\n */\n\n\nvar keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsBuffer)(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return (0, keccak_1.keccak224)(a);\n      }\n\n    case 256:\n      {\n        return (0, keccak_1.keccak256)(a);\n      }\n\n    case 384:\n      {\n        return (0, keccak_1.keccak384)(a);\n      }\n\n    case 512:\n      {\n        return (0, keccak_1.keccak512)(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\".concat(bits));\n      }\n  }\n};\n\nexports.keccak = keccak;\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer)\r\n */\n\nvar keccak256 = function (a) {\n  return (0, exports.keccak)(a);\n};\n\nexports.keccak256 = keccak256;\n/**\r\n * Creates Keccak hash of a utf-8 string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\n\nvar keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsString)(a);\n  var buf = Buffer.from(a, 'utf8');\n  return (0, exports.keccak)(buf, bits);\n};\n\nexports.keccakFromString = keccakFromString;\n/**\r\n * Creates Keccak hash of an 0x-prefixed string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\n\nvar keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsHexString)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromHexString = keccakFromHexString;\n/**\r\n * Creates Keccak hash of a number array input\r\n * @param a The input data (number[])\r\n * @param bits (number = 256) The Keccak width\r\n */\n\nvar keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  (0, helpers_1.assertIsArray)(a);\n  return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\n};\n\nexports.keccakFromArray = keccakFromArray;\n/**\r\n * Creates SHA256 hash of an input.\r\n * @param  a The input data (Buffer|Array|String)\r\n */\n\nvar _sha256 = function (a) {\n  a = (0, bytes_1.toBuffer)(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\r\n * Creates SHA256 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n */\n\n\nvar sha256 = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _sha256(a);\n};\n\nexports.sha256 = sha256;\n/**\r\n * Creates SHA256 hash of a string input.\r\n * @param a The input data (string)\r\n */\n\nvar sha256FromString = function (a) {\n  (0, helpers_1.assertIsString)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromString = sha256FromString;\n/**\r\n * Creates SHA256 hash of a number[] input.\r\n * @param a The input data (number[])\r\n */\n\nvar sha256FromArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return _sha256(a);\n};\n\nexports.sha256FromArray = sha256FromArray;\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\nvar _ripemd160 = function (a, padded) {\n  a = (0, bytes_1.toBuffer)(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return (0, bytes_1.setLengthLeft)(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\r\n * Creates RIPEMD160 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\n\nvar ripemd160 = function (a, padded) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160 = ripemd160;\n/**\r\n * Creates RIPEMD160 hash of a string input.\r\n * @param a The input data (String)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\nvar ripemd160FromString = function (a, padded) {\n  (0, helpers_1.assertIsString)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromString = ripemd160FromString;\n/**\r\n * Creates RIPEMD160 hash of a number[] input.\r\n * @param a The input data (number[])\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\nvar ripemd160FromArray = function (a, padded) {\n  (0, helpers_1.assertIsArray)(a);\n  return _ripemd160(a, padded);\n};\n\nexports.ripemd160FromArray = ripemd160FromArray;\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\n\nvar rlphash = function (a) {\n  return (0, exports.keccak)(externals_1.rlp.encode(a));\n};\n\nexports.rlphash = rlphash;","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\r\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\r\nvar createHash = require('create-hash');\r\nvar externals_1 = require(\"./externals\");\r\nvar bytes_1 = require(\"./bytes\");\r\nvar helpers_1 = require(\"./helpers\");\r\n/**\r\n * Creates Keccak hash of a Buffer input\r\n * @param a The input data (Buffer)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccak = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    switch (bits) {\r\n        case 224: {\r\n            return (0, keccak_1.keccak224)(a);\r\n        }\r\n        case 256: {\r\n            return (0, keccak_1.keccak256)(a);\r\n        }\r\n        case 384: {\r\n            return (0, keccak_1.keccak384)(a);\r\n        }\r\n        case 512: {\r\n            return (0, keccak_1.keccak512)(a);\r\n        }\r\n        default: {\r\n            throw new Error(\"Invald algorithm: keccak\".concat(bits));\r\n        }\r\n    }\r\n};\r\nexports.keccak = keccak;\r\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer)\r\n */\r\nvar keccak256 = function (a) {\r\n    return (0, exports.keccak)(a);\r\n};\r\nexports.keccak256 = keccak256;\r\n/**\r\n * Creates Keccak hash of a utf-8 string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccakFromString = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsString)(a);\r\n    var buf = Buffer.from(a, 'utf8');\r\n    return (0, exports.keccak)(buf, bits);\r\n};\r\nexports.keccakFromString = keccakFromString;\r\n/**\r\n * Creates Keccak hash of an 0x-prefixed string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccakFromHexString = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsHexString)(a);\r\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\r\n};\r\nexports.keccakFromHexString = keccakFromHexString;\r\n/**\r\n * Creates Keccak hash of a number array input\r\n * @param a The input data (number[])\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nvar keccakFromArray = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);\r\n};\r\nexports.keccakFromArray = keccakFromArray;\r\n/**\r\n * Creates SHA256 hash of an input.\r\n * @param  a The input data (Buffer|Array|String)\r\n */\r\nvar _sha256 = function (a) {\r\n    a = (0, bytes_1.toBuffer)(a);\r\n    return createHash('sha256').update(a).digest();\r\n};\r\n/**\r\n * Creates SHA256 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n */\r\nvar sha256 = function (a) {\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    return _sha256(a);\r\n};\r\nexports.sha256 = sha256;\r\n/**\r\n * Creates SHA256 hash of a string input.\r\n * @param a The input data (string)\r\n */\r\nvar sha256FromString = function (a) {\r\n    (0, helpers_1.assertIsString)(a);\r\n    return _sha256(a);\r\n};\r\nexports.sha256FromString = sha256FromString;\r\n/**\r\n * Creates SHA256 hash of a number[] input.\r\n * @param a The input data (number[])\r\n */\r\nvar sha256FromArray = function (a) {\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return _sha256(a);\r\n};\r\nexports.sha256FromArray = sha256FromArray;\r\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar _ripemd160 = function (a, padded) {\r\n    a = (0, bytes_1.toBuffer)(a);\r\n    var hash = createHash('rmd160').update(a).digest();\r\n    if (padded === true) {\r\n        return (0, bytes_1.setLengthLeft)(hash, 32);\r\n    }\r\n    else {\r\n        return hash;\r\n    }\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar ripemd160 = function (a, padded) {\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    return _ripemd160(a, padded);\r\n};\r\nexports.ripemd160 = ripemd160;\r\n/**\r\n * Creates RIPEMD160 hash of a string input.\r\n * @param a The input data (String)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar ripemd160FromString = function (a, padded) {\r\n    (0, helpers_1.assertIsString)(a);\r\n    return _ripemd160(a, padded);\r\n};\r\nexports.ripemd160FromString = ripemd160FromString;\r\n/**\r\n * Creates RIPEMD160 hash of a number[] input.\r\n * @param a The input data (number[])\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar ripemd160FromArray = function (a, padded) {\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return _ripemd160(a, padded);\r\n};\r\nexports.ripemd160FromArray = ripemd160FromArray;\r\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\r\nvar rlphash = function (a) {\r\n    return (0, exports.keccak)(externals_1.rlp.encode(a));\r\n};\r\nexports.rlphash = rlphash;\r\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}