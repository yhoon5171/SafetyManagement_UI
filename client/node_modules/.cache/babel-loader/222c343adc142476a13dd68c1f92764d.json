{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _toConsumableArray = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _asyncToGenerator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar debug = require(\"debug\")(\"contract:execute\"); // eslint-disable-line no-unused-vars\n\n\nvar Web3PromiEvent = require(\"web3-core-promievent\");\n\nvar EventEmitter = require(\"events\");\n\nvar utils = require(\"./utils\");\n\nvar StatusError = require(\"./statuserror\");\n\nvar Reason = require(\"./reason\");\n\nvar handlers = require(\"./handlers\");\n\nvar override = require(\"./override\");\n\nvar reformat = require(\"./reformat\");\n\nvar execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n\n  /**\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\n   * @param  {Object} params     `sendTransaction` parameters\n   * @param  {Number} blockLimit  most recent network block.blockLimit\n   * @return {Number}             gas estimate\n   */\n  getGasEstimate: function getGasEstimate(params, blockLimit) {\n    var constructor = this;\n    var web3 = this.web3;\n    return new Promise(function (accept) {\n      // Always prefer specified gas - this includes gas set by class_defaults\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n      web3.eth.estimateGas(params).then(function (gas) {\n        var bestEstimate = utils.multiplyBigNumberByDecimal(utils.bigNumberify(gas), constructor.gasMultiplier); // Don't go over blockLimit\n\n        var limit = utils.bigNumberify(blockLimit);\n        bestEstimate.gte(limit) ? accept(limit.sub(1).toHexString()) : accept(bestEstimate.toHexString()); // We need to let txs that revert through.\n        // Often that's exactly what you are testing.\n      }).catch(function () {\n        return accept();\n      });\n    });\n  },\n\n  /**\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\n   * objects web3 can consume.\n   * @param  {Object} constructor   TruffleContract constructor\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\n   * @param  {Array}  _arguments    Arguments passed to method invocation\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\n   */\n  prepareCall: function prepareCall(constructor, methodABI, _arguments) {\n    var args = Array.prototype.slice.call(_arguments);\n    var params = utils.getTxParams.call(constructor, methodABI, args);\n    args = utils.convertToEthersBN(args);\n    return constructor.detectNetwork().then(function (network) {\n      return {\n        args: args,\n        params: params,\n        network: network\n      };\n    });\n  },\n\n  /**\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\n   * @param  {Any}  arg\n   * @return {Boolean}\n   */\n  hasTxParams: function hasTxParams(arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n\n  /**\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\n   * to execute a call at.\n   * @param  {Array}  args      `arguments` that were passed to method\n   * @param  {Any}    lastArg    terminal argument passed to method\n   * @param  {Array}  inputs     ABI segment defining method arguments\n   * @return {Boolean}           true if final argument is `defaultBlock`\n   */\n  hasDefaultBlock: function hasDefaultBlock(args, lastArg, inputs) {\n    var hasDefaultBlock = !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    var hasDefaultBlockWithParams = execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\n   * Executes method as .call and processes optional `defaultBlock` argument.\n   * @param  {Function} fn         method\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}             Return value of the call.\n   */\n  call: function call(fn, methodABI, address) {\n    var constructor = this;\n    return function () {\n      var defaultBlock = \"latest\";\n      var args = Array.prototype.slice.call(arguments);\n      var lastArg = args[args.length - 1];\n      var promiEvent = new Web3PromiEvent(); // Extract defaultBlock parameter\n\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      }\n\n      execute.prepareCall(constructor, methodABI, args).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n          var args, params, result;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  args = _ref.args, params = _ref.params;\n                  params.to = address;\n                  promiEvent.eventEmitter.emit(\"execute:call:method\", {\n                    fn: fn,\n                    args: args,\n                    address: address,\n                    abi: methodABI,\n                    contract: constructor\n                  });\n                  _context.next = 5;\n                  return fn.apply(void 0, _toConsumableArray(args)).call(params, defaultBlock);\n\n                case 5:\n                  result = _context.sent;\n                  result = reformat.numbers.call(constructor, result, methodABI.outputs);\n                  return _context.abrupt(\"return\", promiEvent.resolve(result));\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }()).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Executes method as .send\n   * @param  {Function} fn         Method to invoke\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @param  {String}   address    Deployed address of the targeted instance\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\n   */\n  send: function send(fn, methodABI, address) {\n    var constructor = this;\n    var web3 = constructor.web3;\n    return function () {\n      var deferred;\n      var promiEvent = new Web3PromiEvent();\n      execute.prepareCall(constructor, methodABI, arguments).then( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n          var args, params, network, context;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  args = _ref3.args, params = _ref3.params, network = _ref3.network;\n                  context = {\n                    contract: constructor,\n                    // Can't name this field `constructor` or `_constructor`\n                    promiEvent: promiEvent,\n                    params: params\n                  };\n                  params.to = address;\n                  params.data = fn ? fn.apply(void 0, _toConsumableArray(args)).encodeABI() : params.data;\n                  promiEvent.eventEmitter.emit(\"execute:send:method\", {\n                    fn: fn,\n                    args: args,\n                    address: address,\n                    abi: methodABI,\n                    contract: constructor\n                  });\n                  _context2.prev = 5;\n                  _context2.next = 8;\n                  return execute.getGasEstimate.call(constructor, params, network.blockLimit);\n\n                case 8:\n                  params.gas = _context2.sent;\n                  _context2.next = 15;\n                  break;\n\n                case 11:\n                  _context2.prev = 11;\n                  _context2.t0 = _context2[\"catch\"](5);\n                  promiEvent.reject(_context2.t0);\n                  return _context2.abrupt(\"return\");\n\n                case 15:\n                  deferred = web3.eth.sendTransaction(params);\n                  deferred.catch(override.start.bind(constructor, context));\n                  handlers.setup(deferred, context);\n\n                case 18:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[5, 11]]);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }()).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Deploys an instance\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\n   * @return {PromiEvent}             Resolves a TruffleContract instance\n   */\n  deploy: function deploy(constructorABI) {\n    var constructor = this;\n    var web3 = constructor.web3;\n    return function () {\n      var deferred;\n      var promiEvent = new Web3PromiEvent();\n      execute.prepareCall(constructor, constructorABI, arguments).then( /*#__PURE__*/function () {\n        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref5) {\n          var args, params, network, blockLimit, context, options, contract, receipt, reason, error, web3Instance;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  args = _ref5.args, params = _ref5.params, network = _ref5.network;\n                  blockLimit = network.blockLimit;\n                  utils.checkLibraries.apply(constructor); // Promievent and flag that allows instance to resolve (rather than just receipt)\n\n                  context = {\n                    contract: constructor,\n                    promiEvent: promiEvent,\n                    onlyEmitReceipt: true\n                  };\n                  options = {\n                    data: constructor.binary,\n                    arguments: args\n                  };\n                  contract = new web3.eth.Contract(constructor.abi);\n                  params.data = contract.deploy(options).encodeABI();\n                  _context3.next = 9;\n                  return execute.getGasEstimate.call(constructor, params, blockLimit);\n\n                case 9:\n                  params.gas = _context3.sent;\n                  context.params = params;\n                  promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\n                    args: args,\n                    abi: constructorABI,\n                    contract: constructor\n                  });\n                  deferred = web3.eth.sendTransaction(params);\n                  handlers.setup(deferred, context);\n                  _context3.prev = 14;\n                  _context3.next = 17;\n                  return deferred;\n\n                case 17:\n                  receipt = _context3.sent;\n\n                  if (!(receipt.status !== undefined && !receipt.status)) {\n                    _context3.next = 24;\n                    break;\n                  }\n\n                  _context3.next = 21;\n                  return Reason.get(params, web3);\n\n                case 21:\n                  reason = _context3.sent;\n                  error = new StatusError(params, context.transactionHash, receipt, reason);\n                  return _context3.abrupt(\"return\", context.promiEvent.reject(error));\n\n                case 24:\n                  web3Instance = new web3.eth.Contract(constructor.abi, receipt.contractAddress);\n                  web3Instance.transactionHash = context.transactionHash;\n                  context.promiEvent.resolve(new constructor(web3Instance));\n                  _context3.next = 33;\n                  break;\n\n                case 29:\n                  _context3.prev = 29;\n                  _context3.t0 = _context3[\"catch\"](14);\n                  _context3.next = 33;\n                  return override.start.call(constructor, context, _context3.t0);\n\n                case 33:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[14, 29]]);\n        }));\n\n        return function (_x3) {\n          return _ref6.apply(this, arguments);\n        };\n      }()).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Begins listening for an event OR manages the event callback\n   * @param  {Function} fn  Solidity event method\n   * @return {Emitter}      Event emitter\n   */\n  event: function event(fn) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      } // As callback\n\n\n      if (callback !== undefined) {\n        var intermediary = function intermediary(err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n\n        return constructor.detectNetwork().then(function () {\n          return fn.call(constructor.events, params, intermediary);\n        });\n      } // As EventEmitter\n\n\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(function () {\n        var event = fn(params);\n        event.on(\"data\", function (e) {\n          return dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]);\n        });\n        event.on(\"changed\", function (e) {\n          return dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]);\n        });\n        event.on(\"error\", function (e) {\n          return emitter.emit(\"error\", e);\n        });\n      });\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `allEvents`, with additional log decoding\n   * @return {PromiEvent}  EventEmitter\n   */\n  allEvents: function allEvents(web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params) {\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(function () {\n        var event = web3Instance.events.allEvents(params);\n        event.on(\"data\", function (e) {\n          return dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]);\n        });\n        event.on(\"changed\", function (e) {\n          return dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]);\n        });\n        event.on(\"error\", function (e) {\n          return emitter.emit(\"error\", e);\n        });\n      });\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `getPastEvents`, with additional log decoding\n   * @return {Promise}  Resolves array of event objects\n   */\n  getPastEvents: function getPastEvents(web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    return function (event, options) {\n      return web3Instance.getPastEvents(event, options).then(function (events) {\n        return decode.call(constructor, events, false);\n      });\n    };\n  },\n\n  /**\n   * Estimates gas cost of a method invocation\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  estimate: function estimate(fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(function (res) {\n        return fn.apply(void 0, _toConsumableArray(res.args)).estimateGas(res.params);\n      });\n    };\n  },\n\n  /**\n   *\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  request: function request(fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(function (res) {\n        return fn.apply(void 0, _toConsumableArray(res.args)).request(res.params);\n      });\n    };\n  },\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimate`\n  estimateDeployment: function estimateDeployment() {\n    var constructor = this;\n    var constructorABI = constructor.abi.filter(function (i) {\n      return i.type === \"constructor\";\n    })[0];\n    return execute.prepareCall(constructor, constructorABI, arguments).then(function (res) {\n      var options = {\n        data: constructor.binary,\n        arguments: res.args\n      };\n      delete res.params[\"data\"]; // Is this necessary?\n\n      var instance = new constructor.web3.eth.Contract(constructor.abi, res.params);\n      return instance.deploy(options).estimateGas(res.params);\n    });\n  }\n};\nmodule.exports = execute;","map":{"version":3,"names":["debug","require","Web3PromiEvent","EventEmitter","utils","StatusError","Reason","handlers","override","reformat","execute","getGasEstimate","params","blockLimit","constructor","web3","Promise","accept","gas","autoGas","eth","estimateGas","then","bestEstimate","multiplyBigNumberByDecimal","bigNumberify","gasMultiplier","limit","gte","sub","toHexString","catch","prepareCall","methodABI","_arguments","args","Array","prototype","slice","call","getTxParams","convertToEthersBN","detectNetwork","network","hasTxParams","arg","is_object","is_big_number","hasDefaultBlock","lastArg","inputs","length","hasDefaultBlockWithParams","fn","address","defaultBlock","arguments","promiEvent","pop","to","eventEmitter","emit","abi","contract","result","numbers","outputs","resolve","reject","send","deferred","context","data","encodeABI","sendTransaction","start","bind","setup","deploy","constructorABI","checkLibraries","apply","onlyEmitReceipt","options","binary","Contract","receipt","status","undefined","get","reason","error","transactionHash","web3Instance","contractAddress","event","decode","decodeLogs","currentLogID","dedupe","id","callback","intermediary","err","e","events","emitter","on","allEvents","getPastEvents","estimate","res","request","estimateDeployment","filter","i","type","instance","module","exports"],"sources":["/home/ubuntu/SafetyManagement_UI/client/node_modules/truffle-contract/lib/execute.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:execute\"); // eslint-disable-line no-unused-vars\nvar Web3PromiEvent = require(\"web3-core-promievent\");\nvar EventEmitter = require(\"events\");\nvar utils = require(\"./utils\");\nvar StatusError = require(\"./statuserror\");\nvar Reason = require(\"./reason\");\nvar handlers = require(\"./handlers\");\nvar override = require(\"./override\");\nvar reformat = require(\"./reformat\");\n\nvar execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n  /**\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\n   * @param  {Object} params     `sendTransaction` parameters\n   * @param  {Number} blockLimit  most recent network block.blockLimit\n   * @return {Number}             gas estimate\n   */\n  getGasEstimate: function(params, blockLimit) {\n    var constructor = this;\n    var web3 = this.web3;\n\n    return new Promise(function(accept) {\n      // Always prefer specified gas - this includes gas set by class_defaults\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n\n      web3.eth\n        .estimateGas(params)\n        .then(gas => {\n          const bestEstimate = utils.multiplyBigNumberByDecimal(\n            utils.bigNumberify(gas),\n            constructor.gasMultiplier\n          );\n\n          // Don't go over blockLimit\n          const limit = utils.bigNumberify(blockLimit);\n          bestEstimate.gte(limit)\n            ? accept(limit.sub(1).toHexString())\n            : accept(bestEstimate.toHexString());\n\n          // We need to let txs that revert through.\n          // Often that's exactly what you are testing.\n        })\n        .catch(() => accept());\n    });\n  },\n\n  /**\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\n   * objects web3 can consume.\n   * @param  {Object} constructor   TruffleContract constructor\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\n   * @param  {Array}  _arguments    Arguments passed to method invocation\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\n   */\n  prepareCall: function(constructor, methodABI, _arguments) {\n    var args = Array.prototype.slice.call(_arguments);\n    var params = utils.getTxParams.call(constructor, methodABI, args);\n\n    args = utils.convertToEthersBN(args);\n\n    return constructor.detectNetwork().then(network => {\n      return { args: args, params: params, network: network };\n    });\n  },\n\n  /**\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\n   * @param  {Any}  arg\n   * @return {Boolean}\n   */\n  hasTxParams: function(arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n\n  /**\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\n   * to execute a call at.\n   * @param  {Array}  args      `arguments` that were passed to method\n   * @param  {Any}    lastArg    terminal argument passed to method\n   * @param  {Array}  inputs     ABI segment defining method arguments\n   * @return {Boolean}           true if final argument is `defaultBlock`\n   */\n  hasDefaultBlock: function(args, lastArg, inputs) {\n    var hasDefaultBlock =\n      !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    var hasDefaultBlockWithParams =\n      execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\n   * Executes method as .call and processes optional `defaultBlock` argument.\n   * @param  {Function} fn         method\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}             Return value of the call.\n   */\n  call: function(fn, methodABI, address) {\n    var constructor = this;\n\n    return function() {\n      var defaultBlock = \"latest\";\n      var args = Array.prototype.slice.call(arguments);\n      var lastArg = args[args.length - 1];\n      var promiEvent = new Web3PromiEvent();\n\n      // Extract defaultBlock parameter\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      }\n\n      execute\n        .prepareCall(constructor, methodABI, args)\n        .then(async ({ args, params }) => {\n          let result;\n\n          params.to = address;\n\n          promiEvent.eventEmitter.emit(\"execute:call:method\", {\n            fn: fn,\n            args: args,\n            address: address,\n            abi: methodABI,\n            contract: constructor\n          });\n\n          result = await fn(...args).call(params, defaultBlock);\n          result = reformat.numbers.call(\n            constructor,\n            result,\n            methodABI.outputs\n          );\n          return promiEvent.resolve(result);\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Executes method as .send\n   * @param  {Function} fn         Method to invoke\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @param  {String}   address    Deployed address of the targeted instance\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\n   */\n  send: function(fn, methodABI, address) {\n    var constructor = this;\n    var web3 = constructor.web3;\n\n    return function() {\n      var deferred;\n      var promiEvent = new Web3PromiEvent();\n\n      execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(async ({ args, params, network }) => {\n          var context = {\n            contract: constructor, // Can't name this field `constructor` or `_constructor`\n            promiEvent: promiEvent,\n            params: params\n          };\n\n          params.to = address;\n          params.data = fn ? fn(...args).encodeABI() : params.data;\n\n          promiEvent.eventEmitter.emit(\"execute:send:method\", {\n            fn,\n            args,\n            address,\n            abi: methodABI,\n            contract: constructor\n          });\n\n          try {\n            params.gas = await execute.getGasEstimate.call(\n              constructor,\n              params,\n              network.blockLimit\n            );\n          } catch (error) {\n            promiEvent.reject(error);\n            return;\n          }\n\n          deferred = web3.eth.sendTransaction(params);\n          deferred.catch(override.start.bind(constructor, context));\n          handlers.setup(deferred, context);\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Deploys an instance\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\n   * @return {PromiEvent}             Resolves a TruffleContract instance\n   */\n  deploy: function(constructorABI) {\n    var constructor = this;\n    var web3 = constructor.web3;\n\n    return function() {\n      var deferred;\n      const promiEvent = new Web3PromiEvent();\n\n      execute\n        .prepareCall(constructor, constructorABI, arguments)\n        .then(async ({ args, params, network }) => {\n          const { blockLimit } = network;\n\n          utils.checkLibraries.apply(constructor);\n\n          // Promievent and flag that allows instance to resolve (rather than just receipt)\n          const context = {\n            contract: constructor,\n            promiEvent,\n            onlyEmitReceipt: true\n          };\n\n          var options = {\n            data: constructor.binary,\n            arguments: args\n          };\n\n          var contract = new web3.eth.Contract(constructor.abi);\n          params.data = contract.deploy(options).encodeABI();\n\n          params.gas = await execute.getGasEstimate.call(\n            constructor,\n            params,\n            blockLimit\n          );\n\n          context.params = params;\n\n          promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\n            args,\n            abi: constructorABI,\n            contract: constructor\n          });\n\n          deferred = web3.eth.sendTransaction(params);\n          handlers.setup(deferred, context);\n\n          try {\n            const receipt = await deferred;\n            if (receipt.status !== undefined && !receipt.status) {\n              var reason = await Reason.get(params, web3);\n\n              var error = new StatusError(\n                params,\n                context.transactionHash,\n                receipt,\n                reason\n              );\n\n              return context.promiEvent.reject(error);\n            }\n\n            var web3Instance = new web3.eth.Contract(\n              constructor.abi,\n              receipt.contractAddress\n            );\n            web3Instance.transactionHash = context.transactionHash;\n\n            context.promiEvent.resolve(new constructor(web3Instance));\n          } catch (web3Error) {\n            // Manage web3's 50 blocks' timeout error.\n            // Web3's own subscriptions go dead here.\n            await override.start.call(constructor, context, web3Error);\n          }\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Begins listening for an event OR manages the event callback\n   * @param  {Function} fn  Solidity event method\n   * @return {Emitter}      Event emitter\n   */\n  event: function(fn) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : (currentLogID = id);\n    }\n\n    return function(params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      }\n\n      // As callback\n      if (callback !== undefined) {\n        var intermediary = function(err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n\n        return constructor\n          .detectNetwork()\n          .then(() => fn.call(constructor.events, params, intermediary));\n      }\n\n      // As EventEmitter\n      var emitter = new EventEmitter();\n\n      constructor.detectNetwork().then(() => {\n        var event = fn(params);\n\n        event.on(\n          \"data\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\n          \"changed\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `allEvents`, with additional log decoding\n   * @return {PromiEvent}  EventEmitter\n   */\n  allEvents: function(web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : (currentLogID = id);\n    }\n\n    return function(params) {\n      var emitter = new EventEmitter();\n\n      constructor.detectNetwork().then(() => {\n        var event = web3Instance.events.allEvents(params);\n\n        event.on(\n          \"data\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\n          \"changed\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `getPastEvents`, with additional log decoding\n   * @return {Promise}  Resolves array of event objects\n   */\n  getPastEvents: function(web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n\n    return function(event, options) {\n      return web3Instance\n        .getPastEvents(event, options)\n        .then(events => decode.call(constructor, events, false));\n    };\n  },\n\n  /**\n   * Estimates gas cost of a method invocation\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  estimate: function(fn, methodABI) {\n    var constructor = this;\n    return function() {\n      return execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(res => fn(...res.args).estimateGas(res.params));\n    };\n  },\n\n  /**\n   *\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  request: function(fn, methodABI) {\n    var constructor = this;\n    return function() {\n      return execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(res => fn(...res.args).request(res.params));\n    };\n  },\n\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimate`\n  estimateDeployment: function() {\n    var constructor = this;\n\n    var constructorABI = constructor.abi.filter(\n      i => i.type === \"constructor\"\n    )[0];\n\n    return execute\n      .prepareCall(constructor, constructorABI, arguments)\n      .then(res => {\n        var options = {\n          data: constructor.binary,\n          arguments: res.args\n        };\n\n        delete res.params[\"data\"]; // Is this necessary?\n\n        var instance = new constructor.web3.eth.Contract(\n          constructor.abi,\n          res.params\n        );\n        return instance.deploy(options).estimateGas(res.params);\n      });\n  }\n};\n\nmodule.exports = execute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}