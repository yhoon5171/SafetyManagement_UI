{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errcode = require('err-code');\n\nvar unixfs = require('./unixfs.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\n\nvar PBData = unixfs.Data;\nvar types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nvar dirTypes = ['directory', 'hamt-sharded-directory'];\nvar DEFAULT_FILE_MODE = parseInt('0644', 8);\nvar DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n\n  mode = mode.toString();\n\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n\n  return parseInt(mode, 10) & 4095;\n}\n\nfunction parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var mtime;\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n\n  if (input instanceof Date) {\n    var ms = input.getTime();\n    var secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode__default[\"default\"](new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nvar UnixFS = /*#__PURE__*/function () {\n  function UnixFS() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n\n    _classCallCheck(this, UnixFS);\n\n    var type = options.type,\n        data = options.data,\n        blockSizes = options.blockSizes,\n        hashType = options.hashType,\n        fanout = options.fanout,\n        mtime = options.mtime,\n        mode = options.mode;\n\n    if (type && !types.includes(type)) {\n      throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n\n  _createClass(UnixFS, [{\n    key: \"mode\",\n    get: function get() {\n      return this._mode;\n    },\n    set: function set(mode) {\n      this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n      var parsedMode = parseMode(mode);\n\n      if (parsedMode !== undefined) {\n        this._mode = parsedMode;\n      }\n    }\n  }, {\n    key: \"isDirectory\",\n    value: function isDirectory() {\n      return Boolean(this.type && dirTypes.includes(this.type));\n    }\n  }, {\n    key: \"addBlockSize\",\n    value: function addBlockSize(size) {\n      this.blockSizes.push(size);\n    }\n  }, {\n    key: \"removeBlockSize\",\n    value: function removeBlockSize(index) {\n      this.blockSizes.splice(index, 1);\n    }\n  }, {\n    key: \"fileSize\",\n    value: function fileSize() {\n      if (this.isDirectory()) {\n        return 0;\n      }\n\n      var sum = 0;\n      this.blockSizes.forEach(function (size) {\n        sum += size;\n      });\n\n      if (this.data) {\n        sum += this.data.length;\n      }\n\n      return sum;\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      var type;\n\n      switch (this.type) {\n        case 'raw':\n          type = PBData.DataType.Raw;\n          break;\n\n        case 'directory':\n          type = PBData.DataType.Directory;\n          break;\n\n        case 'file':\n          type = PBData.DataType.File;\n          break;\n\n        case 'metadata':\n          type = PBData.DataType.Metadata;\n          break;\n\n        case 'symlink':\n          type = PBData.DataType.Symlink;\n          break;\n\n        case 'hamt-sharded-directory':\n          type = PBData.DataType.HAMTShard;\n          break;\n\n        default:\n          throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n      }\n\n      var data = this.data;\n\n      if (!this.data || !this.data.length) {\n        data = undefined;\n      }\n\n      var mode;\n\n      if (this.mode != null) {\n        mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n\n        if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n          mode = undefined;\n        }\n\n        if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n          mode = undefined;\n        }\n      }\n\n      var mtime;\n\n      if (this.mtime != null) {\n        var parsed = parseMtime(this.mtime);\n\n        if (parsed) {\n          mtime = {\n            Seconds: parsed.secs,\n            FractionalNanoseconds: parsed.nsecs\n          };\n\n          if (mtime.FractionalNanoseconds === 0) {\n            delete mtime.FractionalNanoseconds;\n          }\n        }\n      }\n\n      var pbData = {\n        Type: type,\n        Data: data,\n        filesize: this.isDirectory() ? undefined : this.fileSize(),\n        blocksizes: this.blockSizes,\n        hashType: this.hashType,\n        fanout: this.fanout,\n        mode: mode,\n        mtime: mtime\n      };\n      return PBData.encode(pbData).finish();\n    }\n  }], [{\n    key: \"unmarshal\",\n    value: function unmarshal(marshaled) {\n      var message = PBData.decode(marshaled);\n      var decoded = PBData.toObject(message, {\n        defaults: false,\n        arrays: true,\n        longs: Number,\n        objects: false\n      });\n      var data = new UnixFS({\n        type: types[decoded.Type],\n        data: decoded.Data,\n        blockSizes: decoded.blocksizes,\n        mode: decoded.mode,\n        mtime: decoded.mtime ? {\n          secs: decoded.mtime.Seconds,\n          nsecs: decoded.mtime.FractionalNanoseconds\n        } : undefined\n      });\n      data._originalMode = decoded.mode || 0;\n      return data;\n    }\n  }]);\n\n  return UnixFS;\n}();\n\nexports.UnixFS = UnixFS;\nexports.parseMode = parseMode;\nexports.parseMtime = parseMtime;","map":{"version":3,"names":["Object","defineProperty","exports","value","errcode","require","unixfs","_interopDefaultLegacy","e","errcode__default","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","prototype","hasOwnProperty","call","Error","UnixFS","options","type","data","blockSizes","hashType","fanout","includes","_originalMode","_mode","isDirectory","parsedMode","Boolean","size","push","index","splice","sum","forEach","length","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","Type","filesize","fileSize","blocksizes","encode","finish","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/ipfs-unixfs/cjs/src/index.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar errcode = require('err-code');\r\nvar unixfs = require('./unixfs.js');\r\n\r\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\r\n\r\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\r\n\r\nconst PBData = unixfs.Data;\r\nconst types = [\r\n  'raw',\r\n  'directory',\r\n  'file',\r\n  'metadata',\r\n  'symlink',\r\n  'hamt-sharded-directory'\r\n];\r\nconst dirTypes = [\r\n  'directory',\r\n  'hamt-sharded-directory'\r\n];\r\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\r\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\r\nfunction parseMode(mode) {\r\n  if (mode == null) {\r\n    return undefined;\r\n  }\r\n  if (typeof mode === 'number') {\r\n    return mode & 4095;\r\n  }\r\n  mode = mode.toString();\r\n  if (mode.substring(0, 1) === '0') {\r\n    return parseInt(mode, 8) & 4095;\r\n  }\r\n  return parseInt(mode, 10) & 4095;\r\n}\r\nfunction parseMtime(input) {\r\n  if (input == null) {\r\n    return undefined;\r\n  }\r\n  let mtime;\r\n  if (input.secs != null) {\r\n    mtime = {\r\n      secs: input.secs,\r\n      nsecs: input.nsecs\r\n    };\r\n  }\r\n  if (input.Seconds != null) {\r\n    mtime = {\r\n      secs: input.Seconds,\r\n      nsecs: input.FractionalNanoseconds\r\n    };\r\n  }\r\n  if (Array.isArray(input)) {\r\n    mtime = {\r\n      secs: input[0],\r\n      nsecs: input[1]\r\n    };\r\n  }\r\n  if (input instanceof Date) {\r\n    const ms = input.getTime();\r\n    const secs = Math.floor(ms / 1000);\r\n    mtime = {\r\n      secs: secs,\r\n      nsecs: (ms - secs * 1000) * 1000\r\n    };\r\n  }\r\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\r\n    return undefined;\r\n  }\r\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\r\n    throw errcode__default[\"default\"](new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\r\n  }\r\n  return mtime;\r\n}\r\nclass UnixFS {\r\n  static unmarshal(marshaled) {\r\n    const message = PBData.decode(marshaled);\r\n    const decoded = PBData.toObject(message, {\r\n      defaults: false,\r\n      arrays: true,\r\n      longs: Number,\r\n      objects: false\r\n    });\r\n    const data = new UnixFS({\r\n      type: types[decoded.Type],\r\n      data: decoded.Data,\r\n      blockSizes: decoded.blocksizes,\r\n      mode: decoded.mode,\r\n      mtime: decoded.mtime ? {\r\n        secs: decoded.mtime.Seconds,\r\n        nsecs: decoded.mtime.FractionalNanoseconds\r\n      } : undefined\r\n    });\r\n    data._originalMode = decoded.mode || 0;\r\n    return data;\r\n  }\r\n  constructor(options = { type: 'file' }) {\r\n    const {type, data, blockSizes, hashType, fanout, mtime, mode} = options;\r\n    if (type && !types.includes(type)) {\r\n      throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\r\n    }\r\n    this.type = type || 'file';\r\n    this.data = data;\r\n    this.hashType = hashType;\r\n    this.fanout = fanout;\r\n    this.blockSizes = blockSizes || [];\r\n    this._originalMode = 0;\r\n    this.mode = parseMode(mode);\r\n    if (mtime) {\r\n      this.mtime = parseMtime(mtime);\r\n      if (this.mtime && !this.mtime.nsecs) {\r\n        this.mtime.nsecs = 0;\r\n      }\r\n    }\r\n  }\r\n  set mode(mode) {\r\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\r\n    const parsedMode = parseMode(mode);\r\n    if (parsedMode !== undefined) {\r\n      this._mode = parsedMode;\r\n    }\r\n  }\r\n  get mode() {\r\n    return this._mode;\r\n  }\r\n  isDirectory() {\r\n    return Boolean(this.type && dirTypes.includes(this.type));\r\n  }\r\n  addBlockSize(size) {\r\n    this.blockSizes.push(size);\r\n  }\r\n  removeBlockSize(index) {\r\n    this.blockSizes.splice(index, 1);\r\n  }\r\n  fileSize() {\r\n    if (this.isDirectory()) {\r\n      return 0;\r\n    }\r\n    let sum = 0;\r\n    this.blockSizes.forEach(size => {\r\n      sum += size;\r\n    });\r\n    if (this.data) {\r\n      sum += this.data.length;\r\n    }\r\n    return sum;\r\n  }\r\n  marshal() {\r\n    let type;\r\n    switch (this.type) {\r\n    case 'raw':\r\n      type = PBData.DataType.Raw;\r\n      break;\r\n    case 'directory':\r\n      type = PBData.DataType.Directory;\r\n      break;\r\n    case 'file':\r\n      type = PBData.DataType.File;\r\n      break;\r\n    case 'metadata':\r\n      type = PBData.DataType.Metadata;\r\n      break;\r\n    case 'symlink':\r\n      type = PBData.DataType.Symlink;\r\n      break;\r\n    case 'hamt-sharded-directory':\r\n      type = PBData.DataType.HAMTShard;\r\n      break;\r\n    default:\r\n      throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\r\n    }\r\n    let data = this.data;\r\n    if (!this.data || !this.data.length) {\r\n      data = undefined;\r\n    }\r\n    let mode;\r\n    if (this.mode != null) {\r\n      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\r\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\r\n        mode = undefined;\r\n      }\r\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\r\n        mode = undefined;\r\n      }\r\n    }\r\n    let mtime;\r\n    if (this.mtime != null) {\r\n      const parsed = parseMtime(this.mtime);\r\n      if (parsed) {\r\n        mtime = {\r\n          Seconds: parsed.secs,\r\n          FractionalNanoseconds: parsed.nsecs\r\n        };\r\n        if (mtime.FractionalNanoseconds === 0) {\r\n          delete mtime.FractionalNanoseconds;\r\n        }\r\n      }\r\n    }\r\n    const pbData = {\r\n      Type: type,\r\n      Data: data,\r\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\r\n      blocksizes: this.blockSizes,\r\n      hashType: this.hashType,\r\n      fanout: this.fanout,\r\n      mode,\r\n      mtime\r\n    };\r\n    return PBData.encode(pbData).finish();\r\n  }\r\n}\r\n\r\nexports.UnixFS = UnixFS;\r\nexports.parseMode = parseMode;\r\nexports.parseMtime = parseMtime;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}