{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst web3_1 = __importDefault(require(\"web3\"));\n\nconst ethereum_overloads_1 = require(\"./ethereum-overloads\");\n\nconst quorum_overloads_1 = require(\"./quorum-overloads\");\n\nconst fabric_evm_overloads_1 = require(\"./fabric-evm-overloads\");\n\nconst initInterface = web3Shim => __awaiter(this, void 0, void 0, function* () {\n  const networkTypes = new Map(Object.entries({\n    \"ethereum\": ethereum_overloads_1.EthereumDefinition,\n    \"quorum\": quorum_overloads_1.QuorumDefinition,\n    \"fabric-evm\": fabric_evm_overloads_1.FabricEvmDefinition\n  }));\n  networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);\n});\n\n; // March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `truffle-interface-adapter`that should use this work in a more\n// sane and organized manner.\n\nclass Web3Shim extends web3_1.default {\n  constructor(options) {\n    super();\n\n    if (options) {\n      this.networkType = options.networkType || \"ethereum\";\n\n      if (options.provider) {\n        this.setProvider(options.provider);\n      }\n    } else {\n      this.networkType = \"ethereum\";\n    }\n\n    initInterface(this);\n  }\n\n  setNetworkType(networkType) {\n    this.networkType = networkType;\n    initInterface(this);\n  }\n\n}\n\nexports.Web3Shim = Web3Shim;\n;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AAEA,MAAMA,aAAa,GAASC,QAAN,IAA4BC;EAE9C,MAAMC,YAAY,GAAuB,IAAIC,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAe;IAC9D,YAAYC,uCADkD;IAE9D,UAAUC,mCAFoD;IAG9D,cAAcC;EAHgD,CAAf,CAAR,CAAzC;EAMAN,YAAY,CAACO,GAAb,CAAiBT,QAAQ,CAACU,WAA1B,EAAuCC,eAAvC,CAAuDX,QAAvD;AACD,CAT+C,CAAlD;;AAsBC,C,CAUD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAaY,QAAb,SAA8BC,cAA9B,CAAkC;EAGhCC,YAAYC,OAAZ,EAAqC;IACnC;;IAEA,IAAIA,OAAJ,EAAa;MACX,KAAKL,WAAL,GAAmBK,OAAO,CAACL,WAAR,IAAuB,UAA1C;;MAEA,IAAIK,OAAO,CAACC,QAAZ,EAAsB;QACpB,KAAKC,WAAL,CAAiBF,OAAO,CAACC,QAAzB;MACD;IACF,CAND,MAMO;MACL,KAAKN,WAAL,GAAmB,UAAnB;IACD;;IAEDX,aAAa,CAAC,IAAD,CAAb;EACD;;EAEDmB,cAAc,CAACR,WAAD,EAAyB;IACrC,KAAKA,WAAL,GAAmBA,WAAnB;IACAX,aAAa,CAAC,IAAD,CAAb;EACD;;AAtB+B;;AAAlCoB;AAuBC","names":["initInterface","web3Shim","__awaiter","networkTypes","Map","Object","entries","ethereum_overloads_1","quorum_overloads_1","fabric_evm_overloads_1","get","networkType","initNetworkType","Web3Shim","web3_1","constructor","options","provider","setProvider","setNetworkType","exports"],"sourceRoot":"","sources":["../lib/web3-shim.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}