{"ast":null,"code":"const debug = require(\"debug\")(\"contract:execute\"); // eslint-disable-line no-unused-vars\n\n\nvar Web3PromiEvent = require(\"web3-core-promievent\");\n\nvar EventEmitter = require(\"events\");\n\nvar utils = require(\"./utils\");\n\nvar StatusError = require(\"./statuserror\");\n\nvar Reason = require(\"./reason\");\n\nvar handlers = require(\"./handlers\");\n\nvar override = require(\"./override\");\n\nvar reformat = require(\"./reformat\");\n\nvar execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n\n  /**\r\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\r\n   * @param  {Object} params     `sendTransaction` parameters\r\n   * @param  {Number} blockLimit  most recent network block.blockLimit\r\n   * @return {Number}             gas estimate\r\n   */\n  getGasEstimate: function (params, blockLimit) {\n    var constructor = this;\n    var web3 = this.web3;\n    return new Promise(function (accept) {\n      // Always prefer specified gas - this includes gas set by class_defaults\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n      web3.eth.estimateGas(params).then(gas => {\n        const bestEstimate = utils.multiplyBigNumberByDecimal(utils.bigNumberify(gas), constructor.gasMultiplier); // Don't go over blockLimit\n\n        const limit = utils.bigNumberify(blockLimit);\n        bestEstimate.gte(limit) ? accept(limit.sub(1).toHexString()) : accept(bestEstimate.toHexString()); // We need to let txs that revert through.\n        // Often that's exactly what you are testing.\n      }).catch(() => accept());\n    });\n  },\n\n  /**\r\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\r\n   * objects web3 can consume.\r\n   * @param  {Object} constructor   TruffleContract constructor\r\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\r\n   * @param  {Array}  _arguments    Arguments passed to method invocation\r\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\r\n   */\n  prepareCall: function (constructor, methodABI, _arguments) {\n    var args = Array.prototype.slice.call(_arguments);\n    var params = utils.getTxParams.call(constructor, methodABI, args);\n    args = utils.convertToEthersBN(args);\n    return constructor.detectNetwork().then(network => {\n      return {\n        args: args,\n        params: params,\n        network: network\n      };\n    });\n  },\n\n  /**\r\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\r\n   * @param  {Any}  arg\r\n   * @return {Boolean}\r\n   */\n  hasTxParams: function (arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n\n  /**\r\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\r\n   * to execute a call at.\r\n   * @param  {Array}  args      `arguments` that were passed to method\r\n   * @param  {Any}    lastArg    terminal argument passed to method\r\n   * @param  {Array}  inputs     ABI segment defining method arguments\r\n   * @return {Boolean}           true if final argument is `defaultBlock`\r\n   */\n  hasDefaultBlock: function (args, lastArg, inputs) {\n    var hasDefaultBlock = !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    var hasDefaultBlockWithParams = execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\r\n   * Executes method as .call and processes optional `defaultBlock` argument.\r\n   * @param  {Function} fn         method\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @return {Promise}             Return value of the call.\r\n   */\n  call: function (fn, methodABI, address) {\n    var constructor = this;\n    return function () {\n      var defaultBlock = \"latest\";\n      var args = Array.prototype.slice.call(arguments);\n      var lastArg = args[args.length - 1];\n      var promiEvent = new Web3PromiEvent(); // Extract defaultBlock parameter\n\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      }\n\n      execute.prepareCall(constructor, methodABI, args).then(async _ref => {\n        let {\n          args,\n          params\n        } = _ref;\n        let result;\n        params.to = address;\n        promiEvent.eventEmitter.emit(\"execute:call:method\", {\n          fn: fn,\n          args: args,\n          address: address,\n          abi: methodABI,\n          contract: constructor\n        });\n        result = await fn(...args).call(params, defaultBlock);\n        result = reformat.numbers.call(constructor, result, methodABI.outputs);\n        return promiEvent.resolve(result);\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\r\n   * Executes method as .send\r\n   * @param  {Function} fn         Method to invoke\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @param  {String}   address    Deployed address of the targeted instance\r\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\r\n   */\n  send: function (fn, methodABI, address) {\n    var constructor = this;\n    var web3 = constructor.web3;\n    return function () {\n      var deferred;\n      var promiEvent = new Web3PromiEvent();\n      execute.prepareCall(constructor, methodABI, arguments).then(async _ref2 => {\n        let {\n          args,\n          params,\n          network\n        } = _ref2;\n        var context = {\n          contract: constructor,\n          // Can't name this field `constructor` or `_constructor`\n          promiEvent: promiEvent,\n          params: params\n        };\n        params.to = address;\n        params.data = fn ? fn(...args).encodeABI() : params.data;\n        promiEvent.eventEmitter.emit(\"execute:send:method\", {\n          fn,\n          args,\n          address,\n          abi: methodABI,\n          contract: constructor\n        });\n\n        try {\n          params.gas = await execute.getGasEstimate.call(constructor, params, network.blockLimit);\n        } catch (error) {\n          promiEvent.reject(error);\n          return;\n        }\n\n        deferred = web3.eth.sendTransaction(params);\n        deferred.catch(override.start.bind(constructor, context));\n        handlers.setup(deferred, context);\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\r\n   * Deploys an instance\r\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\r\n   * @return {PromiEvent}             Resolves a TruffleContract instance\r\n   */\n  deploy: function (constructorABI) {\n    var constructor = this;\n    var web3 = constructor.web3;\n    return function () {\n      var deferred;\n      const promiEvent = new Web3PromiEvent();\n      execute.prepareCall(constructor, constructorABI, arguments).then(async _ref3 => {\n        let {\n          args,\n          params,\n          network\n        } = _ref3;\n        const {\n          blockLimit\n        } = network;\n        utils.checkLibraries.apply(constructor); // Promievent and flag that allows instance to resolve (rather than just receipt)\n\n        const context = {\n          contract: constructor,\n          promiEvent,\n          onlyEmitReceipt: true\n        };\n        var options = {\n          data: constructor.binary,\n          arguments: args\n        };\n        var contract = new web3.eth.Contract(constructor.abi);\n        params.data = contract.deploy(options).encodeABI();\n        params.gas = await execute.getGasEstimate.call(constructor, params, blockLimit);\n        context.params = params;\n        promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\n          args,\n          abi: constructorABI,\n          contract: constructor\n        });\n        deferred = web3.eth.sendTransaction(params);\n        handlers.setup(deferred, context);\n\n        try {\n          const receipt = await deferred;\n\n          if (receipt.status !== undefined && !receipt.status) {\n            var reason = await Reason.get(params, web3);\n            var error = new StatusError(params, context.transactionHash, receipt, reason);\n            return context.promiEvent.reject(error);\n          }\n\n          var web3Instance = new web3.eth.Contract(constructor.abi, receipt.contractAddress);\n          web3Instance.transactionHash = context.transactionHash;\n          context.promiEvent.resolve(new constructor(web3Instance));\n        } catch (web3Error) {\n          // Manage web3's 50 blocks' timeout error.\n          // Web3's own subscriptions go dead here.\n          await override.start.call(constructor, context, web3Error);\n        }\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\r\n   * Begins listening for an event OR manages the event callback\r\n   * @param  {Function} fn  Solidity event method\r\n   * @return {Emitter}      Event emitter\r\n   */\n  event: function (fn) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      } // As callback\n\n\n      if (callback !== undefined) {\n        var intermediary = function (err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n\n        return constructor.detectNetwork().then(() => fn.call(constructor.events, params, intermediary));\n      } // As EventEmitter\n\n\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        var event = fn(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n\n  /**\r\n   * Wraps web3 `allEvents`, with additional log decoding\r\n   * @return {PromiEvent}  EventEmitter\r\n   */\n  allEvents: function (web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null; // Someone upstream is firing duplicates :/\n\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n\n    return function (params) {\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        var event = web3Instance.events.allEvents(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n\n  /**\r\n   * Wraps web3 `getPastEvents`, with additional log decoding\r\n   * @return {Promise}  Resolves array of event objects\r\n   */\n  getPastEvents: function (web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    return function (event, options) {\n      return web3Instance.getPastEvents(event, options).then(events => decode.call(constructor, events, false));\n    };\n  },\n\n  /**\r\n   * Estimates gas cost of a method invocation\r\n   * @param  {Function} fn  Method to target\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @return {Promise}\r\n   */\n  estimate: function (fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => fn(...res.args).estimateGas(res.params));\n    };\n  },\n\n  /**\r\n   *\r\n   * @param  {Function} fn  Method to target\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @return {Promise}\r\n   */\n  request: function (fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => fn(...res.args).request(res.params));\n    };\n  },\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimate`\n  estimateDeployment: function () {\n    var constructor = this;\n    var constructorABI = constructor.abi.filter(i => i.type === \"constructor\")[0];\n    return execute.prepareCall(constructor, constructorABI, arguments).then(res => {\n      var options = {\n        data: constructor.binary,\n        arguments: res.args\n      };\n      delete res.params[\"data\"]; // Is this necessary?\n\n      var instance = new constructor.web3.eth.Contract(constructor.abi, res.params);\n      return instance.deploy(options).estimateGas(res.params);\n    });\n  }\n};\nmodule.exports = execute;","map":{"version":3,"names":["debug","require","Web3PromiEvent","EventEmitter","utils","StatusError","Reason","handlers","override","reformat","execute","getGasEstimate","params","blockLimit","constructor","web3","Promise","accept","gas","autoGas","eth","estimateGas","then","bestEstimate","multiplyBigNumberByDecimal","bigNumberify","gasMultiplier","limit","gte","sub","toHexString","catch","prepareCall","methodABI","_arguments","args","Array","prototype","slice","call","getTxParams","convertToEthersBN","detectNetwork","network","hasTxParams","arg","is_object","is_big_number","hasDefaultBlock","lastArg","inputs","length","hasDefaultBlockWithParams","fn","address","defaultBlock","arguments","promiEvent","pop","result","to","eventEmitter","emit","abi","contract","numbers","outputs","resolve","reject","send","deferred","context","data","encodeABI","error","sendTransaction","start","bind","setup","deploy","constructorABI","checkLibraries","apply","onlyEmitReceipt","options","binary","Contract","receipt","status","undefined","reason","get","transactionHash","web3Instance","contractAddress","web3Error","event","decode","decodeLogs","currentLogID","dedupe","id","callback","intermediary","err","e","events","emitter","on","allEvents","getPastEvents","estimate","res","request","estimateDeployment","filter","i","type","instance","module","exports"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/truffle-contract/lib/execute.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:execute\"); // eslint-disable-line no-unused-vars\r\nvar Web3PromiEvent = require(\"web3-core-promievent\");\r\nvar EventEmitter = require(\"events\");\r\nvar utils = require(\"./utils\");\r\nvar StatusError = require(\"./statuserror\");\r\nvar Reason = require(\"./reason\");\r\nvar handlers = require(\"./handlers\");\r\nvar override = require(\"./override\");\r\nvar reformat = require(\"./reformat\");\r\n\r\nvar execute = {\r\n  // -----------------------------------  Helpers --------------------------------------------------\r\n  /**\r\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\r\n   * @param  {Object} params     `sendTransaction` parameters\r\n   * @param  {Number} blockLimit  most recent network block.blockLimit\r\n   * @return {Number}             gas estimate\r\n   */\r\n  getGasEstimate: function(params, blockLimit) {\r\n    var constructor = this;\r\n    var web3 = this.web3;\r\n\r\n    return new Promise(function(accept) {\r\n      // Always prefer specified gas - this includes gas set by class_defaults\r\n      if (params.gas) return accept(params.gas);\r\n      if (!constructor.autoGas) return accept();\r\n\r\n      web3.eth\r\n        .estimateGas(params)\r\n        .then(gas => {\r\n          const bestEstimate = utils.multiplyBigNumberByDecimal(\r\n            utils.bigNumberify(gas),\r\n            constructor.gasMultiplier\r\n          );\r\n\r\n          // Don't go over blockLimit\r\n          const limit = utils.bigNumberify(blockLimit);\r\n          bestEstimate.gte(limit)\r\n            ? accept(limit.sub(1).toHexString())\r\n            : accept(bestEstimate.toHexString());\r\n\r\n          // We need to let txs that revert through.\r\n          // Often that's exactly what you are testing.\r\n        })\r\n        .catch(() => accept());\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\r\n   * objects web3 can consume.\r\n   * @param  {Object} constructor   TruffleContract constructor\r\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\r\n   * @param  {Array}  _arguments    Arguments passed to method invocation\r\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\r\n   */\r\n  prepareCall: function(constructor, methodABI, _arguments) {\r\n    var args = Array.prototype.slice.call(_arguments);\r\n    var params = utils.getTxParams.call(constructor, methodABI, args);\r\n\r\n    args = utils.convertToEthersBN(args);\r\n\r\n    return constructor.detectNetwork().then(network => {\r\n      return { args: args, params: params, network: network };\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\r\n   * @param  {Any}  arg\r\n   * @return {Boolean}\r\n   */\r\n  hasTxParams: function(arg) {\r\n    return utils.is_object(arg) && !utils.is_big_number(arg);\r\n  },\r\n\r\n  /**\r\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\r\n   * to execute a call at.\r\n   * @param  {Array}  args      `arguments` that were passed to method\r\n   * @param  {Any}    lastArg    terminal argument passed to method\r\n   * @param  {Array}  inputs     ABI segment defining method arguments\r\n   * @return {Boolean}           true if final argument is `defaultBlock`\r\n   */\r\n  hasDefaultBlock: function(args, lastArg, inputs) {\r\n    var hasDefaultBlock =\r\n      !execute.hasTxParams(lastArg) && args.length > inputs.length;\r\n    var hasDefaultBlockWithParams =\r\n      execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\r\n    return hasDefaultBlock || hasDefaultBlockWithParams;\r\n  },\r\n\r\n  // -----------------------------------  Methods --------------------------------------------------\r\n\r\n  /**\r\n   * Executes method as .call and processes optional `defaultBlock` argument.\r\n   * @param  {Function} fn         method\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @return {Promise}             Return value of the call.\r\n   */\r\n  call: function(fn, methodABI, address) {\r\n    var constructor = this;\r\n\r\n    return function() {\r\n      var defaultBlock = \"latest\";\r\n      var args = Array.prototype.slice.call(arguments);\r\n      var lastArg = args[args.length - 1];\r\n      var promiEvent = new Web3PromiEvent();\r\n\r\n      // Extract defaultBlock parameter\r\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\r\n        defaultBlock = args.pop();\r\n      }\r\n\r\n      execute\r\n        .prepareCall(constructor, methodABI, args)\r\n        .then(async ({ args, params }) => {\r\n          let result;\r\n\r\n          params.to = address;\r\n\r\n          promiEvent.eventEmitter.emit(\"execute:call:method\", {\r\n            fn: fn,\r\n            args: args,\r\n            address: address,\r\n            abi: methodABI,\r\n            contract: constructor\r\n          });\r\n\r\n          result = await fn(...args).call(params, defaultBlock);\r\n          result = reformat.numbers.call(\r\n            constructor,\r\n            result,\r\n            methodABI.outputs\r\n          );\r\n          return promiEvent.resolve(result);\r\n        })\r\n        .catch(promiEvent.reject);\r\n\r\n      return promiEvent.eventEmitter;\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Executes method as .send\r\n   * @param  {Function} fn         Method to invoke\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @param  {String}   address    Deployed address of the targeted instance\r\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\r\n   */\r\n  send: function(fn, methodABI, address) {\r\n    var constructor = this;\r\n    var web3 = constructor.web3;\r\n\r\n    return function() {\r\n      var deferred;\r\n      var promiEvent = new Web3PromiEvent();\r\n\r\n      execute\r\n        .prepareCall(constructor, methodABI, arguments)\r\n        .then(async ({ args, params, network }) => {\r\n          var context = {\r\n            contract: constructor, // Can't name this field `constructor` or `_constructor`\r\n            promiEvent: promiEvent,\r\n            params: params\r\n          };\r\n\r\n          params.to = address;\r\n          params.data = fn ? fn(...args).encodeABI() : params.data;\r\n\r\n          promiEvent.eventEmitter.emit(\"execute:send:method\", {\r\n            fn,\r\n            args,\r\n            address,\r\n            abi: methodABI,\r\n            contract: constructor\r\n          });\r\n\r\n          try {\r\n            params.gas = await execute.getGasEstimate.call(\r\n              constructor,\r\n              params,\r\n              network.blockLimit\r\n            );\r\n          } catch (error) {\r\n            promiEvent.reject(error);\r\n            return;\r\n          }\r\n\r\n          deferred = web3.eth.sendTransaction(params);\r\n          deferred.catch(override.start.bind(constructor, context));\r\n          handlers.setup(deferred, context);\r\n        })\r\n        .catch(promiEvent.reject);\r\n\r\n      return promiEvent.eventEmitter;\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Deploys an instance\r\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\r\n   * @return {PromiEvent}             Resolves a TruffleContract instance\r\n   */\r\n  deploy: function(constructorABI) {\r\n    var constructor = this;\r\n    var web3 = constructor.web3;\r\n\r\n    return function() {\r\n      var deferred;\r\n      const promiEvent = new Web3PromiEvent();\r\n\r\n      execute\r\n        .prepareCall(constructor, constructorABI, arguments)\r\n        .then(async ({ args, params, network }) => {\r\n          const { blockLimit } = network;\r\n\r\n          utils.checkLibraries.apply(constructor);\r\n\r\n          // Promievent and flag that allows instance to resolve (rather than just receipt)\r\n          const context = {\r\n            contract: constructor,\r\n            promiEvent,\r\n            onlyEmitReceipt: true\r\n          };\r\n\r\n          var options = {\r\n            data: constructor.binary,\r\n            arguments: args\r\n          };\r\n\r\n          var contract = new web3.eth.Contract(constructor.abi);\r\n          params.data = contract.deploy(options).encodeABI();\r\n\r\n          params.gas = await execute.getGasEstimate.call(\r\n            constructor,\r\n            params,\r\n            blockLimit\r\n          );\r\n\r\n          context.params = params;\r\n\r\n          promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\r\n            args,\r\n            abi: constructorABI,\r\n            contract: constructor\r\n          });\r\n\r\n          deferred = web3.eth.sendTransaction(params);\r\n          handlers.setup(deferred, context);\r\n\r\n          try {\r\n            const receipt = await deferred;\r\n            if (receipt.status !== undefined && !receipt.status) {\r\n              var reason = await Reason.get(params, web3);\r\n\r\n              var error = new StatusError(\r\n                params,\r\n                context.transactionHash,\r\n                receipt,\r\n                reason\r\n              );\r\n\r\n              return context.promiEvent.reject(error);\r\n            }\r\n\r\n            var web3Instance = new web3.eth.Contract(\r\n              constructor.abi,\r\n              receipt.contractAddress\r\n            );\r\n            web3Instance.transactionHash = context.transactionHash;\r\n\r\n            context.promiEvent.resolve(new constructor(web3Instance));\r\n          } catch (web3Error) {\r\n            // Manage web3's 50 blocks' timeout error.\r\n            // Web3's own subscriptions go dead here.\r\n            await override.start.call(constructor, context, web3Error);\r\n          }\r\n        })\r\n        .catch(promiEvent.reject);\r\n\r\n      return promiEvent.eventEmitter;\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Begins listening for an event OR manages the event callback\r\n   * @param  {Function} fn  Solidity event method\r\n   * @return {Emitter}      Event emitter\r\n   */\r\n  event: function(fn) {\r\n    var constructor = this;\r\n    var decode = utils.decodeLogs;\r\n    var currentLogID = null;\r\n\r\n    // Someone upstream is firing duplicates :/\r\n    function dedupe(id) {\r\n      return id === currentLogID ? false : (currentLogID = id);\r\n    }\r\n\r\n    return function(params, callback) {\r\n      if (typeof params === \"function\") {\r\n        callback = params;\r\n        params = {};\r\n      }\r\n\r\n      // As callback\r\n      if (callback !== undefined) {\r\n        var intermediary = function(err, e) {\r\n          if (err) return callback(err);\r\n          if (!dedupe(e.id)) return;\r\n          callback(null, decode.call(constructor, e, true)[0]);\r\n        };\r\n\r\n        return constructor\r\n          .detectNetwork()\r\n          .then(() => fn.call(constructor.events, params, intermediary));\r\n      }\r\n\r\n      // As EventEmitter\r\n      var emitter = new EventEmitter();\r\n\r\n      constructor.detectNetwork().then(() => {\r\n        var event = fn(params);\r\n\r\n        event.on(\r\n          \"data\",\r\n          e =>\r\n            dedupe(e.id) &&\r\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\r\n        );\r\n        event.on(\r\n          \"changed\",\r\n          e =>\r\n            dedupe(e.id) &&\r\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\r\n        );\r\n        event.on(\"error\", e => emitter.emit(\"error\", e));\r\n      });\r\n\r\n      return emitter;\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Wraps web3 `allEvents`, with additional log decoding\r\n   * @return {PromiEvent}  EventEmitter\r\n   */\r\n  allEvents: function(web3Instance) {\r\n    var constructor = this;\r\n    var decode = utils.decodeLogs;\r\n    var currentLogID = null;\r\n\r\n    // Someone upstream is firing duplicates :/\r\n    function dedupe(id) {\r\n      return id === currentLogID ? false : (currentLogID = id);\r\n    }\r\n\r\n    return function(params) {\r\n      var emitter = new EventEmitter();\r\n\r\n      constructor.detectNetwork().then(() => {\r\n        var event = web3Instance.events.allEvents(params);\r\n\r\n        event.on(\r\n          \"data\",\r\n          e =>\r\n            dedupe(e.id) &&\r\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\r\n        );\r\n        event.on(\r\n          \"changed\",\r\n          e =>\r\n            dedupe(e.id) &&\r\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\r\n        );\r\n        event.on(\"error\", e => emitter.emit(\"error\", e));\r\n      });\r\n\r\n      return emitter;\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Wraps web3 `getPastEvents`, with additional log decoding\r\n   * @return {Promise}  Resolves array of event objects\r\n   */\r\n  getPastEvents: function(web3Instance) {\r\n    var constructor = this;\r\n    var decode = utils.decodeLogs;\r\n\r\n    return function(event, options) {\r\n      return web3Instance\r\n        .getPastEvents(event, options)\r\n        .then(events => decode.call(constructor, events, false));\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Estimates gas cost of a method invocation\r\n   * @param  {Function} fn  Method to target\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @return {Promise}\r\n   */\r\n  estimate: function(fn, methodABI) {\r\n    var constructor = this;\r\n    return function() {\r\n      return execute\r\n        .prepareCall(constructor, methodABI, arguments)\r\n        .then(res => fn(...res.args).estimateGas(res.params));\r\n    };\r\n  },\r\n\r\n  /**\r\n   *\r\n   * @param  {Function} fn  Method to target\r\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\r\n   * @return {Promise}\r\n   */\r\n  request: function(fn, methodABI) {\r\n    var constructor = this;\r\n    return function() {\r\n      return execute\r\n        .prepareCall(constructor, methodABI, arguments)\r\n        .then(res => fn(...res.args).request(res.params));\r\n    };\r\n  },\r\n\r\n  // This gets attached to `.new` (declared as a static_method in `contract`)\r\n  // during bootstrapping as `estimate`\r\n  estimateDeployment: function() {\r\n    var constructor = this;\r\n\r\n    var constructorABI = constructor.abi.filter(\r\n      i => i.type === \"constructor\"\r\n    )[0];\r\n\r\n    return execute\r\n      .prepareCall(constructor, constructorABI, arguments)\r\n      .then(res => {\r\n        var options = {\r\n          data: constructor.binary,\r\n          arguments: res.args\r\n        };\r\n\r\n        delete res.params[\"data\"]; // Is this necessary?\r\n\r\n        var instance = new constructor.web3.eth.Contract(\r\n          constructor.abi,\r\n          res.params\r\n        );\r\n        return instance.deploy(options).estimateGas(res.params);\r\n      });\r\n  }\r\n};\r\n\r\nmodule.exports = execute;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}