{"ast":null,"code":"/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\n\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar core = require('web3-core');\n\nvar helpers = require('web3-core-helpers');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar Method = require('web3-core-method');\n\nvar utils = require('web3-utils');\n\nvar Net = require('web3-net');\n\nvar ENS = require('web3-eth-ens');\n\nvar Personal = require('web3-eth-personal');\n\nvar BaseContract = require('web3-eth-contract');\n\nvar Iban = require('web3-eth-iban');\n\nvar Accounts = require('web3-eth-accounts');\n\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\n\nvar formatter = helpers.formatters;\n\nvar blockCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\nvar Eth = function Eth() {\n  var _this = this; // sets _requestmanager\n\n\n  core.packageInit(this, arguments); // overwrite setProvider\n\n  var setProvider = this.setProvider;\n\n  this.setProvider = function () {\n    setProvider.apply(_this, arguments);\n\n    _this.net.setProvider.apply(_this, arguments);\n\n    _this.personal.setProvider.apply(_this, arguments);\n\n    _this.accounts.setProvider.apply(_this, arguments);\n\n    _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n  };\n\n  var defaultAccount = null;\n  var defaultBlock = 'latest';\n  Object.defineProperty(this, 'defaultAccount', {\n    get: function () {\n      return defaultAccount;\n    },\n    set: function (val) {\n      if (val) {\n        defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n      } // also set on the Contract object\n\n\n      _this.Contract.defaultAccount = defaultAccount;\n      _this.personal.defaultAccount = defaultAccount; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultAccount = defaultAccount;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultBlock', {\n    get: function () {\n      return defaultBlock;\n    },\n    set: function (val) {\n      defaultBlock = val; // also set on the Contract object\n\n      _this.Contract.defaultBlock = defaultBlock;\n      _this.personal.defaultBlock = defaultBlock; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultBlock = defaultBlock;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  this.clearSubscriptions = _this._requestManager.clearSubscriptions; // add net\n\n  this.net = new Net(this.currentProvider); // add chain detection\n\n  this.net.getNetworkType = getNetworkType.bind(this); // add accounts\n\n  this.accounts = new Accounts(this.currentProvider); // add personal\n\n  this.personal = new Personal(this.currentProvider);\n  this.personal.defaultAccount = this.defaultAccount; // create a proxy Contract type for this instance, as a Contract's provider\n  // is stored as a class member rather than an instance variable. If we do\n  // not create this proxy type, changing the provider in one instance of\n  // web3-eth would subsequently change the provider for _all_ contract\n  // instances!\n\n  var self = this;\n\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments); // when Eth.setProvider is called, call packageInit\n    // on all contract instances instantiated via this Eth\n    // instances. This will update the currentProvider for\n    // the contract instances\n\n    var _this = this;\n\n    var setProvider = self.setProvider;\n\n    self.setProvider = function () {\n      setProvider.apply(self, arguments);\n      core.packageInit(_this, [self.currentProvider]);\n    };\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  }; // make our proxy Contract inherit from web3-eth-contract so that it has all\n  // the right functionality and so that instanceof and friends work properly\n\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract; // add contract\n\n  this.Contract = Contract;\n  this.Contract.defaultAccount = this.defaultAccount;\n  this.Contract.defaultBlock = this.defaultBlock;\n  this.Contract.setProvider(this.currentProvider, this.accounts); // add IBAN\n\n  this.Iban = Iban; // add ABI\n\n  this.abi = abi; // add ENS\n\n  this.ens = new ENS(this);\n  var methods = [new Method({\n    name: 'getNodeInfo',\n    call: 'web3_clientVersion'\n  }), new Method({\n    name: 'getProtocolVersion',\n    call: 'eth_protocolVersion',\n    params: 0\n  }), new Method({\n    name: 'getCoinbase',\n    call: 'eth_coinbase',\n    params: 0\n  }), new Method({\n    name: 'isMining',\n    call: 'eth_mining',\n    params: 0\n  }), new Method({\n    name: 'getHashrate',\n    call: 'eth_hashrate',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'isSyncing',\n    call: 'eth_syncing',\n    params: 0,\n    outputFormatter: formatter.outputSyncingFormatter\n  }), new Method({\n    name: 'getGasPrice',\n    call: 'eth_gasPrice',\n    params: 0,\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getAccounts',\n    call: 'eth_accounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getBlockNumber',\n    call: 'eth_blockNumber',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBalance',\n    call: 'eth_getBalance',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getStorageAt',\n    call: 'eth_getStorageAt',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getBlock',\n    call: blockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getUncle',\n    call: uncleCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getBlockTransactionCount',\n    call: getBlockTransactionCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBlockUncleCount',\n    call: uncleCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getTransaction',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionFromBlock',\n    call: transactionFromBlockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getTransactionCount',\n    call: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'sendSignedTransaction',\n    call: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null]\n  }), new Method({\n    name: 'signTransaction',\n    call: 'eth_signTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sendTransaction',\n    call: 'eth_sendTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sign',\n    call: 'eth_sign',\n    params: 2,\n    inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n    transformPayload: function (payload) {\n      payload.params.reverse();\n      return payload;\n    }\n  }), new Method({\n    name: 'call',\n    call: 'eth_call',\n    params: 2,\n    inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'estimateGas',\n    call: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatter.inputCallFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'submitWork',\n    call: 'eth_submitWork',\n    params: 3\n  }), new Method({\n    name: 'getWork',\n    call: 'eth_getWork',\n    params: 0\n  }), new Method({\n    name: 'getPastLogs',\n    call: 'eth_getLogs',\n    params: 1,\n    inputFormatter: [formatter.inputLogFormatter],\n    outputFormatter: formatter.outputLogFormatter\n  }), // subscriptions\n  new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        // TODO rename on RPC side?\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatter.outputBlockFormatter\n      },\n      'pendingTransactions': {\n        subscriptionName: 'newPendingTransactions',\n        // replace subscription with this name\n        params: 0\n      },\n      'logs': {\n        params: 1,\n        inputFormatter: [formatter.inputLogFormatter],\n        outputFormatter: formatter.outputLogFormatter,\n        // DUBLICATE, also in web3-eth-contract\n        subscriptionHandler: function (output) {\n          if (output.removed) {\n            this.emit('changed', output);\n          } else {\n            this.emit('data', output);\n          }\n\n          if (_.isFunction(this.callback)) {\n            this.callback(null, output, this);\n          }\n        }\n      },\n      'syncing': {\n        params: 0,\n        outputFormatter: formatter.outputSyncingFormatter,\n        subscriptionHandler: function (output) {\n          var _this = this; // fire TRUE at start\n\n\n          if (this._isSyncing !== true) {\n            this._isSyncing = true;\n            this.emit('changed', _this._isSyncing);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, _this._isSyncing, this);\n            }\n\n            setTimeout(function () {\n              _this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                _this.callback(null, output, _this);\n              }\n            }, 0); // fire sync status\n          } else {\n            this.emit('data', output);\n\n            if (_.isFunction(_this.callback)) {\n              this.callback(null, output, this);\n            } // wait for some time before fireing the FALSE\n\n\n            clearTimeout(this._isSyncingTimeout);\n            this._isSyncingTimeout = setTimeout(function () {\n              if (output.currentBlock > output.highestBlock - 200) {\n                _this._isSyncing = false;\n\n                _this.emit('changed', _this._isSyncing);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, _this._isSyncing, _this);\n                }\n              }\n            }, 500);\n          }\n        }\n      }\n    }\n  })];\n  methods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n\n    method.defaultBlock = _this.defaultBlock;\n    method.defaultAccount = _this.defaultAccount;\n  });\n};\n\ncore.addProviders(Eth);\nmodule.exports = Eth;","map":{"version":3,"names":["_","require","core","helpers","Subscriptions","subscriptions","Method","utils","Net","ENS","Personal","BaseContract","Iban","Accounts","abi","getNetworkType","formatter","formatters","blockCall","args","isString","indexOf","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Eth","_this","packageInit","arguments","setProvider","apply","net","personal","accounts","Contract","currentProvider","defaultAccount","defaultBlock","Object","defineProperty","get","set","val","toChecksumAddress","inputAddressFormatter","methods","forEach","method","enumerable","clearSubscriptions","_requestManager","bind","self","prototype","create","constructor","ens","name","call","params","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","inputDefaultBlockNumberFormatter","numberToHex","inputBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","inputTransactionFormatter","inputSignFormatter","transformPayload","payload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","type","subscriptionName","subscriptionHandler","output","removed","emit","isFunction","callback","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","setRequestManager","addProviders","module","exports"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/truffle-interface-adapter/node_modules/web3-eth/src/index.js"],"sourcesContent":["/*\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\n\"use strict\";\r\n\r\nvar _ = require('underscore');\r\nvar core = require('web3-core');\r\nvar helpers = require('web3-core-helpers');\r\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\r\nvar Method = require('web3-core-method');\r\nvar utils = require('web3-utils');\r\nvar Net = require('web3-net');\r\n\r\nvar ENS = require('web3-eth-ens');\r\nvar Personal = require('web3-eth-personal');\r\nvar BaseContract = require('web3-eth-contract');\r\nvar Iban = require('web3-eth-iban');\r\nvar Accounts = require('web3-eth-accounts');\r\nvar abi = require('web3-eth-abi');\r\n\r\nvar getNetworkType = require('./getNetworkType.js');\r\nvar formatter = helpers.formatters;\r\n\r\n\r\nvar blockCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\r\n};\r\n\r\nvar transactionFromBlockCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\r\n};\r\n\r\nvar uncleCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\r\n};\r\n\r\nvar getBlockTransactionCountCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\r\n};\r\n\r\nvar uncleCountCall = function (args) {\r\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\r\n};\r\n\r\n\r\nvar Eth = function Eth() {\r\n    var _this = this;\r\n\r\n    // sets _requestmanager\r\n    core.packageInit(this, arguments);\r\n\r\n    // overwrite setProvider\r\n    var setProvider = this.setProvider;\r\n    this.setProvider = function () {\r\n        setProvider.apply(_this, arguments);\r\n        _this.net.setProvider.apply(_this, arguments);\r\n        _this.personal.setProvider.apply(_this, arguments);\r\n        _this.accounts.setProvider.apply(_this, arguments);\r\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\r\n    };\r\n\r\n\r\n    var defaultAccount = null;\r\n    var defaultBlock = 'latest';\r\n\r\n    Object.defineProperty(this, 'defaultAccount', {\r\n        get: function () {\r\n            return defaultAccount;\r\n        },\r\n        set: function (val) {\r\n            if(val) {\r\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\r\n            }\r\n\r\n            // also set on the Contract object\r\n            _this.Contract.defaultAccount = defaultAccount;\r\n            _this.personal.defaultAccount = defaultAccount;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.defaultAccount = defaultAccount;\r\n            });\r\n\r\n            return val;\r\n        },\r\n        enumerable: true\r\n    });\r\n    Object.defineProperty(this, 'defaultBlock', {\r\n        get: function () {\r\n            return defaultBlock;\r\n        },\r\n        set: function (val) {\r\n            defaultBlock = val;\r\n            // also set on the Contract object\r\n            _this.Contract.defaultBlock = defaultBlock;\r\n            _this.personal.defaultBlock = defaultBlock;\r\n\r\n            // update defaultBlock\r\n            methods.forEach(function(method) {\r\n                method.defaultBlock = defaultBlock;\r\n            });\r\n\r\n            return val;\r\n        },\r\n        enumerable: true\r\n    });\r\n\r\n\r\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\r\n\r\n    // add net\r\n    this.net = new Net(this.currentProvider);\r\n    // add chain detection\r\n    this.net.getNetworkType = getNetworkType.bind(this);\r\n\r\n    // add accounts\r\n    this.accounts = new Accounts(this.currentProvider);\r\n\r\n    // add personal\r\n    this.personal = new Personal(this.currentProvider);\r\n    this.personal.defaultAccount = this.defaultAccount;\r\n\r\n    // create a proxy Contract type for this instance, as a Contract's provider\r\n    // is stored as a class member rather than an instance variable. If we do\r\n    // not create this proxy type, changing the provider in one instance of\r\n    // web3-eth would subsequently change the provider for _all_ contract\r\n    // instances!\r\n    var self = this;\r\n    var Contract = function Contract() {\r\n        BaseContract.apply(this, arguments);\r\n\r\n        // when Eth.setProvider is called, call packageInit\r\n        // on all contract instances instantiated via this Eth\r\n        // instances. This will update the currentProvider for\r\n        // the contract instances\r\n        var _this = this;\r\n        var setProvider = self.setProvider;\r\n        self.setProvider = function() {\r\n          setProvider.apply(self, arguments);\r\n          core.packageInit(_this, [self.currentProvider]);\r\n        };\r\n    };\r\n\r\n    Contract.setProvider = function() {\r\n        BaseContract.setProvider.apply(this, arguments);\r\n    };\r\n\r\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\r\n    // the right functionality and so that instanceof and friends work properly\r\n    Contract.prototype = Object.create(BaseContract.prototype);\r\n    Contract.prototype.constructor = Contract;\r\n\r\n    // add contract\r\n    this.Contract = Contract;\r\n    this.Contract.defaultAccount = this.defaultAccount;\r\n    this.Contract.defaultBlock = this.defaultBlock;\r\n    this.Contract.setProvider(this.currentProvider, this.accounts);\r\n\r\n    // add IBAN\r\n    this.Iban = Iban;\r\n\r\n    // add ABI\r\n    this.abi = abi;\r\n\r\n    // add ENS\r\n    this.ens = new ENS(this);\r\n\r\n    var methods = [\r\n        new Method({\r\n            name: 'getNodeInfo',\r\n            call: 'web3_clientVersion'\r\n        }),\r\n        new Method({\r\n            name: 'getProtocolVersion',\r\n            call: 'eth_protocolVersion',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getCoinbase',\r\n            call: 'eth_coinbase',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'isMining',\r\n            call: 'eth_mining',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getHashrate',\r\n            call: 'eth_hashrate',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'isSyncing',\r\n            call: 'eth_syncing',\r\n            params: 0,\r\n            outputFormatter: formatter.outputSyncingFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getGasPrice',\r\n            call: 'eth_gasPrice',\r\n            params: 0,\r\n            outputFormatter: formatter.outputBigNumberFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getAccounts',\r\n            call: 'eth_accounts',\r\n            params: 0,\r\n            outputFormatter: utils.toChecksumAddress\r\n        }),\r\n        new Method({\r\n            name: 'getBlockNumber',\r\n            call: 'eth_blockNumber',\r\n            params: 0,\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getBalance',\r\n            call: 'eth_getBalance',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: formatter.outputBigNumberFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getStorageAt',\r\n            call: 'eth_getStorageAt',\r\n            params: 3,\r\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'getCode',\r\n            call: 'eth_getCode',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'getBlock',\r\n            call: blockCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\r\n            outputFormatter: formatter.outputBlockFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getUncle',\r\n            call: uncleCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\r\n            outputFormatter: formatter.outputBlockFormatter,\r\n\r\n        }),\r\n        new Method({\r\n            name: 'getBlockTransactionCount',\r\n            call: getBlockTransactionCountCall,\r\n            params: 1,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getBlockUncleCount',\r\n            call: uncleCountCall,\r\n            params: 1,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'getTransaction',\r\n            call: 'eth_getTransactionByHash',\r\n            params: 1,\r\n            inputFormatter: [null],\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionFromBlock',\r\n            call: transactionFromBlockCall,\r\n            params: 2,\r\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\r\n            outputFormatter: formatter.outputTransactionFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionReceipt',\r\n            call: 'eth_getTransactionReceipt',\r\n            params: 1,\r\n            inputFormatter: [null],\r\n            outputFormatter: formatter.outputTransactionReceiptFormatter\r\n        }),\r\n        new Method({\r\n            name: 'getTransactionCount',\r\n            call: 'eth_getTransactionCount',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'sendSignedTransaction',\r\n            call: 'eth_sendRawTransaction',\r\n            params: 1,\r\n            inputFormatter: [null]\r\n        }),\r\n        new Method({\r\n            name: 'signTransaction',\r\n            call: 'eth_signTransaction',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputTransactionFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'sendTransaction',\r\n            call: 'eth_sendTransaction',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputTransactionFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'sign',\r\n            call: 'eth_sign',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\r\n            transformPayload: function (payload) {\r\n                payload.params.reverse();\r\n                return payload;\r\n            }\r\n        }),\r\n        new Method({\r\n            name: 'call',\r\n            call: 'eth_call',\r\n            params: 2,\r\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\r\n        }),\r\n        new Method({\r\n            name: 'estimateGas',\r\n            call: 'eth_estimateGas',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputCallFormatter],\r\n            outputFormatter: utils.hexToNumber\r\n        }),\r\n        new Method({\r\n            name: 'submitWork',\r\n            call: 'eth_submitWork',\r\n            params: 3\r\n        }),\r\n        new Method({\r\n            name: 'getWork',\r\n            call: 'eth_getWork',\r\n            params: 0\r\n        }),\r\n        new Method({\r\n            name: 'getPastLogs',\r\n            call: 'eth_getLogs',\r\n            params: 1,\r\n            inputFormatter: [formatter.inputLogFormatter],\r\n            outputFormatter: formatter.outputLogFormatter\r\n        }),\r\n\r\n        // subscriptions\r\n        new Subscriptions({\r\n            name: 'subscribe',\r\n            type: 'eth',\r\n            subscriptions: {\r\n                'newBlockHeaders': {\r\n                    // TODO rename on RPC side?\r\n                    subscriptionName: 'newHeads', // replace subscription with this name\r\n                    params: 0,\r\n                    outputFormatter: formatter.outputBlockFormatter\r\n                },\r\n                'pendingTransactions': {\r\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\r\n                    params: 0\r\n                },\r\n                'logs': {\r\n                    params: 1,\r\n                    inputFormatter: [formatter.inputLogFormatter],\r\n                    outputFormatter: formatter.outputLogFormatter,\r\n                    // DUBLICATE, also in web3-eth-contract\r\n                    subscriptionHandler: function (output) {\r\n                        if(output.removed) {\r\n                            this.emit('changed', output);\r\n                        } else {\r\n                            this.emit('data', output);\r\n                        }\r\n\r\n                        if (_.isFunction(this.callback)) {\r\n                            this.callback(null, output, this);\r\n                        }\r\n                    }\r\n                },\r\n                'syncing': {\r\n                    params: 0,\r\n                    outputFormatter: formatter.outputSyncingFormatter,\r\n                    subscriptionHandler: function (output) {\r\n                        var _this = this;\r\n\r\n                        // fire TRUE at start\r\n                        if(this._isSyncing !== true) {\r\n                            this._isSyncing = true;\r\n                            this.emit('changed', _this._isSyncing);\r\n\r\n                            if (_.isFunction(this.callback)) {\r\n                                this.callback(null, _this._isSyncing, this);\r\n                            }\r\n\r\n                            setTimeout(function () {\r\n                                _this.emit('data', output);\r\n\r\n                                if (_.isFunction(_this.callback)) {\r\n                                    _this.callback(null, output, _this);\r\n                                }\r\n                            }, 0);\r\n\r\n                            // fire sync status\r\n                        } else {\r\n                            this.emit('data', output);\r\n                            if (_.isFunction(_this.callback)) {\r\n                                this.callback(null, output, this);\r\n                            }\r\n\r\n                            // wait for some time before fireing the FALSE\r\n                            clearTimeout(this._isSyncingTimeout);\r\n                            this._isSyncingTimeout = setTimeout(function () {\r\n                                if(output.currentBlock > output.highestBlock - 200) {\r\n                                    _this._isSyncing = false;\r\n                                    _this.emit('changed', _this._isSyncing);\r\n\r\n                                    if (_.isFunction(_this.callback)) {\r\n                                        _this.callback(null, _this._isSyncing, _this);\r\n                                    }\r\n                                }\r\n                            }, 500);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    ];\r\n\r\n    methods.forEach(function(method) {\r\n        method.attachToObject(_this);\r\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\r\n        method.defaultBlock = _this.defaultBlock;\r\n        method.defaultAccount = _this.defaultAccount;\r\n    });\r\n\r\n};\r\n\r\ncore.addProviders(Eth);\r\n\r\n\r\nmodule.exports = Eth;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}