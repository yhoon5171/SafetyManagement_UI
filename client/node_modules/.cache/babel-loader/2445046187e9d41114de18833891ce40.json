{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar varint = require('./varint.js');\n\nvar digest = require('./hashes/digest.js');\n\nvar base58 = require('./bases/base58.js');\n\nvar base32 = require('./bases/base32.js');\n\nvar bytes = require('./bytes.js');\n\nvar CID = /*#__PURE__*/function (_Symbol$toStringTag, _Symbol$for) {\n  function CID(version, code, multihash, bytes) {\n    _classCallCheck(this, CID);\n\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n\n  _createClass(CID, [{\n    key: \"toV0\",\n    value: function toV0() {\n      switch (this.version) {\n        case 0:\n          {\n            return this;\n          }\n\n        default:\n          {\n            var code = this.code,\n                multihash = this.multihash;\n\n            if (code !== DAG_PB_CODE) {\n              throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n            }\n\n            if (multihash.code !== SHA_256_CODE) {\n              throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n            }\n\n            return CID.createV0(multihash);\n          }\n      }\n    }\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      switch (this.version) {\n        case 0:\n          {\n            var _this$multihash = this.multihash,\n                code = _this$multihash.code,\n                digest$1 = _this$multihash.digest;\n            var multihash = digest.create(code, digest$1);\n            return CID.createV1(this.code, multihash);\n          }\n\n        case 1:\n          {\n            return this;\n          }\n\n        default:\n          {\n            throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n          }\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      var bytes = this.bytes,\n          version = this.version,\n          _baseCache = this._baseCache;\n\n      switch (version) {\n        case 0:\n          return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n\n        default:\n          return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.code,\n        version: this.version,\n        hash: this.multihash.bytes\n      };\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'CID';\n    }\n  }, {\n    key: _Symbol$for,\n    value: function value() {\n      return 'CID(' + this.toString() + ')';\n    }\n  }, {\n    key: \"toBaseEncodedString\",\n    get: function get() {\n      throw new Error('Deprecated, use .toString()');\n    }\n  }, {\n    key: \"codec\",\n    get: function get() {\n      throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n    }\n  }, {\n    key: \"multibaseName\",\n    get: function get() {\n      throw new Error('\"multibaseName\" property is deprecated');\n    }\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      throw new Error('\"prefix\" property is deprecated');\n    }\n  }], [{\n    key: \"isCID\",\n    value: function isCID(value) {\n      deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n      return !!(value && (value[cidSymbol] || value.asCID === value));\n    }\n  }, {\n    key: \"asCID\",\n    value: function asCID(value) {\n      if (value instanceof CID) {\n        return value;\n      } else if (value != null && value.asCID === value) {\n        var _version = value.version,\n            code = value.code,\n            multihash = value.multihash,\n            _bytes = value.bytes;\n        return new CID(_version, code, multihash, _bytes || encodeCID(_version, code, multihash.bytes));\n      } else if (value != null && value[cidSymbol] === true) {\n        var _version2 = value.version,\n            _multihash = value.multihash,\n            _code = value.code;\n        var digest$1 = digest.decode(_multihash);\n        return CID.create(_version2, _code, digest$1);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"create\",\n    value: function create(version, code, digest) {\n      if (typeof code !== 'number') {\n        throw new Error('String codecs are no longer supported');\n      }\n\n      switch (version) {\n        case 0:\n          {\n            if (code !== DAG_PB_CODE) {\n              throw new Error(\"Version 0 CID must use dag-pb (code: \".concat(DAG_PB_CODE, \") block encoding\"));\n            } else {\n              return new CID(version, code, digest, digest.bytes);\n            }\n          }\n\n        case 1:\n          {\n            var _bytes2 = encodeCID(version, code, digest.bytes);\n\n            return new CID(version, code, digest, _bytes2);\n          }\n\n        default:\n          {\n            throw new Error('Invalid version');\n          }\n      }\n    }\n  }, {\n    key: \"createV0\",\n    value: function createV0(digest) {\n      return CID.create(0, DAG_PB_CODE, digest);\n    }\n  }, {\n    key: \"createV1\",\n    value: function createV1(code, digest) {\n      return CID.create(1, code, digest);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes) {\n      var _CID$decodeFirst = CID.decodeFirst(bytes),\n          _CID$decodeFirst2 = _slicedToArray(_CID$decodeFirst, 2),\n          cid = _CID$decodeFirst2[0],\n          remainder = _CID$decodeFirst2[1];\n\n      if (remainder.length) {\n        throw new Error('Incorrect length');\n      }\n\n      return cid;\n    }\n  }, {\n    key: \"decodeFirst\",\n    value: function decodeFirst(bytes$1) {\n      var specs = CID.inspectBytes(bytes$1);\n      var prefixSize = specs.size - specs.multihashSize;\n      var multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n\n      if (multihashBytes.byteLength !== specs.multihashSize) {\n        throw new Error('Incorrect length');\n      }\n\n      var digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n      var digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n      var cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n      return [cid, bytes$1.subarray(specs.size)];\n    }\n  }, {\n    key: \"inspectBytes\",\n    value: function inspectBytes(initialBytes) {\n      var offset = 0;\n\n      var next = function next() {\n        var _varint$decode = varint.decode(initialBytes.subarray(offset)),\n            _varint$decode2 = _slicedToArray(_varint$decode, 2),\n            i = _varint$decode2[0],\n            length = _varint$decode2[1];\n\n        offset += length;\n        return i;\n      };\n\n      var version = next();\n      var codec = DAG_PB_CODE;\n\n      if (version === 18) {\n        version = 0;\n        offset = 0;\n      } else if (version === 1) {\n        codec = next();\n      }\n\n      if (version !== 0 && version !== 1) {\n        throw new RangeError(\"Invalid CID version \".concat(version));\n      }\n\n      var prefixSize = offset;\n      var multihashCode = next();\n      var digestSize = next();\n      var size = offset + digestSize;\n      var multihashSize = size - prefixSize;\n      return {\n        version: version,\n        codec: codec,\n        multihashCode: multihashCode,\n        digestSize: digestSize,\n        multihashSize: multihashSize,\n        size: size\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(source, base) {\n      var _parseCIDtoBytes = parseCIDtoBytes(source, base),\n          _parseCIDtoBytes2 = _slicedToArray(_parseCIDtoBytes, 2),\n          prefix = _parseCIDtoBytes2[0],\n          bytes = _parseCIDtoBytes2[1];\n\n      var cid = CID.decode(bytes);\n\n      cid._baseCache.set(prefix, source);\n\n      return cid;\n    }\n  }]);\n\n  return CID;\n}(Symbol.toStringTag, Symbol.for('nodejs.util.inspect.custom'));\n\nvar parseCIDtoBytes = function parseCIDtoBytes(source, base) {\n  switch (source[0]) {\n    case 'Q':\n      {\n        var decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, decoder.decode(\"\".concat(base58.base58btc.prefix).concat(source))];\n      }\n\n    case base58.base58btc.prefix:\n      {\n        var _decoder = base || base58.base58btc;\n\n        return [base58.base58btc.prefix, _decoder.decode(source)];\n      }\n\n    case base32.base32.prefix:\n      {\n        var _decoder2 = base || base32.base32;\n\n        return [base32.base32.prefix, _decoder2.decode(source)];\n      }\n\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n\n        return [source[0], base.decode(source)];\n      }\n  }\n};\n\nvar toStringV0 = function toStringV0(bytes, cache, base) {\n  var prefix = base.prefix;\n\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(\"Cannot string encode V0 in \".concat(base.name, \" encoding\"));\n  }\n\n  var cid = cache.get(prefix);\n\n  if (cid == null) {\n    var _cid = base.encode(bytes).slice(1);\n\n    cache.set(prefix, _cid);\n    return _cid;\n  } else {\n    return cid;\n  }\n};\n\nvar toStringV1 = function toStringV1(bytes, cache, base) {\n  var prefix = base.prefix;\n  var cid = cache.get(prefix);\n\n  if (cid == null) {\n    var _cid2 = base.encode(bytes);\n\n    cache.set(prefix, _cid2);\n    return _cid2;\n  } else {\n    return cid;\n  }\n};\n\nvar DAG_PB_CODE = 112;\nvar SHA_256_CODE = 18;\n\nvar encodeCID = function encodeCID(version, code, multihash) {\n  var codeOffset = varint.encodingLength(version);\n  var hashOffset = codeOffset + varint.encodingLength(code);\n  var bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\n\nvar cidSymbol = Symbol.for('@ipld/js-cid/CID');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nvar hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nvar version = '0.0.0-dev';\n\nvar deprecate = function deprecate(range, message) {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\n\nvar IS_CID_DEPRECATION = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";\nexports.CID = CID;","map":{"version":3,"names":["Object","defineProperty","exports","value","varint","require","digest","base58","base32","bytes","CID","version","code","multihash","byteOffset","byteLength","asCID","_baseCache","Map","defineProperties","hidden","readonly","DAG_PB_CODE","Error","SHA_256_CODE","createV0","digest$1","create","createV1","other","equals","base","toStringV0","base58btc","encoder","toStringV1","hash","toString","deprecate","IS_CID_DEPRECATION","cidSymbol","encodeCID","decode","decodeFirst","cid","remainder","length","bytes$1","specs","inspectBytes","prefixSize","size","multihashSize","multihashBytes","coerce","subarray","digestBytes","digestSize","Digest","multihashCode","codec","initialBytes","offset","next","i","RangeError","source","parseCIDtoBytes","prefix","set","Symbol","toStringTag","for","decoder","cache","name","get","encode","slice","codeOffset","encodingLength","hashOffset","Uint8Array","encodeTo","writable","configurable","enumerable","range","message","test","console","warn"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/multiformats/cjs/src/cid.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar varint = require('./varint.js');\r\nvar digest = require('./hashes/digest.js');\r\nvar base58 = require('./bases/base58.js');\r\nvar base32 = require('./bases/base32.js');\r\nvar bytes = require('./bytes.js');\r\n\r\nclass CID {\r\n  constructor(version, code, multihash, bytes) {\r\n    this.code = code;\r\n    this.version = version;\r\n    this.multihash = multihash;\r\n    this.bytes = bytes;\r\n    this.byteOffset = bytes.byteOffset;\r\n    this.byteLength = bytes.byteLength;\r\n    this.asCID = this;\r\n    this._baseCache = new Map();\r\n    Object.defineProperties(this, {\r\n      byteOffset: hidden,\r\n      byteLength: hidden,\r\n      code: readonly,\r\n      version: readonly,\r\n      multihash: readonly,\r\n      bytes: readonly,\r\n      _baseCache: hidden,\r\n      asCID: hidden\r\n    });\r\n  }\r\n  toV0() {\r\n    switch (this.version) {\r\n    case 0: {\r\n        return this;\r\n      }\r\n    default: {\r\n        const {code, multihash} = this;\r\n        if (code !== DAG_PB_CODE) {\r\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\r\n        }\r\n        if (multihash.code !== SHA_256_CODE) {\r\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\r\n        }\r\n        return CID.createV0(multihash);\r\n      }\r\n    }\r\n  }\r\n  toV1() {\r\n    switch (this.version) {\r\n    case 0: {\r\n        const {code, digest: digest$1} = this.multihash;\r\n        const multihash = digest.create(code, digest$1);\r\n        return CID.createV1(this.code, multihash);\r\n      }\r\n    case 1: {\r\n        return this;\r\n      }\r\n    default: {\r\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\r\n      }\r\n    }\r\n  }\r\n  equals(other) {\r\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\r\n  }\r\n  toString(base) {\r\n    const {bytes, version, _baseCache} = this;\r\n    switch (version) {\r\n    case 0:\r\n      return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\r\n    default:\r\n      return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\r\n    }\r\n  }\r\n  toJSON() {\r\n    return {\r\n      code: this.code,\r\n      version: this.version,\r\n      hash: this.multihash.bytes\r\n    };\r\n  }\r\n  get [Symbol.toStringTag]() {\r\n    return 'CID';\r\n  }\r\n  [Symbol.for('nodejs.util.inspect.custom')]() {\r\n    return 'CID(' + this.toString() + ')';\r\n  }\r\n  static isCID(value) {\r\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\r\n    return !!(value && (value[cidSymbol] || value.asCID === value));\r\n  }\r\n  get toBaseEncodedString() {\r\n    throw new Error('Deprecated, use .toString()');\r\n  }\r\n  get codec() {\r\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\r\n  }\r\n  get buffer() {\r\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\r\n  }\r\n  get multibaseName() {\r\n    throw new Error('\"multibaseName\" property is deprecated');\r\n  }\r\n  get prefix() {\r\n    throw new Error('\"prefix\" property is deprecated');\r\n  }\r\n  static asCID(value) {\r\n    if (value instanceof CID) {\r\n      return value;\r\n    } else if (value != null && value.asCID === value) {\r\n      const {version, code, multihash, bytes} = value;\r\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\r\n    } else if (value != null && value[cidSymbol] === true) {\r\n      const {version, multihash, code} = value;\r\n      const digest$1 = digest.decode(multihash);\r\n      return CID.create(version, code, digest$1);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  static create(version, code, digest) {\r\n    if (typeof code !== 'number') {\r\n      throw new Error('String codecs are no longer supported');\r\n    }\r\n    switch (version) {\r\n    case 0: {\r\n        if (code !== DAG_PB_CODE) {\r\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\r\n        } else {\r\n          return new CID(version, code, digest, digest.bytes);\r\n        }\r\n      }\r\n    case 1: {\r\n        const bytes = encodeCID(version, code, digest.bytes);\r\n        return new CID(version, code, digest, bytes);\r\n      }\r\n    default: {\r\n        throw new Error('Invalid version');\r\n      }\r\n    }\r\n  }\r\n  static createV0(digest) {\r\n    return CID.create(0, DAG_PB_CODE, digest);\r\n  }\r\n  static createV1(code, digest) {\r\n    return CID.create(1, code, digest);\r\n  }\r\n  static decode(bytes) {\r\n    const [cid, remainder] = CID.decodeFirst(bytes);\r\n    if (remainder.length) {\r\n      throw new Error('Incorrect length');\r\n    }\r\n    return cid;\r\n  }\r\n  static decodeFirst(bytes$1) {\r\n    const specs = CID.inspectBytes(bytes$1);\r\n    const prefixSize = specs.size - specs.multihashSize;\r\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\r\n    if (multihashBytes.byteLength !== specs.multihashSize) {\r\n      throw new Error('Incorrect length');\r\n    }\r\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\r\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\r\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\r\n    return [\r\n      cid,\r\n      bytes$1.subarray(specs.size)\r\n    ];\r\n  }\r\n  static inspectBytes(initialBytes) {\r\n    let offset = 0;\r\n    const next = () => {\r\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\r\n      offset += length;\r\n      return i;\r\n    };\r\n    let version = next();\r\n    let codec = DAG_PB_CODE;\r\n    if (version === 18) {\r\n      version = 0;\r\n      offset = 0;\r\n    } else if (version === 1) {\r\n      codec = next();\r\n    }\r\n    if (version !== 0 && version !== 1) {\r\n      throw new RangeError(`Invalid CID version ${ version }`);\r\n    }\r\n    const prefixSize = offset;\r\n    const multihashCode = next();\r\n    const digestSize = next();\r\n    const size = offset + digestSize;\r\n    const multihashSize = size - prefixSize;\r\n    return {\r\n      version,\r\n      codec,\r\n      multihashCode,\r\n      digestSize,\r\n      multihashSize,\r\n      size\r\n    };\r\n  }\r\n  static parse(source, base) {\r\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\r\n    const cid = CID.decode(bytes);\r\n    cid._baseCache.set(prefix, source);\r\n    return cid;\r\n  }\r\n}\r\nconst parseCIDtoBytes = (source, base) => {\r\n  switch (source[0]) {\r\n  case 'Q': {\r\n      const decoder = base || base58.base58btc;\r\n      return [\r\n        base58.base58btc.prefix,\r\n        decoder.decode(`${ base58.base58btc.prefix }${ source }`)\r\n      ];\r\n    }\r\n  case base58.base58btc.prefix: {\r\n      const decoder = base || base58.base58btc;\r\n      return [\r\n        base58.base58btc.prefix,\r\n        decoder.decode(source)\r\n      ];\r\n    }\r\n  case base32.base32.prefix: {\r\n      const decoder = base || base32.base32;\r\n      return [\r\n        base32.base32.prefix,\r\n        decoder.decode(source)\r\n      ];\r\n    }\r\n  default: {\r\n      if (base == null) {\r\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\r\n      }\r\n      return [\r\n        source[0],\r\n        base.decode(source)\r\n      ];\r\n    }\r\n  }\r\n};\r\nconst toStringV0 = (bytes, cache, base) => {\r\n  const {prefix} = base;\r\n  if (prefix !== base58.base58btc.prefix) {\r\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\r\n  }\r\n  const cid = cache.get(prefix);\r\n  if (cid == null) {\r\n    const cid = base.encode(bytes).slice(1);\r\n    cache.set(prefix, cid);\r\n    return cid;\r\n  } else {\r\n    return cid;\r\n  }\r\n};\r\nconst toStringV1 = (bytes, cache, base) => {\r\n  const {prefix} = base;\r\n  const cid = cache.get(prefix);\r\n  if (cid == null) {\r\n    const cid = base.encode(bytes);\r\n    cache.set(prefix, cid);\r\n    return cid;\r\n  } else {\r\n    return cid;\r\n  }\r\n};\r\nconst DAG_PB_CODE = 112;\r\nconst SHA_256_CODE = 18;\r\nconst encodeCID = (version, code, multihash) => {\r\n  const codeOffset = varint.encodingLength(version);\r\n  const hashOffset = codeOffset + varint.encodingLength(code);\r\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\r\n  varint.encodeTo(version, bytes, 0);\r\n  varint.encodeTo(code, bytes, codeOffset);\r\n  bytes.set(multihash, hashOffset);\r\n  return bytes;\r\n};\r\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\r\nconst readonly = {\r\n  writable: false,\r\n  configurable: false,\r\n  enumerable: true\r\n};\r\nconst hidden = {\r\n  writable: false,\r\n  enumerable: false,\r\n  configurable: false\r\n};\r\nconst version = '0.0.0-dev';\r\nconst deprecate = (range, message) => {\r\n  if (range.test(version)) {\r\n    console.warn(message);\r\n  } else {\r\n    throw new Error(message);\r\n  }\r\n};\r\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\r\nFollowing code pattern:\r\n\r\nif (CID.isCID(value)) {\r\n  doSomethingWithCID(value)\r\n}\r\n\r\nIs replaced with:\r\n\r\nconst cid = CID.asCID(value)\r\nif (cid) {\r\n  // Make sure to use cid instead of value\r\n  doSomethingWithCID(cid)\r\n}\r\n`;\r\n\r\nexports.CID = CID;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}