{"ast":null,"code":"\"use strict\";\n\nimport { HashZero } from \"@ethersproject/constants\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\nexport function formatBytes32String(text) {\n  // Get the bytes\n  const bytes = toUtf8Bytes(text); // Check we have room for null-termination\n\n  if (bytes.length > 31) {\n    throw new Error(\"bytes32 string must be less than 32 bytes\");\n  } // Zero-pad (implicitly null-terminates)\n\n\n  return hexlify(concat([bytes, HashZero]).slice(0, 32));\n}\nexport function parseBytes32String(bytes) {\n  const data = arrayify(bytes); // Must be 32 bytes with a null-termination\n\n  if (data.length !== 32) {\n    throw new Error(\"invalid bytes32 - not 32 bytes long\");\n  }\n\n  if (data[31] !== 0) {\n    throw new Error(\"invalid bytes32 string - no null terminator\");\n  } // Find the null termination\n\n\n  let length = 31;\n\n  while (data[length - 1] === 0) {\n    length--;\n  } // Determine the string value\n\n\n  return toUtf8String(data.slice(0, length));\n}","map":{"version":3,"sources":["../src.ts/bytes32.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,QAAT,QAAyB,0BAAzB;AACA,SAAS,QAAT,EAA8B,MAA9B,EAAsC,OAAtC,QAAqD,sBAArD;AAEA,SAAS,WAAT,EAAsB,YAAtB,QAA0C,QAA1C;AAGA,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAA0C;EAE5C;EACA,MAAM,KAAK,GAAG,WAAW,CAAC,IAAD,CAAzB,CAH4C,CAK5C;;EACA,IAAI,KAAK,CAAC,MAAN,GAAe,EAAnB,EAAuB;IAAE,MAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;EAA+D,CAN5C,CAQ5C;;;EACA,OAAO,OAAO,CAAC,MAAM,CAAC,CAAE,KAAF,EAAS,QAAT,CAAD,CAAN,CAA4B,KAA5B,CAAkC,CAAlC,EAAqC,EAArC,CAAD,CAAd;AACH;AAED,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAA6C;EAC/C,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAD,CAArB,CAD+C,CAG/C;;EACA,IAAI,IAAI,CAAC,MAAL,KAAgB,EAApB,EAAwB;IAAE,MAAM,IAAI,KAAJ,CAAU,qCAAV,CAAN;EAAyD;;EACnF,IAAI,IAAI,CAAC,EAAD,CAAJ,KAAa,CAAjB,EAAoB;IAAE,MAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;EAAiE,CALxC,CAO/C;;;EACA,IAAI,MAAM,GAAG,EAAb;;EACA,OAAO,IAAI,CAAC,MAAM,GAAG,CAAV,CAAJ,KAAqB,CAA5B,EAA+B;IAAE,MAAM;EAAK,CATG,CAW/C;;;EACA,OAAO,YAAY,CAAC,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,MAAd,CAAD,CAAnB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { HashZero } from \"@ethersproject/constants\";\r\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\r\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\r\nexport function formatBytes32String(text) {\r\n    // Get the bytes\r\n    const bytes = toUtf8Bytes(text);\r\n    // Check we have room for null-termination\r\n    if (bytes.length > 31) {\r\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\r\n    }\r\n    // Zero-pad (implicitly null-terminates)\r\n    return hexlify(concat([bytes, HashZero]).slice(0, 32));\r\n}\r\nexport function parseBytes32String(bytes) {\r\n    const data = arrayify(bytes);\r\n    // Must be 32 bytes with a null-termination\r\n    if (data.length !== 32) {\r\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\r\n    }\r\n    if (data[31] !== 0) {\r\n        throw new Error(\"invalid bytes32 string - no null terminator\");\r\n    }\r\n    // Find the null termination\r\n    let length = 31;\r\n    while (data[length - 1] === 0) {\r\n        length--;\r\n    }\r\n    // Determine the string value\r\n    return toUtf8String(data.slice(0, length));\r\n}\r\n//# sourceMappingURL=bytes32.js.map"]},"metadata":{},"sourceType":"module"}