{"ast":null,"code":"import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n *\r\n * @param {Date|Number} argument - the value to convert\r\n * @returns {Date} the parsed date in the local time zone\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Clone the date:\r\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\r\n * //=> Tue Feb 11 2014 11:30:30\r\n *\r\n * @example\r\n * // Convert the timestamp to date:\r\n * const result = toDate(1392098430000)\r\n * //=> Tue Feb 11 2014 11:30:30\r\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","map":{"version":3,"names":["requiredArgs","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/date-fns/esm/toDate/index.js"],"sourcesContent":["import requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n *\r\n * @param {Date|Number} argument - the value to convert\r\n * @returns {Date} the parsed date in the local time zone\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Clone the date:\r\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\r\n * //=> Tue Feb 11 2014 11:30:30\r\n *\r\n * @example\r\n * // Convert the timestamp to date:\r\n * const result = toDate(1392098430000)\r\n * //=> Tue Feb 11 2014 11:30:30\r\n */\r\n\r\nexport default function toDate(argument) {\r\n  requiredArgs(1, arguments);\r\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\r\n\r\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\r\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\r\n    return new Date(argument.getTime());\r\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\r\n    return new Date(argument);\r\n  } else {\r\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\r\n\r\n      console.warn(new Error().stack);\r\n    }\r\n\r\n    return new Date(NaN);\r\n  }\r\n}"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;EACvCF,YAAY,CAAC,CAAD,EAAIG,SAAJ,CAAZ;EACA,IAAIC,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,QAA/B,CAAb,CAFuC,CAEgB;;EAEvD,IAAIA,QAAQ,YAAYO,IAApB,IAA4B,OAAOP,QAAP,KAAoB,QAApB,IAAgCE,MAAM,KAAK,eAA3E,EAA4F;IAC1F;IACA,OAAO,IAAIK,IAAJ,CAASP,QAAQ,CAACQ,OAAT,EAAT,CAAP;EACD,CAHD,MAGO,IAAI,OAAOR,QAAP,KAAoB,QAApB,IAAgCE,MAAM,KAAK,iBAA/C,EAAkE;IACvE,OAAO,IAAIK,IAAJ,CAASP,QAAT,CAAP;EACD,CAFM,MAEA;IACL,IAAI,CAAC,OAAOA,QAAP,KAAoB,QAApB,IAAgCE,MAAM,KAAK,iBAA5C,KAAkE,OAAOO,OAAP,KAAmB,WAAzF,EAAsG;MACpG;MACAA,OAAO,CAACC,IAAR,CAAa,oNAAb,EAFoG,CAEgI;;MAEpOD,OAAO,CAACC,IAAR,CAAa,IAAIC,KAAJ,GAAYC,KAAzB;IACD;;IAED,OAAO,IAAIL,IAAJ,CAASM,GAAT,CAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}