{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _wrapAsyncGenerator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar HTTP = require('../http');\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\n\n\nvar urlSource = function urlSource(url, options) {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  };\n};\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\n\n\nfunction readURLContent(_x, _x2) {\n  return _readURLContent.apply(this, arguments);\n}\n\nfunction _readURLContent() {\n  _readURLContent = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, options) {\n    var http, response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            http = new HTTP();\n            _context.next = 3;\n            return _awaitAsyncGenerator(http.get(url, options));\n\n          case 3:\n            response = _context.sent;\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(response.iterator()), _awaitAsyncGenerator), \"t0\", 5);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _readURLContent.apply(this, arguments);\n}\n\nmodule.exports = urlSource;","map":{"version":3,"names":["HTTP","require","urlSource","url","options","path","decodeURIComponent","URL","pathname","split","pop","content","readURLContent","http","get","response","iterator","module","exports"],"sources":["/home/ubuntu/SafetyManagement_UI/client/node_modules/ipfs-utils/src/files/url-source.js"],"sourcesContent":["'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMC,OAAN,EAAkB;EAClC,OAAO;IACLC,IAAI,EAAEC,kBAAkB,CAAC,IAAIC,GAAJ,CAAQJ,GAAR,EAAaK,QAAb,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiCC,GAAjC,MAA0C,EAA3C,CADnB;IAELC,OAAO,EAAEC,cAAc,CAACT,GAAD,EAAMC,OAAN;EAFlB,CAAP;AAID,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;SACiBQ,c;;;;;iFAAjB,iBAAiCT,GAAjC,EAAsCC,OAAtC;IAAA;IAAA;MAAA;QAAA;UAAA;YACQS,IADR,GACe,IAAIb,IAAJ,EADf;YAAA;YAAA,4BAEyBa,IAAI,CAACC,GAAL,CAASX,GAAT,EAAcC,OAAd,CAFzB;;UAAA;YAEQW,QAFR;YAIE,qEAAQA,QAAQ,CAACC,QAAT,EAAR;;UAJF;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAOAC,MAAM,CAACC,OAAP,GAAiBhB,SAAjB"},"metadata":{},"sourceType":"script"}