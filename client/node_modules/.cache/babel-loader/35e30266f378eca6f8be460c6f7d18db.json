{"ast":null,"code":"/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function (res, web3) {\n    if (!res || !res.error && !res.result) return;\n    const errorStringHash = '0x08c379a0';\n    const isObject = res && typeof res === 'object' && res.error && res.error.data;\n    const isString = res && typeof res === 'object' && typeof res.result === 'string';\n\n    if (isObject) {\n      const data = res.error.data;\n      const hash = Object.keys(data)[0];\n\n      if (data[hash].return && data[hash].return.includes(errorStringHash)) {\n        return web3.eth.abi.decodeParameter('string', data[hash].return.slice(10));\n      }\n    } else if (isString && res.result.includes(errorStringHash)) {\n      return web3.eth.abi.decodeParameter('string', res.result.slice(10));\n    }\n  },\n\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @return {String|Undefined}\n   */\n  get: function (params, web3) {\n    const packet = {\n      jsonrpc: '2.0',\n      method: 'eth_call',\n      params: [params, 'latest'],\n      id: new Date().getTime()\n    };\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3);\n\n        resolve(reasonString);\n      });\n    });\n  }\n};\nmodule.exports = reason;","map":{"version":3,"names":["reason","_extract","res","web3","error","result","errorStringHash","isObject","data","isString","hash","Object","keys","return","includes","eth","abi","decodeParameter","slice","get","params","packet","jsonrpc","method","id","Date","getTime","Promise","resolve","currentProvider","send","err","response","reasonString","module","exports"],"sources":["C:/Users/mcnl/Desktop/gong/test/SafetyManagement_UI/client/node_modules/truffle-contract/lib/reason.js"],"sourcesContent":["/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\n\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function(res, web3){\n    if (!res || (!res.error && !res.result)) return;\n\n    const errorStringHash = '0x08c379a0';\n\n    const isObject = res && typeof res === 'object' && res.error && res.error.data;\n    const isString = res && typeof res === 'object' && typeof res.result === 'string';\n\n    if (isObject) {\n      const data = res.error.data;\n      const hash = Object.keys(data)[0];\n\n      if (data[hash].return && data[hash].return.includes(errorStringHash)){\n        return web3.eth.abi.decodeParameter('string', data[hash].return.slice(10));\n      }\n\n    } else if (isString && res.result.includes(errorStringHash)){\n      return web3.eth.abi.decodeParameter('string', res.result.slice(10));\n    }\n  },\n\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @return {String|Undefined}\n   */\n  get: function(params, web3){\n    const packet = {\n      jsonrpc: '2.0',\n      method: 'eth_call',\n      params: [params, 'latest'],\n      id: new Date().getTime(),\n    };\n\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3);\n        resolve(reasonString);\n      });\n    });\n  },\n};\n\nmodule.exports = reason;\n"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,MAAM,GAAG;EACb;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,UAASC,GAAT,EAAcC,IAAd,EAAmB;IAC3B,IAAI,CAACD,GAAD,IAAS,CAACA,GAAG,CAACE,KAAL,IAAc,CAACF,GAAG,CAACG,MAAhC,EAAyC;IAEzC,MAAMC,eAAe,GAAG,YAAxB;IAEA,MAAMC,QAAQ,GAAGL,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkCA,GAAG,CAACE,KAAtC,IAA+CF,GAAG,CAACE,KAAJ,CAAUI,IAA1E;IACA,MAAMC,QAAQ,GAAGP,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkC,OAAOA,GAAG,CAACG,MAAX,KAAsB,QAAzE;;IAEA,IAAIE,QAAJ,EAAc;MACZ,MAAMC,IAAI,GAAGN,GAAG,CAACE,KAAJ,CAAUI,IAAvB;MACA,MAAME,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkB,CAAlB,CAAb;;MAEA,IAAIA,IAAI,CAACE,IAAD,CAAJ,CAAWG,MAAX,IAAqBL,IAAI,CAACE,IAAD,CAAJ,CAAWG,MAAX,CAAkBC,QAAlB,CAA2BR,eAA3B,CAAzB,EAAqE;QACnE,OAAOH,IAAI,CAACY,GAAL,CAASC,GAAT,CAAaC,eAAb,CAA6B,QAA7B,EAAuCT,IAAI,CAACE,IAAD,CAAJ,CAAWG,MAAX,CAAkBK,KAAlB,CAAwB,EAAxB,CAAvC,CAAP;MACD;IAEF,CARD,MAQO,IAAIT,QAAQ,IAAIP,GAAG,CAACG,MAAJ,CAAWS,QAAX,CAAoBR,eAApB,CAAhB,EAAqD;MAC1D,OAAOH,IAAI,CAACY,GAAL,CAASC,GAAT,CAAaC,eAAb,CAA6B,QAA7B,EAAuCf,GAAG,CAACG,MAAJ,CAAWa,KAAX,CAAiB,EAAjB,CAAvC,CAAP;IACD;EACF,CA1BY;;EA4Bb;AACF;AACA;AACA;AACA;EACEC,GAAG,EAAE,UAASC,MAAT,EAAiBjB,IAAjB,EAAsB;IACzB,MAAMkB,MAAM,GAAG;MACbC,OAAO,EAAE,KADI;MAEbC,MAAM,EAAE,UAFK;MAGbH,MAAM,EAAE,CAACA,MAAD,EAAS,QAAT,CAHK;MAIbI,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX;IAJS,CAAf;IAOA,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;MAC5BzB,IAAI,CAAC0B,eAAL,CAAqBC,IAArB,CAA0BT,MAA1B,EAAkC,CAACU,GAAD,EAAMC,QAAN,KAAmB;QACnD,MAAMC,YAAY,GAAGjC,MAAM,CAACC,QAAP,CAAgB+B,QAAhB,EAA0B7B,IAA1B,CAArB;;QACAyB,OAAO,CAACK,YAAD,CAAP;MACD,CAHD;IAID,CALM,CAAP;EAMD;AA/CY,CAAf;AAkDAC,MAAM,CAACC,OAAP,GAAiBnC,MAAjB"},"metadata":{},"sourceType":"script"}