{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n  constructor(size, signed, localName) {\n    const name = (signed ? \"int\" : \"uint\") + size * 8;\n    super(name, name, localName, false);\n    this.size = size;\n    this.signed = signed;\n  }\n\n  defaultValue() {\n    return 0;\n  }\n\n  encode(writer, value) {\n    let v = BigNumber.from(value); // Check bounds are safe for encoding\n\n    let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n\n    if (this.signed) {\n      let bounds = maxUintValue.mask(this.size * 8 - 1);\n\n      if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n        this._throwError(\"value out-of-bounds\", value);\n      }\n    } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n      this._throwError(\"value out-of-bounds\", value);\n    }\n\n    v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n    if (this.signed) {\n      v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n    }\n\n    return writer.writeValue(v);\n  }\n\n  decode(reader) {\n    let value = reader.readValue().mask(this.size * 8);\n\n    if (this.signed) {\n      value = value.fromTwos(this.size * 8);\n    }\n\n    return reader.coerce(this.name, value);\n  }\n\n}","map":{"version":3,"sources":["../../src.ts/coders/number.ts"],"names":[],"mappings":"AAAA;;AAEA,SAAS,SAAT,QAAwC,0BAAxC;AACA,SAAS,UAAT,EAAqB,WAArB,EAAkC,GAAlC,EAAuC,IAAvC,QAAmD,0BAAnD;AAEA,SAAS,KAAT,QAAsC,kBAAtC;AAEA,OAAM,MAAO,WAAP,SAA2B,KAA3B,CAAgC;EAIlC,WAAA,CAAY,IAAZ,EAA0B,MAA1B,EAA2C,SAA3C,EAA4D;IACxD,MAAM,IAAI,GAAI,CAAC,MAAM,GAAG,KAAH,GAAU,MAAjB,IAA4B,IAAI,GAAG,CAAjD;IACA,MAAM,IAAN,EAAY,IAAZ,EAAkB,SAAlB,EAA6B,KAA7B;IAEA,KAAK,IAAL,GAAY,IAAZ;IACA,KAAK,MAAL,GAAc,MAAd;EACH;;EAED,YAAY,GAAA;IACR,OAAO,CAAP;EACH;;EAED,MAAM,CAAC,MAAD,EAAiB,KAAjB,EAAoC;IACtC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAV,CAAe,KAAf,CAAR,CADsC,CAGtC;;IACA,IAAI,YAAY,GAAG,UAAU,CAAC,IAAX,CAAgB,MAAM,CAAC,QAAP,GAAkB,CAAlC,CAAnB;;IACA,IAAI,KAAK,MAAT,EAAiB;MACb,IAAI,MAAM,GAAG,YAAY,CAAC,IAAb,CAAkB,KAAK,IAAL,GAAY,CAAZ,GAAgB,CAAlC,CAAb;;MACA,IAAI,CAAC,CAAC,EAAF,CAAK,MAAL,KAAgB,CAAC,CAAC,EAAF,CAAK,MAAM,CAAC,GAAP,CAAW,GAAX,EAAgB,GAAhB,CAAoB,WAApB,CAAL,CAApB,EAA4D;QACxD,KAAK,WAAL,CAAiB,qBAAjB,EAAwC,KAAxC;MACH;IACJ,CALD,MAKO,IAAI,CAAC,CAAC,EAAF,CAAK,IAAL,KAAc,CAAC,CAAC,EAAF,CAAK,YAAY,CAAC,IAAb,CAAkB,KAAK,IAAL,GAAY,CAA9B,CAAL,CAAlB,EAA0D;MAC7D,KAAK,WAAL,CAAiB,qBAAjB,EAAwC,KAAxC;IACH;;IAED,CAAC,GAAG,CAAC,CAAC,MAAF,CAAS,KAAK,IAAL,GAAY,CAArB,EAAwB,IAAxB,CAA6B,KAAK,IAAL,GAAY,CAAzC,CAAJ;;IAEA,IAAI,KAAK,MAAT,EAAiB;MACb,CAAC,GAAG,CAAC,CAAC,QAAF,CAAW,KAAK,IAAL,GAAY,CAAvB,EAA0B,MAA1B,CAAiC,IAAI,MAAM,CAAC,QAA5C,CAAJ;IACH;;IAED,OAAO,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAP;EACH;;EAED,MAAM,CAAC,MAAD,EAAe;IACjB,IAAI,KAAK,GAAG,MAAM,CAAC,SAAP,GAAmB,IAAnB,CAAwB,KAAK,IAAL,GAAY,CAApC,CAAZ;;IAEA,IAAI,KAAK,MAAT,EAAiB;MACb,KAAK,GAAG,KAAK,CAAC,QAAN,CAAe,KAAK,IAAL,GAAY,CAA3B,CAAR;IACH;;IAED,OAAO,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,KAAzB,CAAP;EACH;;AA/CiC","sourceRoot":"","sourcesContent":["\"use strict\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\r\nimport { Coder } from \"./abstract-coder\";\r\nexport class NumberCoder extends Coder {\r\n    constructor(size, signed, localName) {\r\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\r\n        super(name, name, localName, false);\r\n        this.size = size;\r\n        this.signed = signed;\r\n    }\r\n    defaultValue() {\r\n        return 0;\r\n    }\r\n    encode(writer, value) {\r\n        let v = BigNumber.from(value);\r\n        // Check bounds are safe for encoding\r\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\r\n        if (this.signed) {\r\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\r\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\r\n                this._throwError(\"value out-of-bounds\", value);\r\n            }\r\n        }\r\n        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\r\n            this._throwError(\"value out-of-bounds\", value);\r\n        }\r\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\r\n        if (this.signed) {\r\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\r\n        }\r\n        return writer.writeValue(v);\r\n    }\r\n    decode(reader) {\r\n        let value = reader.readValue().mask(this.size * 8);\r\n        if (this.signed) {\r\n            value = value.fromTwos(this.size * 8);\r\n        }\r\n        return reader.coerce(this.name, value);\r\n    }\r\n}\r\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"module"}