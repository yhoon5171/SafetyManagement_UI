{"ast":null,"code":"'use strict';\n/**\n * Returns the first result from an (async) iterable, unless empty, in which\n * case returns `undefined`.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\n\nvar _regeneratorRuntime = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar first = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(source);\n\n          case 4:\n            _context.next = 6;\n            return _iterator.next();\n\n          case 6:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 12;\n              break;\n            }\n\n            entry = _step.value;\n            return _context.abrupt(\"return\", entry);\n\n          case 9:\n            _iteratorAbruptCompletion = false;\n            _context.next = 4;\n            break;\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 18:\n            _context.prev = 18;\n            _context.prev = 19;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 23;\n            return _iterator.return();\n\n          case 23:\n            _context.prev = 23;\n\n            if (!_didIteratorError) {\n              _context.next = 26;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 26:\n            return _context.finish(23);\n\n          case 27:\n            return _context.finish(18);\n\n          case 28:\n            return _context.abrupt(\"return\", undefined);\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n\n  return function first(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = first;","map":{"version":3,"names":["first","source","entry","undefined","module","exports"],"sources":["/home/ubuntu/SafetyManagement_UI/client/node_modules/it-first/index.js"],"sourcesContent":["'use strict'\n\n/**\n * Returns the first result from an (async) iterable, unless empty, in which\n * case returns `undefined`.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n */\nconst first = async (source) => {\n  for await (const entry of source) { // eslint-disable-line no-unreachable-loop\n    return entry\n  }\n\n  return undefined\n}\n\nmodule.exports = first\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA,IAAMA,KAAK;EAAA,sEAAG,iBAAOC,MAAP;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA;YAAA,2BACcA,MADd;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YACKC,KADL;YAAA,iCAEHA,KAFG;;UAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;YAAA,iCAKLC,SALK;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAALH,KAAK;IAAA;EAAA;AAAA,GAAX;;AAQAI,MAAM,CAACC,OAAP,GAAiBL,KAAjB"},"metadata":{},"sourceType":"script"}