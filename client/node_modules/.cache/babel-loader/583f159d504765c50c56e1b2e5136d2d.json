{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\n\nvar externals_1 = require(\"./externals\");\n\nvar internal_1 = require(\"./internal\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\r\n * Convert BN to 0x-prefixed hex string.\r\n */\n\n\nfunction bnToHex(value) {\n  return \"0x\".concat(value.toString(16));\n}\n\nexports.bnToHex = bnToHex;\n/**\r\n * Convert value from BN to an unpadded Buffer\r\n * (useful for RLP transport)\r\n * @param value value to convert\r\n */\n\nfunction bnToUnpaddedBuffer(value) {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));\n}\n\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\n/**\r\n * Deprecated alias for {@link bnToUnpaddedBuffer}\r\n * @deprecated\r\n */\n\nfunction bnToRlp(value) {\n  return bnToUnpaddedBuffer(value);\n}\n\nexports.bnToRlp = bnToRlp;\n/**\r\n * Type output options\r\n */\n\nvar TypeOutput;\n\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n  TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n\nfunction toType(input, outputType) {\n  if (input === null) {\n    return null;\n  }\n\n  if (input === undefined) {\n    return undefined;\n  }\n\n  if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {\n    throw new Error(\"A string must be provided with a 0x-prefix, given: \".concat(input));\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n\n  var output = (0, bytes_1.toBuffer)(input);\n\n  if (outputType === TypeOutput.Buffer) {\n    return output;\n  } else if (outputType === TypeOutput.BN) {\n    return new externals_1.BN(output);\n  } else if (outputType === TypeOutput.Number) {\n    var bn = new externals_1.BN(output);\n    var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());\n\n    if (bn.gt(max)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n    }\n\n    return bn.toNumber();\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return \"0x\".concat(output.toString('hex'));\n  }\n}\n\nexports.toType = toType;","map":{"version":3,"sources":["../src/types.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\r\nvar externals_1 = require(\"./externals\");\r\nvar internal_1 = require(\"./internal\");\r\nvar bytes_1 = require(\"./bytes\");\r\n/**\r\n * Convert BN to 0x-prefixed hex string.\r\n */\r\nfunction bnToHex(value) {\r\n    return \"0x\".concat(value.toString(16));\r\n}\r\nexports.bnToHex = bnToHex;\r\n/**\r\n * Convert value from BN to an unpadded Buffer\r\n * (useful for RLP transport)\r\n * @param value value to convert\r\n */\r\nfunction bnToUnpaddedBuffer(value) {\r\n    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\r\n    // for compatibility with browserify and similar tools\r\n    return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));\r\n}\r\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\r\n/**\r\n * Deprecated alias for {@link bnToUnpaddedBuffer}\r\n * @deprecated\r\n */\r\nfunction bnToRlp(value) {\r\n    return bnToUnpaddedBuffer(value);\r\n}\r\nexports.bnToRlp = bnToRlp;\r\n/**\r\n * Type output options\r\n */\r\nvar TypeOutput;\r\n(function (TypeOutput) {\r\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\r\n    TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\r\n    TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\r\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\r\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\r\nfunction toType(input, outputType) {\r\n    if (input === null) {\r\n        return null;\r\n    }\r\n    if (input === undefined) {\r\n        return undefined;\r\n    }\r\n    if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {\r\n        throw new Error(\"A string must be provided with a 0x-prefix, given: \".concat(input));\r\n    }\r\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\r\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\r\n    }\r\n    var output = (0, bytes_1.toBuffer)(input);\r\n    if (outputType === TypeOutput.Buffer) {\r\n        return output;\r\n    }\r\n    else if (outputType === TypeOutput.BN) {\r\n        return new externals_1.BN(output);\r\n    }\r\n    else if (outputType === TypeOutput.Number) {\r\n        var bn = new externals_1.BN(output);\r\n        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());\r\n        if (bn.gt(max)) {\r\n            throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\r\n        }\r\n        return bn.toNumber();\r\n    }\r\n    else {\r\n        // outputType === TypeOutput.PrefixedHexString\r\n        return \"0x\".concat(output.toString('hex'));\r\n    }\r\n}\r\nexports.toType = toType;\r\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}