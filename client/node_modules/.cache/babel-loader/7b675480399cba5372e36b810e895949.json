{"ast":null,"code":"import addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\r\n * @name subMilliseconds\r\n * @category Millisecond Helpers\r\n * @summary Subtract the specified number of milliseconds from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of milliseconds from the given date.\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the milliseconds subtracted\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\r\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\r\n * //=> Thu Jul 10 2014 12:45:29.250\r\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","map":{"version":3,"names":["addMilliseconds","requiredArgs","toInteger","subMilliseconds","dirtyDate","dirtyAmount","arguments","amount"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/date-fns/esm/subMilliseconds/index.js"],"sourcesContent":["import addMilliseconds from \"../addMilliseconds/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\nimport toInteger from \"../_lib/toInteger/index.js\";\r\n/**\r\n * @name subMilliseconds\r\n * @category Millisecond Helpers\r\n * @summary Subtract the specified number of milliseconds from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of milliseconds from the given date.\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the milliseconds subtracted\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\r\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\r\n * //=> Thu Jul 10 2014 12:45:29.250\r\n */\r\n\r\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\r\n  requiredArgs(2, arguments);\r\n  var amount = toInteger(dirtyAmount);\r\n  return addMilliseconds(dirtyDate, -amount);\r\n}"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,6BAA5B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,WAApC,EAAiD;EAC9DJ,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;EACA,IAAIC,MAAM,GAAGL,SAAS,CAACG,WAAD,CAAtB;EACA,OAAOL,eAAe,CAACI,SAAD,EAAY,CAACG,MAAb,CAAtB;AACD"},"metadata":{},"sourceType":"module"}