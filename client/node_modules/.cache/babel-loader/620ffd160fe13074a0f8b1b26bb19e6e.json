{"ast":null,"code":"'use strict';\n\nvar ip = require('./ip');\n\nvar protocols = require('./protocols-table');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('multiformats/bases/base32'),\n    base32 = _require2.base32;\n\nvar _require3 = require('multiformats/bases/base58'),\n    base58btc = _require3.base58btc;\n\nvar Digest = require('multiformats/hashes/digest');\n\nvar varint = require('varint');\n\nvar _require4 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require4.toString;\n\nvar _require5 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require5.fromString;\n\nvar _require6 = require('uint8arrays/concat'),\n    uint8ArrayConcat = _require6.concat;\n\nmodule.exports = Convert; // converts (serializes) addresses\n\n/**\r\n * @param {string} proto\r\n * @param {string | Uint8Array} a\r\n */\n\nfunction Convert(proto, a) {\n  if (a instanceof Uint8Array) {\n    return Convert.toString(proto, a);\n  } else {\n    return Convert.toBytes(proto, a);\n  }\n}\n/**\r\n * Convert [code,Uint8Array] to string\r\n *\r\n * @param {number|string} proto\r\n * @param {Uint8Array} buf\r\n * @returns {string}\r\n */\n\n\nConvert.toString = function convertToString(proto, buf) {\n  var protocol = protocols(proto);\n\n  switch (protocol.code) {\n    case 4: // ipv4\n\n    case 41:\n      // ipv6\n      return bytes2ip(buf);\n\n    case 6: // tcp\n\n    case 273: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return bytes2port(buf).toString();\n\n    case 53: // dns\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56: // dnsaddr\n\n    case 400: // unix\n\n    case 777:\n      // memory\n      return bytes2str(buf);\n\n    case 421:\n      // ipfs\n      return bytes2mh(buf);\n\n    case 444:\n      // onion\n      return bytes2onion(buf);\n\n    case 445:\n      // onion3\n      return bytes2onion(buf);\n\n    default:\n      return uint8ArrayToString(buf, 'base16');\n    // no clue. convert to hex\n  }\n};\n\nConvert.toBytes = function convertToBytes(\n/** @type {string | number } */\nproto,\n/** @type {string} */\nstr) {\n  var protocol = protocols(proto);\n\n  switch (protocol.code) {\n    case 4:\n      // ipv4\n      return ip2bytes(str);\n\n    case 41:\n      // ipv6\n      return ip2bytes(str);\n\n    case 6: // tcp\n\n    case 273: // udp\n\n    case 33: // dccp\n\n    case 132:\n      // sctp\n      return port2bytes(parseInt(str, 10));\n\n    case 53: // dns\n\n    case 54: // dns4\n\n    case 55: // dns6\n\n    case 56: // dnsaddr\n\n    case 400: // unix\n\n    case 777:\n      // memory\n      return str2bytes(str);\n\n    case 421:\n      // ipfs\n      return mh2bytes(str);\n\n    case 444:\n      // onion\n      return onion2bytes(str);\n\n    case 445:\n      // onion3\n      return onion32bytes(str);\n\n    default:\n      return uint8ArrayFromString(str, 'base16');\n    // no clue. convert from hex\n  }\n};\n/**\r\n * @param {string} ipString\r\n */\n\n\nfunction ip2bytes(ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n\n  return ip.toBytes(ipString);\n}\n/**\r\n * @param {Uint8Array} ipBuff\r\n */\n\n\nfunction bytes2ip(ipBuff) {\n  var ipString = ip.toString(ipBuff);\n\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n\n  return ipString;\n}\n/**\r\n * @param {number} port\r\n */\n\n\nfunction port2bytes(port) {\n  var buf = new ArrayBuffer(2);\n  var view = new DataView(buf);\n  view.setUint16(0, port);\n  return new Uint8Array(buf);\n}\n/**\r\n * @param {Uint8Array} buf\r\n */\n\n\nfunction bytes2port(buf) {\n  var view = new DataView(buf.buffer);\n  return view.getUint16(buf.byteOffset);\n}\n/**\r\n * @param {string} str\r\n */\n\n\nfunction str2bytes(str) {\n  var buf = uint8ArrayFromString(str);\n  var size = Uint8Array.from(varint.encode(buf.length));\n  return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\n/**\r\n * @param {Uint8Array} buf\r\n */\n\n\nfunction bytes2str(buf) {\n  var size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return uint8ArrayToString(buf);\n}\n/**\r\n * @param {string} hash - base58btc string\r\n */\n\n\nfunction mh2bytes(hash) {\n  var mh;\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(\"z\".concat(hash))).bytes;\n  } else {\n    mh = CID.parse(hash).multihash.bytes;\n  } // the address is a varint prefixed multihash string representation\n\n\n  var size = Uint8Array.from(varint.encode(mh.length));\n  return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\n/**\r\n * Converts bytes to bas58btc string\r\n *\r\n * @param {Uint8Array} buf\r\n * @returns {string} base58btc string\r\n */\n\n\nfunction bytes2mh(buf) {\n  var size = varint.decode(buf);\n  var address = buf.slice(varint.decode.bytes);\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n\n  return uint8ArrayToString(address, 'base58btc');\n}\n/**\r\n * @param {string} str\r\n */\n\n\nfunction onion2bytes(str) {\n  var addr = str.split(':');\n\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.');\n  } // onion addresses do not include the multibase prefix, add it before decoding\n\n\n  var buf = base32.decode('b' + addr[0]); // onion port number\n\n  var port = parseInt(addr[1], 10);\n\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n\n  var portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\n/**\r\n * @param {string} str\r\n */\n\n\nfunction onion32bytes(str) {\n  var addr = str.split(':');\n\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number');\n  }\n\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.');\n  } // onion addresses do not include the multibase prefix, add it before decoding\n\n\n  var buf = base32.decode('b' + addr[0]); // onion port number\n\n  var port = parseInt(addr[1], 10);\n\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n\n  var portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\n/**\r\n * @param {Uint8Array} buf\r\n */\n\n\nfunction bytes2onion(buf) {\n  var addrBytes = buf.slice(0, buf.length - 2);\n  var portBytes = buf.slice(buf.length - 2);\n  var addr = uint8ArrayToString(addrBytes, 'base32');\n  var port = bytes2port(portBytes);\n  return addr + ':' + port;\n}","map":{"version":3,"names":["ip","require","protocols","CID","base32","base58btc","Digest","varint","uint8ArrayToString","toString","uint8ArrayFromString","fromString","uint8ArrayConcat","concat","module","exports","Convert","proto","a","Uint8Array","toBytes","convertToString","buf","protocol","code","bytes2ip","bytes2port","bytes2str","bytes2mh","bytes2onion","convertToBytes","str","ip2bytes","port2bytes","parseInt","str2bytes","mh2bytes","onion2bytes","onion32bytes","ipString","isIP","Error","ipBuff","port","ArrayBuffer","view","DataView","setUint16","buffer","getUint16","byteOffset","size","from","encode","length","decode","slice","bytes","hash","mh","parse","multihash","address","addr","split","portBuf","addrBytes","portBytes"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/multiaddr/src/convert.js"],"sourcesContent":["'use strict'\r\n\r\nconst ip = require('./ip')\r\nconst protocols = require('./protocols-table')\r\nconst { CID } = require('multiformats/cid')\r\nconst { base32 } = require('multiformats/bases/base32')\r\nconst { base58btc } = require('multiformats/bases/base58')\r\nconst Digest = require('multiformats/hashes/digest')\r\nconst varint = require('varint')\r\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\r\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\r\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\r\n\r\nmodule.exports = Convert\r\n\r\n// converts (serializes) addresses\r\n/**\r\n * @param {string} proto\r\n * @param {string | Uint8Array} a\r\n */\r\nfunction Convert (proto, a) {\r\n  if (a instanceof Uint8Array) {\r\n    return Convert.toString(proto, a)\r\n  } else {\r\n    return Convert.toBytes(proto, a)\r\n  }\r\n}\r\n\r\n/**\r\n * Convert [code,Uint8Array] to string\r\n *\r\n * @param {number|string} proto\r\n * @param {Uint8Array} buf\r\n * @returns {string}\r\n */\r\nConvert.toString = function convertToString (proto, buf) {\r\n  const protocol = protocols(proto)\r\n  switch (protocol.code) {\r\n    case 4: // ipv4\r\n    case 41: // ipv6\r\n      return bytes2ip(buf)\r\n\r\n    case 6: // tcp\r\n    case 273: // udp\r\n    case 33: // dccp\r\n    case 132: // sctp\r\n      return bytes2port(buf).toString()\r\n\r\n    case 53: // dns\r\n    case 54: // dns4\r\n    case 55: // dns6\r\n    case 56: // dnsaddr\r\n    case 400: // unix\r\n    case 777: // memory\r\n      return bytes2str(buf)\r\n\r\n    case 421: // ipfs\r\n      return bytes2mh(buf)\r\n    case 444: // onion\r\n      return bytes2onion(buf)\r\n    case 445: // onion3\r\n      return bytes2onion(buf)\r\n    default:\r\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\r\n  }\r\n}\r\n\r\nConvert.toBytes = function convertToBytes (/** @type {string | number } */ proto, /** @type {string} */ str) {\r\n  const protocol = protocols(proto)\r\n  switch (protocol.code) {\r\n    case 4: // ipv4\r\n      return ip2bytes(str)\r\n    case 41: // ipv6\r\n      return ip2bytes(str)\r\n\r\n    case 6: // tcp\r\n    case 273: // udp\r\n    case 33: // dccp\r\n    case 132: // sctp\r\n      return port2bytes(parseInt(str, 10))\r\n\r\n    case 53: // dns\r\n    case 54: // dns4\r\n    case 55: // dns6\r\n    case 56: // dnsaddr\r\n    case 400: // unix\r\n    case 777: // memory\r\n      return str2bytes(str)\r\n\r\n    case 421: // ipfs\r\n      return mh2bytes(str)\r\n    case 444: // onion\r\n      return onion2bytes(str)\r\n    case 445: // onion3\r\n      return onion32bytes(str)\r\n    default:\r\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} ipString\r\n */\r\nfunction ip2bytes (ipString) {\r\n  if (!ip.isIP(ipString)) {\r\n    throw new Error('invalid ip address')\r\n  }\r\n  return ip.toBytes(ipString)\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} ipBuff\r\n */\r\nfunction bytes2ip (ipBuff) {\r\n  const ipString = ip.toString(ipBuff)\r\n  if (!ipString || !ip.isIP(ipString)) {\r\n    throw new Error('invalid ip address')\r\n  }\r\n  return ipString\r\n}\r\n\r\n/**\r\n * @param {number} port\r\n */\r\nfunction port2bytes (port) {\r\n  const buf = new ArrayBuffer(2)\r\n  const view = new DataView(buf)\r\n  view.setUint16(0, port)\r\n\r\n  return new Uint8Array(buf)\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} buf\r\n */\r\nfunction bytes2port (buf) {\r\n  const view = new DataView(buf.buffer)\r\n  return view.getUint16(buf.byteOffset)\r\n}\r\n\r\n/**\r\n * @param {string} str\r\n */\r\nfunction str2bytes (str) {\r\n  const buf = uint8ArrayFromString(str)\r\n  const size = Uint8Array.from(varint.encode(buf.length))\r\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} buf\r\n */\r\nfunction bytes2str (buf) {\r\n  const size = varint.decode(buf)\r\n  buf = buf.slice(varint.decode.bytes)\r\n\r\n  if (buf.length !== size) {\r\n    throw new Error('inconsistent lengths')\r\n  }\r\n\r\n  return uint8ArrayToString(buf)\r\n}\r\n\r\n/**\r\n * @param {string} hash - base58btc string\r\n */\r\nfunction mh2bytes (hash) {\r\n  let mh\r\n\r\n  if (hash[0] === 'Q' || hash[0] === '1') {\r\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\r\n  } else {\r\n    mh = CID.parse(hash).multihash.bytes\r\n  }\r\n\r\n  // the address is a varint prefixed multihash string representation\r\n  const size = Uint8Array.from(varint.encode(mh.length))\r\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\r\n}\r\n\r\n/**\r\n * Converts bytes to bas58btc string\r\n *\r\n * @param {Uint8Array} buf\r\n * @returns {string} base58btc string\r\n */\r\nfunction bytes2mh (buf) {\r\n  const size = varint.decode(buf)\r\n  const address = buf.slice(varint.decode.bytes)\r\n\r\n  if (address.length !== size) {\r\n    throw new Error('inconsistent lengths')\r\n  }\r\n\r\n  return uint8ArrayToString(address, 'base58btc')\r\n}\r\n\r\n/**\r\n * @param {string} str\r\n */\r\nfunction onion2bytes (str) {\r\n  const addr = str.split(':')\r\n  if (addr.length !== 2) {\r\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\r\n  }\r\n  if (addr[0].length !== 16) {\r\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\r\n  }\r\n\r\n  // onion addresses do not include the multibase prefix, add it before decoding\r\n  const buf = base32.decode('b' + addr[0])\r\n\r\n  // onion port number\r\n  const port = parseInt(addr[1], 10)\r\n  if (port < 1 || port > 65536) {\r\n    throw new Error('Port number is not in range(1, 65536)')\r\n  }\r\n  const portBuf = port2bytes(port)\r\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\r\n}\r\n\r\n/**\r\n * @param {string} str\r\n */\r\nfunction onion32bytes (str) {\r\n  const addr = str.split(':')\r\n  if (addr.length !== 2) {\r\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\r\n  }\r\n  if (addr[0].length !== 56) {\r\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\r\n  }\r\n  // onion addresses do not include the multibase prefix, add it before decoding\r\n  const buf = base32.decode('b' + addr[0])\r\n\r\n  // onion port number\r\n  const port = parseInt(addr[1], 10)\r\n  if (port < 1 || port > 65536) {\r\n    throw new Error('Port number is not in range(1, 65536)')\r\n  }\r\n  const portBuf = port2bytes(port)\r\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\r\n}\r\n\r\n/**\r\n * @param {Uint8Array} buf\r\n */\r\nfunction bytes2onion (buf) {\r\n  const addrBytes = buf.slice(0, buf.length - 2)\r\n  const portBytes = buf.slice(buf.length - 2)\r\n  const addr = uint8ArrayToString(addrBytes, 'base32')\r\n  const port = bytes2port(portBytes)\r\n  return addr + ':' + port\r\n}\r\n"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAzB;;AACA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQE,GAAR,YAAQA,GAAR;;AACA,gBAAmBF,OAAO,CAAC,2BAAD,CAA1B;AAAA,IAAQG,MAAR,aAAQA,MAAR;;AACA,gBAAsBH,OAAO,CAAC,2BAAD,CAA7B;AAAA,IAAQI,SAAR,aAAQA,SAAR;;AACA,IAAMC,MAAM,GAAGL,OAAO,CAAC,4BAAD,CAAtB;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,QAAD,CAAtB;;AACA,gBAAyCA,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBO,kBAAlB,aAAQC,QAAR;;AACA,gBAA6CR,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBS,oBAApB,aAAQC,UAAR;;AACA,gBAAqCV,OAAO,CAAC,oBAAD,CAA5C;AAAA,IAAgBW,gBAAhB,aAAQC,MAAR;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,OAAjB,C,CAEA;;AACA;AACA;AACA;AACA;;AACA,SAASA,OAAT,CAAkBC,KAAlB,EAAyBC,CAAzB,EAA4B;EAC1B,IAAIA,CAAC,YAAYC,UAAjB,EAA6B;IAC3B,OAAOH,OAAO,CAACP,QAAR,CAAiBQ,KAAjB,EAAwBC,CAAxB,CAAP;EACD,CAFD,MAEO;IACL,OAAOF,OAAO,CAACI,OAAR,CAAgBH,KAAhB,EAAuBC,CAAvB,CAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,OAAO,CAACP,QAAR,GAAmB,SAASY,eAAT,CAA0BJ,KAA1B,EAAiCK,GAAjC,EAAsC;EACvD,IAAMC,QAAQ,GAAGrB,SAAS,CAACe,KAAD,CAA1B;;EACA,QAAQM,QAAQ,CAACC,IAAjB;IACE,KAAK,CAAL,CADF,CACU;;IACR,KAAK,EAAL;MAAS;MACP,OAAOC,QAAQ,CAACH,GAAD,CAAf;;IAEF,KAAK,CAAL,CALF,CAKU;;IACR,KAAK,GAAL,CANF,CAMY;;IACV,KAAK,EAAL,CAPF,CAOW;;IACT,KAAK,GAAL;MAAU;MACR,OAAOI,UAAU,CAACJ,GAAD,CAAV,CAAgBb,QAAhB,EAAP;;IAEF,KAAK,EAAL,CAXF,CAWW;;IACT,KAAK,EAAL,CAZF,CAYW;;IACT,KAAK,EAAL,CAbF,CAaW;;IACT,KAAK,EAAL,CAdF,CAcW;;IACT,KAAK,GAAL,CAfF,CAeY;;IACV,KAAK,GAAL;MAAU;MACR,OAAOkB,SAAS,CAACL,GAAD,CAAhB;;IAEF,KAAK,GAAL;MAAU;MACR,OAAOM,QAAQ,CAACN,GAAD,CAAf;;IACF,KAAK,GAAL;MAAU;MACR,OAAOO,WAAW,CAACP,GAAD,CAAlB;;IACF,KAAK,GAAL;MAAU;MACR,OAAOO,WAAW,CAACP,GAAD,CAAlB;;IACF;MACE,OAAOd,kBAAkB,CAACc,GAAD,EAAM,QAAN,CAAzB;IAAyC;EA1B7C;AA4BD,CA9BD;;AAgCAN,OAAO,CAACI,OAAR,GAAkB,SAASU,cAAT;AAAyB;AAAgCb,KAAzD;AAAgE;AAAsBc,GAAtF,EAA2F;EAC3G,IAAMR,QAAQ,GAAGrB,SAAS,CAACe,KAAD,CAA1B;;EACA,QAAQM,QAAQ,CAACC,IAAjB;IACE,KAAK,CAAL;MAAQ;MACN,OAAOQ,QAAQ,CAACD,GAAD,CAAf;;IACF,KAAK,EAAL;MAAS;MACP,OAAOC,QAAQ,CAACD,GAAD,CAAf;;IAEF,KAAK,CAAL,CANF,CAMU;;IACR,KAAK,GAAL,CAPF,CAOY;;IACV,KAAK,EAAL,CARF,CAQW;;IACT,KAAK,GAAL;MAAU;MACR,OAAOE,UAAU,CAACC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAAT,CAAjB;;IAEF,KAAK,EAAL,CAZF,CAYW;;IACT,KAAK,EAAL,CAbF,CAaW;;IACT,KAAK,EAAL,CAdF,CAcW;;IACT,KAAK,EAAL,CAfF,CAeW;;IACT,KAAK,GAAL,CAhBF,CAgBY;;IACV,KAAK,GAAL;MAAU;MACR,OAAOI,SAAS,CAACJ,GAAD,CAAhB;;IAEF,KAAK,GAAL;MAAU;MACR,OAAOK,QAAQ,CAACL,GAAD,CAAf;;IACF,KAAK,GAAL;MAAU;MACR,OAAOM,WAAW,CAACN,GAAD,CAAlB;;IACF,KAAK,GAAL;MAAU;MACR,OAAOO,YAAY,CAACP,GAAD,CAAnB;;IACF;MACE,OAAOrB,oBAAoB,CAACqB,GAAD,EAAM,QAAN,CAA3B;IAA2C;EA3B/C;AA6BD,CA/BD;AAiCA;AACA;AACA;;;AACA,SAASC,QAAT,CAAmBO,QAAnB,EAA6B;EAC3B,IAAI,CAACvC,EAAE,CAACwC,IAAH,CAAQD,QAAR,CAAL,EAAwB;IACtB,MAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;EACD;;EACD,OAAOzC,EAAE,CAACoB,OAAH,CAAWmB,QAAX,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASd,QAAT,CAAmBiB,MAAnB,EAA2B;EACzB,IAAMH,QAAQ,GAAGvC,EAAE,CAACS,QAAH,CAAYiC,MAAZ,CAAjB;;EACA,IAAI,CAACH,QAAD,IAAa,CAACvC,EAAE,CAACwC,IAAH,CAAQD,QAAR,CAAlB,EAAqC;IACnC,MAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;EACD;;EACD,OAAOF,QAAP;AACD;AAED;AACA;AACA;;;AACA,SAASN,UAAT,CAAqBU,IAArB,EAA2B;EACzB,IAAMrB,GAAG,GAAG,IAAIsB,WAAJ,CAAgB,CAAhB,CAAZ;EACA,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaxB,GAAb,CAAb;EACAuB,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkBJ,IAAlB;EAEA,OAAO,IAAIxB,UAAJ,CAAeG,GAAf,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASI,UAAT,CAAqBJ,GAArB,EAA0B;EACxB,IAAMuB,IAAI,GAAG,IAAIC,QAAJ,CAAaxB,GAAG,CAAC0B,MAAjB,CAAb;EACA,OAAOH,IAAI,CAACI,SAAL,CAAe3B,GAAG,CAAC4B,UAAnB,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASf,SAAT,CAAoBJ,GAApB,EAAyB;EACvB,IAAMT,GAAG,GAAGZ,oBAAoB,CAACqB,GAAD,CAAhC;EACA,IAAMoB,IAAI,GAAGhC,UAAU,CAACiC,IAAX,CAAgB7C,MAAM,CAAC8C,MAAP,CAAc/B,GAAG,CAACgC,MAAlB,CAAhB,CAAb;EACA,OAAO1C,gBAAgB,CAAC,CAACuC,IAAD,EAAO7B,GAAP,CAAD,EAAc6B,IAAI,CAACG,MAAL,GAAchC,GAAG,CAACgC,MAAhC,CAAvB;AACD;AAED;AACA;AACA;;;AACA,SAAS3B,SAAT,CAAoBL,GAApB,EAAyB;EACvB,IAAM6B,IAAI,GAAG5C,MAAM,CAACgD,MAAP,CAAcjC,GAAd,CAAb;EACAA,GAAG,GAAGA,GAAG,CAACkC,KAAJ,CAAUjD,MAAM,CAACgD,MAAP,CAAcE,KAAxB,CAAN;;EAEA,IAAInC,GAAG,CAACgC,MAAJ,KAAeH,IAAnB,EAAyB;IACvB,MAAM,IAAIV,KAAJ,CAAU,sBAAV,CAAN;EACD;;EAED,OAAOjC,kBAAkB,CAACc,GAAD,CAAzB;AACD;AAED;AACA;AACA;;;AACA,SAASc,QAAT,CAAmBsB,IAAnB,EAAyB;EACvB,IAAIC,EAAJ;;EAEA,IAAID,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAnC,EAAwC;IACtCC,EAAE,GAAGrD,MAAM,CAACiD,MAAP,CAAclD,SAAS,CAACkD,MAAV,YAAqBG,IAArB,EAAd,EAA4CD,KAAjD;EACD,CAFD,MAEO;IACLE,EAAE,GAAGxD,GAAG,CAACyD,KAAJ,CAAUF,IAAV,EAAgBG,SAAhB,CAA0BJ,KAA/B;EACD,CAPsB,CASvB;;;EACA,IAAMN,IAAI,GAAGhC,UAAU,CAACiC,IAAX,CAAgB7C,MAAM,CAAC8C,MAAP,CAAcM,EAAE,CAACL,MAAjB,CAAhB,CAAb;EACA,OAAO1C,gBAAgB,CAAC,CAACuC,IAAD,EAAOQ,EAAP,CAAD,EAAaR,IAAI,CAACG,MAAL,GAAcK,EAAE,CAACL,MAA9B,CAAvB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS1B,QAAT,CAAmBN,GAAnB,EAAwB;EACtB,IAAM6B,IAAI,GAAG5C,MAAM,CAACgD,MAAP,CAAcjC,GAAd,CAAb;EACA,IAAMwC,OAAO,GAAGxC,GAAG,CAACkC,KAAJ,CAAUjD,MAAM,CAACgD,MAAP,CAAcE,KAAxB,CAAhB;;EAEA,IAAIK,OAAO,CAACR,MAAR,KAAmBH,IAAvB,EAA6B;IAC3B,MAAM,IAAIV,KAAJ,CAAU,sBAAV,CAAN;EACD;;EAED,OAAOjC,kBAAkB,CAACsD,OAAD,EAAU,WAAV,CAAzB;AACD;AAED;AACA;AACA;;;AACA,SAASzB,WAAT,CAAsBN,GAAtB,EAA2B;EACzB,IAAMgC,IAAI,GAAGhC,GAAG,CAACiC,KAAJ,CAAU,GAAV,CAAb;;EACA,IAAID,IAAI,CAACT,MAAL,KAAgB,CAApB,EAAuB;IACrB,MAAM,IAAIb,KAAJ,CAAU,iCAAiCsB,IAAjC,GAAwC,iCAAlD,CAAN;EACD;;EACD,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQT,MAAR,KAAmB,EAAvB,EAA2B;IACzB,MAAM,IAAIb,KAAJ,CAAU,iCAAiCsB,IAAI,CAAC,CAAD,CAArC,GAA2C,2BAArD,CAAN;EACD,CAPwB,CASzB;;;EACA,IAAMzC,GAAG,GAAGlB,MAAM,CAACmD,MAAP,CAAc,MAAMQ,IAAI,CAAC,CAAD,CAAxB,CAAZ,CAVyB,CAYzB;;EACA,IAAMpB,IAAI,GAAGT,QAAQ,CAAC6B,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAArB;;EACA,IAAIpB,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,KAAvB,EAA8B;IAC5B,MAAM,IAAIF,KAAJ,CAAU,uCAAV,CAAN;EACD;;EACD,IAAMwB,OAAO,GAAGhC,UAAU,CAACU,IAAD,CAA1B;EACA,OAAO/B,gBAAgB,CAAC,CAACU,GAAD,EAAM2C,OAAN,CAAD,EAAiB3C,GAAG,CAACgC,MAAJ,GAAaW,OAAO,CAACX,MAAtC,CAAvB;AACD;AAED;AACA;AACA;;;AACA,SAAShB,YAAT,CAAuBP,GAAvB,EAA4B;EAC1B,IAAMgC,IAAI,GAAGhC,GAAG,CAACiC,KAAJ,CAAU,GAAV,CAAb;;EACA,IAAID,IAAI,CAACT,MAAL,KAAgB,CAApB,EAAuB;IACrB,MAAM,IAAIb,KAAJ,CAAU,iCAAiCsB,IAAjC,GAAwC,iCAAlD,CAAN;EACD;;EACD,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQT,MAAR,KAAmB,EAAvB,EAA2B;IACzB,MAAM,IAAIb,KAAJ,CAAU,iCAAiCsB,IAAI,CAAC,CAAD,CAArC,GAA2C,4BAArD,CAAN;EACD,CAPyB,CAQ1B;;;EACA,IAAMzC,GAAG,GAAGlB,MAAM,CAACmD,MAAP,CAAc,MAAMQ,IAAI,CAAC,CAAD,CAAxB,CAAZ,CAT0B,CAW1B;;EACA,IAAMpB,IAAI,GAAGT,QAAQ,CAAC6B,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAArB;;EACA,IAAIpB,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,KAAvB,EAA8B;IAC5B,MAAM,IAAIF,KAAJ,CAAU,uCAAV,CAAN;EACD;;EACD,IAAMwB,OAAO,GAAGhC,UAAU,CAACU,IAAD,CAA1B;EACA,OAAO/B,gBAAgB,CAAC,CAACU,GAAD,EAAM2C,OAAN,CAAD,EAAiB3C,GAAG,CAACgC,MAAJ,GAAaW,OAAO,CAACX,MAAtC,CAAvB;AACD;AAED;AACA;AACA;;;AACA,SAASzB,WAAT,CAAsBP,GAAtB,EAA2B;EACzB,IAAM4C,SAAS,GAAG5C,GAAG,CAACkC,KAAJ,CAAU,CAAV,EAAalC,GAAG,CAACgC,MAAJ,GAAa,CAA1B,CAAlB;EACA,IAAMa,SAAS,GAAG7C,GAAG,CAACkC,KAAJ,CAAUlC,GAAG,CAACgC,MAAJ,GAAa,CAAvB,CAAlB;EACA,IAAMS,IAAI,GAAGvD,kBAAkB,CAAC0D,SAAD,EAAY,QAAZ,CAA/B;EACA,IAAMvB,IAAI,GAAGjB,UAAU,CAACyC,SAAD,CAAvB;EACA,OAAOJ,IAAI,GAAG,GAAP,GAAapB,IAApB;AACD"},"metadata":{},"sourceType":"script"}