{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Runner\\\\Desktop\\\\test1\\\\SafetyManagement_UI\\\\client\\\\src\\\\blockchain\\\\connection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\"; // import {FileUpload} from './components/FileUpload';\n\nimport TransactionContract from \"../contracts/Transaction.json\";\nimport Web3 from 'web3';\nimport moment from \"moment\";\nimport axios from 'axios'; // import Login from './login';\n// import Signup from './signup';\n\nimport App from '../App.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Connection() {\n  _s();\n\n  // const [fileUrl, setFileUrl] = useState(\"\");\n  // const [web3, setWeb3] = useState(\"\");\n  // const [account, setAccount] = useState(\"\");\n  // const [transactionInstance, setTransactionInstance] = useState(\"\");\n  // const [loading, setLoading] = useState(false);\n  // const [category, setCategory] = useState(\"\");\n  // const [name, setName] = useState(\"\");\n  // const [ipfsHash, setIpfsHash] = useState(\"\");\n  // const [registrant, setRegsitrant] = useState(\"\");\n  // const [responsibleManager, setResponsibleManager] = useState(\"\");\n  // const [fileType, setFileType] = useState(\"\");\n  // const [fileDescription, setFileDescription] = useState(\"\");\n  // const [transactionCnt, setTransactionCnt] = useState(\"\");\n  // const [time, setTime] = useState(\"\");\n  // const [ipfsHash_, setIpfsHash_] = useState(\"\");\n  // const [category_, setCategory_] = useState(\"\");\n  // const [name_, setName_] = useState(\"\");\n  // const [registrant_, setRegsitrant_] = useState(\"\");\n  // const [responsibleManager_, setResponsibleManager_] = useState(\"\");\n  // const [fileType_, setFileType_] = useState(\"\");\n  // const [fileDescription_, setFileDescription_] = useState(\"\");\n  // const submitReview = ()=>{\n  //   Axios.post('http://localhost:3001/api/insert', {\n  //     category: category,\n  //     name: name,\n  //     time: time,\n  //     ipfsHash: ipfsHash,\n  //     registrant: registrant,\n  //     responsible: responsibleManager,\n  //     filetype: fileType,\n  //     filedes: fileDescription\n  //   }).then(()=>{\n  //     alert('등록 완료!');\n  //   })\n  // };\n  const [web3, setWeb3] = useState(\"\");\n  const [account, setAccount] = useState(\"\");\n  const [transactionInstance, setTransactionInstance] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [block_list, setblock_list] = useState([]);\n  useEffect(() => {\n    async function componentWillMount(e) {\n      const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n      setWeb3(web3);\n      console.log(web3);\n\n      const contract = require(\"truffle-contract\");\n\n      const transaction = contract(TransactionContract);\n      console.log(web3);\n      transaction.setProvider(web3.currentProvider);\n      web3.eth.getAccounts((error, accounts) => {\n        if (!error) {\n          transaction.deployed().then(instance => {\n            setTransactionInstance(instance);\n            let temp = 0;\n            if (sessionStorage.getItem('company') == 'SDS') temp = 0;else if (sessionStorage.getItem('company') == 'KLL') temp = 1;else if (sessionStorage.getItem('company') == 'KOR') temp = 2;else if (sessionStorage.getItem('company') == 'LOS') temp = 3;\n            setAccount(accounts[temp]);\n            setLoading(true);\n          });\n        }\n      });\n    }\n\n    componentWillMount();\n  }, []);\n  const nextId = useRef(1);\n  useEffect(() => {\n    async function updateAllTransactions(e) {\n      let events = await transactionInstance.getPastEvents('handleTransaction', {\n        fromBlock: 0,\n        toBlock: 'latest'\n      });\n\n      for (let i = 0; i < events.length; i += 1) {\n        var time_ = moment.unix(events[i].returnValues.time);\n        block_list.push({\n          id: nextId.current,\n          category: events[i].returnValues.category.toString(),\n          name: events[i].returnValues.name.toString(),\n          time: time_.toString(),\n          ipfsHash: events[i].returnValues.ipfs_hash.toString(),\n          registrant: events[i].returnValues.registrant.toString(),\n          responsible: events[i].returnValues.responsible_manager.toString(),\n          filetype: events[i].returnValues.file_type.toString(),\n          filedes: events[i].returnValues.file_description.toString()\n        });\n        nextId.current += 1;\n        console.log(events[i].returnValues);\n      }\n\n      console.log('events.length = ', events.length);\n      console.log(events);\n      console.log('block_list = ', block_list);\n      console.log(account);\n    }\n\n    if (loading == true) {\n      console.log(\"CCtv data: \");\n      axios.post('http://localhost:3001/sendCCTV', null, {\n        params: {}\n      }).then(async res => {\n        console.log(res);\n        let Registrant = \"Kim\";\n        let Responsible = \"Kim\";\n\n        for (let i = 0; i < res.data.length; i++) {\n          let Filename = \"Sector 1\";\n          Filename += res.data[i].time;\n          let Filedes = \"Sector 1\";\n          Filedes += res.data[i].time;\n          await transactionInstance.sendTrans(\"CCTV\", Filename, res.data[i].ipfs_hash, Regsitrant, Responsible, \"avi\", Filedes, {\n            from: account,\n            //value: e.web3.utils.toWei('10', \"ether\"),\n            gas: 1000000\n          });\n        }\n      }).catch();\n      updateAllTransactions();\n    }\n  }, [loading]); // const sendTransaction = async (e) => {\n  //   console.log(web3);\n  //   console.log(account);\n  //   console.log(transactionInstance);\n  //   await transactionInstance.sendTrans(category, name, ipfsHash, registrant, responsibleManager, fileType, fileDescription,{\n  //     from: account,\n  //     //value: e.web3.utils.toWei('10', \"ether\"),\n  //     gas: 1000000\n  //   })\n  //   let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock: 0, toBlock:'latest'});\n  //   console.log(events[events.length-1].transactionHash)\n  //   //this.updateAllTransactions();\n  //   submitReview();\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(App, {\n      block_list: block_list,\n      transactionInstance: transactionInstance,\n      account: account\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Connection, \"8xlPVEoyBiwLJbJVPKT1Pgk33dk=\");\n\n_c = Connection;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"names":["React","useEffect","useState","useRef","TransactionContract","Web3","moment","axios","App","Connection","web3","setWeb3","account","setAccount","transactionInstance","setTransactionInstance","loading","setLoading","block_list","setblock_list","componentWillMount","e","providers","HttpProvider","console","log","contract","require","transaction","setProvider","currentProvider","eth","getAccounts","error","accounts","deployed","then","instance","temp","sessionStorage","getItem","nextId","updateAllTransactions","events","getPastEvents","fromBlock","toBlock","i","length","time_","unix","returnValues","time","push","id","current","category","toString","name","ipfsHash","ipfs_hash","registrant","responsible","responsible_manager","filetype","file_type","filedes","file_description","post","params","res","Registrant","Responsible","data","Filename","Filedes","sendTrans","Regsitrant","from","gas","catch"],"sources":["C:/Users/Runner/Desktop/test1/SafetyManagement_UI/client/src/blockchain/connection.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n// import {FileUpload} from './components/FileUpload';\r\nimport TransactionContract from \"../contracts/Transaction.json\"\r\nimport Web3 from 'web3';\r\nimport moment from \"moment\";\r\nimport axios from 'axios';\r\n// import Login from './login';\r\n// import Signup from './signup';\r\nimport App from '../App.jsx';\r\n\r\n\r\n\r\nexport default function Connection() {\r\n  // const [fileUrl, setFileUrl] = useState(\"\");\r\n  // const [web3, setWeb3] = useState(\"\");\r\n  // const [account, setAccount] = useState(\"\");\r\n  // const [transactionInstance, setTransactionInstance] = useState(\"\");\r\n  // const [loading, setLoading] = useState(false);\r\n\r\n  // const [category, setCategory] = useState(\"\");\r\n  // const [name, setName] = useState(\"\");\r\n  // const [ipfsHash, setIpfsHash] = useState(\"\");\r\n  // const [registrant, setRegsitrant] = useState(\"\");\r\n  // const [responsibleManager, setResponsibleManager] = useState(\"\");\r\n  // const [fileType, setFileType] = useState(\"\");\r\n  // const [fileDescription, setFileDescription] = useState(\"\");\r\n  // const [transactionCnt, setTransactionCnt] = useState(\"\");\r\n\r\n  // const [time, setTime] = useState(\"\");\r\n  // const [ipfsHash_, setIpfsHash_] = useState(\"\");\r\n  // const [category_, setCategory_] = useState(\"\");\r\n  // const [name_, setName_] = useState(\"\");\r\n  // const [registrant_, setRegsitrant_] = useState(\"\");\r\n  // const [responsibleManager_, setResponsibleManager_] = useState(\"\");\r\n  // const [fileType_, setFileType_] = useState(\"\");\r\n  // const [fileDescription_, setFileDescription_] = useState(\"\");\r\n\r\n  // const submitReview = ()=>{\r\n  //   Axios.post('http://localhost:3001/api/insert', {\r\n  //     category: category,\r\n  //     name: name,\r\n  //     time: time,\r\n  //     ipfsHash: ipfsHash,\r\n  //     registrant: registrant,\r\n  //     responsible: responsibleManager,\r\n  //     filetype: fileType,\r\n  //     filedes: fileDescription\r\n  //   }).then(()=>{\r\n  //     alert('등록 완료!');\r\n  //   })\r\n  // };\r\n\r\n\r\n  const [web3, setWeb3] = useState(\"\");\r\n  const [account, setAccount] = useState(\"\");\r\n  const [transactionInstance, setTransactionInstance] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  const [block_list, setblock_list] = useState([]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    async function componentWillMount(e) {\r\n      const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n      setWeb3(web3);\r\n      console.log(web3)\r\n      const contract = require(\"truffle-contract\");\r\n      const transaction = contract(TransactionContract);\r\n      console.log(web3);\r\n      transaction.setProvider(web3.currentProvider);\r\n  \r\n      web3.eth.getAccounts((error, accounts) => {\r\n        if (!error){\r\n          transaction.deployed().then(instance => {\r\n            setTransactionInstance(instance);\r\n            let temp = 0;\r\n            if(sessionStorage.getItem('company') == 'SDS') temp = 0;\r\n            else if(sessionStorage.getItem('company') == 'KLL') temp = 1;\r\n            else if(sessionStorage.getItem('company') == 'KOR') temp = 2;\r\n            else if(sessionStorage.getItem('company') == 'LOS') temp = 3;\r\n            setAccount(accounts[temp]);\r\n            setLoading(true);\r\n          })\r\n        }\r\n      })\r\n      \r\n    }\r\n\r\n    componentWillMount();    \r\n\r\n  }, []);\r\n\r\n  const nextId = useRef(1);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    async function updateAllTransactions(e){\r\n      let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock:0, toBlock:'latest'});\r\n      \r\n\r\n\r\n      for(let i = 0; i < events.length; i += 1){\r\n        \r\n        var time_ = moment.unix(events[i].returnValues.time);\r\n        \r\n        block_list.push({\r\n          id: nextId.current,\r\n          category : events[i].returnValues.category.toString(),\r\n          name : events[i].returnValues.name.toString(),\r\n          time : time_.toString(), \r\n          ipfsHash : events[i].returnValues.ipfs_hash.toString(),\r\n          registrant : events[i].returnValues.registrant.toString(),\r\n          responsible : events[i].returnValues.responsible_manager.toString(),\r\n          filetype : events[i].returnValues.file_type.toString(),\r\n          filedes : events[i].returnValues.file_description.toString()\r\n        }\r\n        )\r\n        \r\n        nextId.current += 1;\r\n\r\n        console.log(events[i].returnValues);\r\n      }\r\n      console.log('events.length = ', events.length);\r\n      console.log(events);\r\n      console.log('block_list = ', block_list);\r\n      console.log(account);\r\n  \r\n    }\r\n\r\n    if (loading == true){\r\n      \r\n      console.log(\"CCtv data: \")\r\n\r\n      axios.post('http://localhost:3001/sendCCTV', null, {\r\n        params: {\r\n        }\r\n      })\r\n      .then(async res => {\r\n        console.log(res)\r\n\r\n        let Registrant = \"Kim\"\r\n        let Responsible = \"Kim\"\r\n\r\n\r\n        for(let i = 0; i < res.data.length; i++){\r\n          \r\n          \r\n          let Filename = \"Sector 1\"\r\n          Filename += res.data[i].time\r\n          let Filedes = \"Sector 1\"\r\n          Filedes += res.data[i].time\r\n\r\n          await transactionInstance.sendTrans(\"CCTV\", Filename, res.data[i].ipfs_hash, Regsitrant, Responsible, \"avi\", Filedes,{\r\n            from: account,\r\n            //value: e.web3.utils.toWei('10', \"ether\"),\r\n            gas: 1000000\r\n          })\r\n        }\r\n\r\n      })\r\n      .catch()\r\n\r\n\r\n\r\n      updateAllTransactions();\r\n    }\r\n\r\n}, [loading]);\r\n\r\n\r\n\r\n  // const sendTransaction = async (e) => {\r\n  //   console.log(web3);\r\n  //   console.log(account);\r\n  //   console.log(transactionInstance);\r\n  //   await transactionInstance.sendTrans(category, name, ipfsHash, registrant, responsibleManager, fileType, fileDescription,{\r\n  //     from: account,\r\n  //     //value: e.web3.utils.toWei('10', \"ether\"),\r\n  //     gas: 1000000\r\n  //   })\r\n    \r\n  //   let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock: 0, toBlock:'latest'});\r\n  //   console.log(events[events.length-1].transactionHash)\r\n  //   //this.updateAllTransactions();\r\n\r\n  //   submitReview();\r\n  // }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* <Login />\r\n      <Signup />\r\n      <input type=\"text\" placeholder=\"Type\" onChange = {(event) => setCategory(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Name\" onChange = {(event) => setName(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Registrant\" onChange = {(event) => setRegsitrant(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"Responsible Manager\" onChange = {(event) => setResponsibleManager(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"File Type\" onChange = {(event) => setFileType(event.target.value)}></input>\r\n      <br></br>\r\n      <input type=\"text\" placeholder=\"File Description\" onChange = {(event) => setFileDescription(event.target.value)}></input>\r\n      <br></br>\r\n      \r\n      <FileUpload setUrl={setFileUrl} setIpfs={setIpfsHash} />\r\n      FileUrl :{\" \"}\r\n      <a href={fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        {fileUrl}\r\n      </a>\r\n      <br></br>\r\n\r\n      <p>Your account: {account}</p>\r\n      <br></br>\r\n\r\n      <button onClick={sendTransaction}>\r\n        트랜잭션 추가\r\n      </button>\r\n      {/* <button onClick={updateAllTransactions}>\r\n        트랜잭션 보여주기\r\n      </button> *//*}\r\n      <br></br>\r\n\r\n      <p>all transactions:</p>\r\n      <br></br>\r\n      <p>Category: {category_}</p>\r\n      <p>File Name: {name_}</p>\r\n      <p>Time: {time}</p>\r\n      <p>IPFS Hash: {ipfsHash_}</p>\r\n      <p>Registrant: {registrant_}</p>\r\n      <p>Responsible Manager: {responsibleManager_}</p>\r\n      <p>File Type: {fileType_}</p>\r\n      <p>File Description: {fileDescription_}</p> */}\r\n      <App block_list={block_list} transactionInstance={transactionInstance} account={account}/>\r\n    </div>\r\n  )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}