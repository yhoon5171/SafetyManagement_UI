{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _createForOfIteratorHelper = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar LOAD_HASHER = function LOAD_HASHER(codeOrName) {\n  return Promise.reject(new Error(\"No hasher found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\n\nvar Multihashes = /*#__PURE__*/function () {\n  function Multihashes(options) {\n    _classCallCheck(this, Multihashes);\n\n    this._hashersByName = {};\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\n\n    var _iterator = _createForOfIteratorHelper(options.hashers),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var hasher = _step.value;\n        this.addHasher(hasher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  _createClass(Multihashes, [{\n    key: \"addHasher\",\n    value: function addHasher(hasher) {\n      if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(hasher.name, \"\\\"\"));\n      }\n\n      this._hashersByName[hasher.name] = hasher;\n      this._hashersByCode[hasher.code] = hasher;\n    }\n  }, {\n    key: \"removeHasher\",\n    value: function removeHasher(hasher) {\n      delete this._hashersByName[hasher.name];\n      delete this._hashersByCode[hasher.code];\n    }\n  }, {\n    key: \"getHasher\",\n    value: function () {\n      var _getHasher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(code) {\n        var table, hasher;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n\n                if (!table[code]) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", table[code]);\n\n              case 3:\n                _context.next = 5;\n                return this._loadHasher(code);\n\n              case 5:\n                hasher = _context.sent;\n\n                if (table[code] == null) {\n                  this.addHasher(hasher);\n                }\n\n                return _context.abrupt(\"return\", hasher);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getHasher(_x) {\n        return _getHasher.apply(this, arguments);\n      }\n\n      return getHasher;\n    }()\n  }, {\n    key: \"listHashers\",\n    value: function listHashers() {\n      return Object.values(this._hashersByName);\n    }\n  }]);\n\n  return Multihashes;\n}();\n\nexports.Multihashes = Multihashes;","map":{"version":3,"names":["Object","defineProperty","exports","value","LOAD_HASHER","codeOrName","Promise","reject","Error","Multihashes","options","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hashers","hasher","addHasher","name","code","table","values"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/ipfs-core-utils/cjs/src/multihashes.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nconst LOAD_HASHER = codeOrName => Promise.reject(new Error(`No hasher found for \"${ codeOrName }\"`));\r\nclass Multihashes {\r\n  constructor(options) {\r\n    this._hashersByName = {};\r\n    this._hashersByCode = {};\r\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\r\n    for (const hasher of options.hashers) {\r\n      this.addHasher(hasher);\r\n    }\r\n  }\r\n  addHasher(hasher) {\r\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\r\n      throw new Error(`Resolver already exists for codec \"${ hasher.name }\"`);\r\n    }\r\n    this._hashersByName[hasher.name] = hasher;\r\n    this._hashersByCode[hasher.code] = hasher;\r\n  }\r\n  removeHasher(hasher) {\r\n    delete this._hashersByName[hasher.name];\r\n    delete this._hashersByCode[hasher.code];\r\n  }\r\n  async getHasher(code) {\r\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\r\n    if (table[code]) {\r\n      return table[code];\r\n    }\r\n    const hasher = await this._loadHasher(code);\r\n    if (table[code] == null) {\r\n      this.addHasher(hasher);\r\n    }\r\n    return hasher;\r\n  }\r\n  listHashers() {\r\n    return Object.values(this._hashersByName);\r\n  }\r\n}\r\n\r\nexports.Multihashes = Multihashes;\r\n"],"mappings":"AAAA;;;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,UAAU;EAAA,OAAIC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,iCAAmCH,UAAnC,QAAf,CAAJ;AAAA,CAA9B;;IACMI,W;EACJ,qBAAYC,OAAZ,EAAqB;IAAA;;IACnB,KAAKC,cAAL,GAAsB,EAAtB;IACA,KAAKC,cAAL,GAAsB,EAAtB;IACA,KAAKC,WAAL,GAAmBH,OAAO,CAACI,UAAR,IAAsBV,WAAzC;;IAHmB,2CAIEM,OAAO,CAACK,OAJV;IAAA;;IAAA;MAInB,oDAAsC;QAAA,IAA3BC,MAA2B;QACpC,KAAKC,SAAL,CAAeD,MAAf;MACD;IANkB;MAAA;IAAA;MAAA;IAAA;EAOpB;;;;WACD,mBAAUA,MAAV,EAAkB;MAChB,IAAI,KAAKL,cAAL,CAAoBK,MAAM,CAACE,IAA3B,KAAoC,KAAKN,cAAL,CAAoBI,MAAM,CAACG,IAA3B,CAAxC,EAA0E;QACxE,MAAM,IAAIX,KAAJ,+CAAiDQ,MAAM,CAACE,IAAxD,QAAN;MACD;;MACD,KAAKP,cAAL,CAAoBK,MAAM,CAACE,IAA3B,IAAmCF,MAAnC;MACA,KAAKJ,cAAL,CAAoBI,MAAM,CAACG,IAA3B,IAAmCH,MAAnC;IACD;;;WACD,sBAAaA,MAAb,EAAqB;MACnB,OAAO,KAAKL,cAAL,CAAoBK,MAAM,CAACE,IAA3B,CAAP;MACA,OAAO,KAAKN,cAAL,CAAoBI,MAAM,CAACG,IAA3B,CAAP;IACD;;;;kFACD,iBAAgBA,IAAhB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQC,KADR,GACgB,OAAOD,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,cAAhC,GAAiD,KAAKC,cADtE;;gBAAA,KAEMQ,KAAK,CAACD,IAAD,CAFX;kBAAA;kBAAA;gBAAA;;gBAAA,iCAGWC,KAAK,CAACD,IAAD,CAHhB;;cAAA;gBAAA;gBAAA,OAKuB,KAAKN,WAAL,CAAiBM,IAAjB,CALvB;;cAAA;gBAKQH,MALR;;gBAME,IAAII,KAAK,CAACD,IAAD,CAAL,IAAe,IAAnB,EAAyB;kBACvB,KAAKF,SAAL,CAAeD,MAAf;gBACD;;gBARH,iCASSA,MATT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;WAWA,uBAAc;MACZ,OAAOhB,MAAM,CAACqB,MAAP,CAAc,KAAKV,cAAnB,CAAP;IACD;;;;;;AAGHT,OAAO,CAACO,WAAR,GAAsBA,WAAtB"},"metadata":{},"sourceType":"script"}