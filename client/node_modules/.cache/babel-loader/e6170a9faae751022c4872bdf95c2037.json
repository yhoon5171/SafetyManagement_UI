{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/** @file jsonrpc.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Aaron Kumavis <aaron@kumavis.me>\r\n * @date 2015\r\n */\n\"use strict\"; // Initialize Jsonrpc as a simple object with utility functions.\n\nvar Jsonrpc = {\n  messageId: 0\n};\n/**\r\n * Should be called to valid json create payload object\r\n *\r\n * @method toPayload\r\n * @param {Function} method of jsonrpc call, required\r\n * @param {Array} params, an array of method params, optional\r\n * @returns {Object} valid jsonrpc payload object\r\n */\n\nJsonrpc.toPayload = function (method, params) {\n  if (!method) {\n    throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n  } // advance message ID\n\n\n  Jsonrpc.messageId++;\n  return {\n    jsonrpc: '2.0',\n    id: Jsonrpc.messageId,\n    method: method,\n    params: params || []\n  };\n};\n/**\r\n * Should be called to check if jsonrpc response is valid\r\n *\r\n * @method isValidResponse\r\n * @param {Object}\r\n * @returns {Boolean} true if response is valid, otherwise false\r\n */\n\n\nJsonrpc.isValidResponse = function (response) {\n  return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n\n  function validateSingleMessage(message) {\n    return !!message && !message.error && message.jsonrpc === '2.0' && (typeof message.id === 'number' || typeof message.id === 'string') && message.result !== undefined; // only undefined is not valid json object\n  }\n};\n/**\r\n * Should be called to create batch payload object\r\n *\r\n * @method toBatchPayload\r\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\r\n * @returns {Array} batch payload\r\n */\n\n\nJsonrpc.toBatchPayload = function (messages) {\n  return messages.map(function (message) {\n    return Jsonrpc.toPayload(message.method, message.params);\n  });\n};\n\nmodule.exports = Jsonrpc;","map":{"version":3,"names":["Jsonrpc","messageId","toPayload","method","params","Error","JSON","stringify","jsonrpc","id","isValidResponse","response","Array","isArray","every","validateSingleMessage","message","error","result","undefined","toBatchPayload","messages","map","module","exports"],"sources":["C:/Users/Runner/Desktop/test1/SafetyManagement_UI/client/node_modules/truffle-interface-adapter/node_modules/web3-core-requestmanager/src/jsonrpc.js"],"sourcesContent":["/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/** @file jsonrpc.js\r\n * @authors:\r\n *   Fabian Vogelsteller <fabian@ethereum.org>\r\n *   Marek Kotewicz <marek@ethdev.com>\r\n *   Aaron Kumavis <aaron@kumavis.me>\r\n * @date 2015\r\n */\r\n\r\n\"use strict\";\r\n\r\n// Initialize Jsonrpc as a simple object with utility functions.\r\nvar Jsonrpc = {\r\n    messageId: 0\r\n};\r\n\r\n/**\r\n * Should be called to valid json create payload object\r\n *\r\n * @method toPayload\r\n * @param {Function} method of jsonrpc call, required\r\n * @param {Array} params, an array of method params, optional\r\n * @returns {Object} valid jsonrpc payload object\r\n */\r\nJsonrpc.toPayload = function (method, params) {\r\n    if (!method) {\r\n        throw new Error('JSONRPC method should be specified for params: \"'+ JSON.stringify(params) +'\"!');\r\n    }\r\n\r\n    // advance message ID\r\n    Jsonrpc.messageId++;\r\n\r\n    return {\r\n        jsonrpc: '2.0',\r\n        id: Jsonrpc.messageId,\r\n        method: method,\r\n        params: params || []\r\n    };\r\n};\r\n\r\n/**\r\n * Should be called to check if jsonrpc response is valid\r\n *\r\n * @method isValidResponse\r\n * @param {Object}\r\n * @returns {Boolean} true if response is valid, otherwise false\r\n */\r\nJsonrpc.isValidResponse = function (response) {\r\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\r\n\r\n    function validateSingleMessage(message){\r\n      return !!message &&\r\n        !message.error &&\r\n        message.jsonrpc === '2.0' &&\r\n        (typeof message.id === 'number' || typeof message.id === 'string') &&\r\n        message.result !== undefined; // only undefined is not valid json object\r\n    }\r\n};\r\n\r\n/**\r\n * Should be called to create batch payload object\r\n *\r\n * @method toBatchPayload\r\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\r\n * @returns {Array} batch payload\r\n */\r\nJsonrpc.toBatchPayload = function (messages) {\r\n    return messages.map(function (message) {\r\n        return Jsonrpc.toPayload(message.method, message.params);\r\n    });\r\n};\r\n\r\nmodule.exports = Jsonrpc;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;;AACA,IAAIA,OAAO,GAAG;EACVC,SAAS,EAAE;AADD,CAAd;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,OAAO,CAACE,SAAR,GAAoB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;EAC1C,IAAI,CAACD,MAAL,EAAa;IACT,MAAM,IAAIE,KAAJ,CAAU,qDAAoDC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAApD,GAA4E,IAAtF,CAAN;EACH,CAHyC,CAK1C;;;EACAJ,OAAO,CAACC,SAAR;EAEA,OAAO;IACHO,OAAO,EAAE,KADN;IAEHC,EAAE,EAAET,OAAO,CAACC,SAFT;IAGHE,MAAM,EAAEA,MAHL;IAIHC,MAAM,EAAEA,MAAM,IAAI;EAJf,CAAP;AAMH,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACU,eAAR,GAA0B,UAAUC,QAAV,EAAoB;EAC1C,OAAOC,KAAK,CAACC,OAAN,CAAcF,QAAd,IAA0BA,QAAQ,CAACG,KAAT,CAAeC,qBAAf,CAA1B,GAAkEA,qBAAqB,CAACJ,QAAD,CAA9F;;EAEA,SAASI,qBAAT,CAA+BC,OAA/B,EAAuC;IACrC,OAAO,CAAC,CAACA,OAAF,IACL,CAACA,OAAO,CAACC,KADJ,IAELD,OAAO,CAACR,OAAR,KAAoB,KAFf,KAGJ,OAAOQ,OAAO,CAACP,EAAf,KAAsB,QAAtB,IAAkC,OAAOO,OAAO,CAACP,EAAf,KAAsB,QAHpD,KAILO,OAAO,CAACE,MAAR,KAAmBC,SAJrB,CADqC,CAKL;EACjC;AACJ,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,OAAO,CAACoB,cAAR,GAAyB,UAAUC,QAAV,EAAoB;EACzC,OAAOA,QAAQ,CAACC,GAAT,CAAa,UAAUN,OAAV,EAAmB;IACnC,OAAOhB,OAAO,CAACE,SAAR,CAAkBc,OAAO,CAACb,MAA1B,EAAkCa,OAAO,CAACZ,MAA1C,CAAP;EACH,CAFM,CAAP;AAGH,CAJD;;AAMAmB,MAAM,CAACC,OAAP,GAAiBxB,OAAjB"},"metadata":{},"sourceType":"script"}