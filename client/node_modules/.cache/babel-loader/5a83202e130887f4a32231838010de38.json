{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('../lib/configure.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nconst createPut = (codecs, options) => {\n  const fn = configure.configure(api => {\n    const put = async function (dagNode) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n\n      const controller = new AbortController();\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\n        ...(await multipartRequest.multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return cid.CID.parse(data.Cid['/']);\n    };\n\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;","map":{"version":3,"names":["Object","defineProperty","exports","value","cid","require","configure","multipartRequest","toUrlSearchParams","abortSignal","createPut","codecs","options","fn","api","put","dagNode","settings","storeCodec","hashAlg","serialized","inputCodec","Uint8Array","Error","getCodec","encode","controller","AbortController","signal","res","post","timeout","searchParams","headers","data","json","CID","parse","Cid"],"sources":["C:/Users/mcnl/Desktop/gong/test/SafetyManagement_UI/client/node_modules/ipfs-http-client/cjs/src/dag/put.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar configure = require('../lib/configure.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar abortSignal = require('../lib/abort-signal.js');\n\nconst createPut = (codecs, options) => {\n  const fn = configure.configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n      const controller = new AbortController();\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\n        ...await multipartRequest.multipartRequest([serialized], controller, settings.headers)\n      });\n      const data = await res.json();\n      return cid.CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,mCAAD,CAA9B;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAAzB;;AAEA,MAAMK,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;EACrC,MAAMC,EAAE,GAAGP,SAAS,CAACA,SAAV,CAAoBQ,GAAG,IAAI;IACpC,MAAMC,GAAG,GAAG,gBAAOC,OAAP,EAAiC;MAAA,IAAjBJ,OAAiB,uEAAP,EAAO;MAC3C,MAAMK,QAAQ,GAAG;QACfC,UAAU,EAAE,UADG;QAEfC,OAAO,EAAE,UAFM;QAGf,GAAGP;MAHY,CAAjB;MAKA,IAAIQ,UAAJ;;MACA,IAAIH,QAAQ,CAACI,UAAb,EAAyB;QACvB,IAAI,EAAEL,OAAO,YAAYM,UAArB,CAAJ,EAAsC;UACpC,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;QACD;;QACDH,UAAU,GAAGJ,OAAb;MACD,CALD,MAKO;QACL,MAAME,UAAU,GAAG,MAAMP,MAAM,CAACa,QAAP,CAAgBP,QAAQ,CAACC,UAAzB,CAAzB;QACAE,UAAU,GAAGF,UAAU,CAACO,MAAX,CAAkBT,OAAlB,CAAb;QACAC,QAAQ,CAACI,UAAT,GAAsBJ,QAAQ,CAACC,UAA/B;MACD;;MACD,MAAMQ,UAAU,GAAG,IAAIC,eAAJ,EAAnB;MACA,MAAMC,MAAM,GAAGnB,WAAW,CAACA,WAAZ,CAAwBiB,UAAU,CAACE,MAAnC,EAA2CX,QAAQ,CAACW,MAApD,CAAf;MACA,MAAMC,GAAG,GAAG,MAAMf,GAAG,CAACgB,IAAJ,CAAS,SAAT,EAAoB;QACpCC,OAAO,EAAEd,QAAQ,CAACc,OADkB;QAEpCH,MAFoC;QAGpCI,YAAY,EAAExB,iBAAiB,CAACA,iBAAlB,CAAoCS,QAApC,CAHsB;QAIpC,IAAG,MAAMV,gBAAgB,CAACA,gBAAjB,CAAkC,CAACa,UAAD,CAAlC,EAAgDM,UAAhD,EAA4DT,QAAQ,CAACgB,OAArE,CAAT;MAJoC,CAApB,CAAlB;MAMA,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;MACA,OAAO/B,GAAG,CAACgC,GAAJ,CAAQC,KAAR,CAAcH,IAAI,CAACI,GAAL,CAAS,GAAT,CAAd,CAAP;IACD,CA3BD;;IA4BA,OAAOvB,GAAP;EACD,CA9BU,CAAX;EA+BA,OAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CAjCD;;AAmCAV,OAAO,CAACQ,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}