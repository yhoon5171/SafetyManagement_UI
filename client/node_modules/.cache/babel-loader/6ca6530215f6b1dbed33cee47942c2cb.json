{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file iban.js\r\n *\r\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\r\n *\r\n * @author Marek Kotewicz <marek@parity.io>\r\n * @date 2015\r\n */\n\"use strict\";\n\nvar utils = require('web3-utils');\n\nvar BigNumber = require('bn.js');\n\nvar leftPad = function (string, bytes) {\n  var result = string;\n\n  while (result.length < bytes * 2) {\n    result = '0' + result;\n  }\n\n  return result;\n};\n/**\r\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\r\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\r\n *\r\n * @method iso13616Prepare\r\n * @param {String} iban the IBAN\r\n * @returns {String} the prepared IBAN\r\n */\n\n\nvar iso13616Prepare = function (iban) {\n  var A = 'A'.charCodeAt(0);\n  var Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    var code = n.charCodeAt(0);\n\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n};\n/**\r\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\r\n *\r\n * @method mod9710\r\n * @param {String} iban\r\n * @returns {Number}\r\n */\n\n\nvar mod9710 = function (iban) {\n  var remainder = iban,\n      block;\n\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n\n  return parseInt(remainder, 10) % 97;\n};\n/**\r\n * This prototype should be used to create iban object from iban correct string\r\n *\r\n * @param {String} iban\r\n */\n\n\nvar Iban = function Iban(iban) {\n  this._iban = iban;\n};\n/**\r\n * This method should be used to create an ethereum address from a direct iban address\r\n *\r\n * @method toAddress\r\n * @param {String} iban address\r\n * @return {String} the ethereum address\r\n */\n\n\nIban.toAddress = function (ib) {\n  ib = new Iban(ib);\n\n  if (!ib.isDirect()) {\n    throw new Error('IBAN is indirect and can\\'t be converted');\n  }\n\n  return ib.toAddress();\n};\n/**\r\n * This method should be used to create iban address from an ethereum address\r\n *\r\n * @method toIban\r\n * @param {String} address\r\n * @return {String} the IBAN address\r\n */\n\n\nIban.toIban = function (address) {\n  return Iban.fromAddress(address).toString();\n};\n/**\r\n * This method should be used to create iban object from an ethereum address\r\n *\r\n * @method fromAddress\r\n * @param {String} address\r\n * @return {Iban} the IBAN object\r\n */\n\n\nIban.fromAddress = function (address) {\n  if (!utils.isAddress(address)) {\n    throw new Error('Provided address is not a valid address: ' + address);\n  }\n\n  address = address.replace('0x', '').replace('0X', '');\n  var asBn = new BigNumber(address, 16);\n  var base36 = asBn.toString(36);\n  var padded = leftPad(base36, 15);\n  return Iban.fromBban(padded.toUpperCase());\n};\n/**\r\n * Convert the passed BBAN to an IBAN for this country specification.\r\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\r\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\r\n *\r\n * @method fromBban\r\n * @param {String} bban the BBAN to convert to IBAN\r\n * @returns {Iban} the IBAN object\r\n */\n\n\nIban.fromBban = function (bban) {\n  var countryCode = 'XE';\n  var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n  var checkDigit = ('0' + (98 - remainder)).slice(-2);\n  return new Iban(countryCode + checkDigit + bban);\n};\n/**\r\n * Should be used to create IBAN object for given institution and identifier\r\n *\r\n * @method createIndirect\r\n * @param {Object} options, required options are \"institution\" and \"identifier\"\r\n * @return {Iban} the IBAN object\r\n */\n\n\nIban.createIndirect = function (options) {\n  return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n/**\r\n * This method should be used to check if given string is valid iban object\r\n *\r\n * @method isValid\r\n * @param {String} iban string\r\n * @return {Boolean} true if it is valid IBAN\r\n */\n\n\nIban.isValid = function (iban) {\n  var i = new Iban(iban);\n  return i.isValid();\n};\n/**\r\n * Should be called to check if iban is correct\r\n *\r\n * @method isValid\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\n\n\nIban.prototype.isValid = function () {\n  return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n};\n/**\r\n * Should be called to check if iban number is direct\r\n *\r\n * @method isDirect\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\n\n\nIban.prototype.isDirect = function () {\n  return this._iban.length === 34 || this._iban.length === 35;\n};\n/**\r\n * Should be called to check if iban number if indirect\r\n *\r\n * @method isIndirect\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\n\n\nIban.prototype.isIndirect = function () {\n  return this._iban.length === 20;\n};\n/**\r\n * Should be called to get iban checksum\r\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\r\n *\r\n * @method checksum\r\n * @returns {String} checksum\r\n */\n\n\nIban.prototype.checksum = function () {\n  return this._iban.substr(2, 2);\n};\n/**\r\n * Should be called to get institution identifier\r\n * eg. XREG\r\n *\r\n * @method institution\r\n * @returns {String} institution identifier\r\n */\n\n\nIban.prototype.institution = function () {\n  return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n/**\r\n * Should be called to get client identifier within institution\r\n * eg. GAVOFYORK\r\n *\r\n * @method client\r\n * @returns {String} client identifier\r\n */\n\n\nIban.prototype.client = function () {\n  return this.isIndirect() ? this._iban.substr(11) : '';\n};\n/**\r\n * Should be called to get client direct address\r\n *\r\n * @method toAddress\r\n * @returns {String} ethereum address\r\n */\n\n\nIban.prototype.toAddress = function () {\n  if (this.isDirect()) {\n    var base36 = this._iban.substr(4);\n\n    var asBn = new BigNumber(base36, 36);\n    return utils.toChecksumAddress(asBn.toString(16, 20));\n  }\n\n  return '';\n};\n\nIban.prototype.toString = function () {\n  return this._iban;\n};\n\nmodule.exports = Iban;","map":{"version":3,"names":["utils","require","BigNumber","leftPad","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","substr","split","map","n","code","join","mod9710","remainder","block","slice","parseInt","Iban","_iban","toAddress","ib","isDirect","Error","toIban","address","fromAddress","toString","isAddress","replace","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","prototype","test","isIndirect","checksum","client","toChecksumAddress","module","exports"],"sources":["C:/Users/Runner/Desktop/test1/SafetyManagement_UI/client/node_modules/truffle-contract/node_modules/web3-eth-iban/src/index.js"],"sourcesContent":["/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/**\r\n * @file iban.js\r\n *\r\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\r\n *\r\n * @author Marek Kotewicz <marek@parity.io>\r\n * @date 2015\r\n */\r\n\r\n\"use strict\";\r\n\r\nvar utils = require('web3-utils');\r\nvar BigNumber = require('bn.js');\r\n\r\n\r\nvar leftPad = function (string, bytes) {\r\n    var result = string;\r\n    while (result.length < bytes * 2) {\r\n        result = '0' + result;\r\n    }\r\n    return result;\r\n};\r\n\r\n/**\r\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\r\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\r\n *\r\n * @method iso13616Prepare\r\n * @param {String} iban the IBAN\r\n * @returns {String} the prepared IBAN\r\n */\r\nvar iso13616Prepare = function (iban) {\r\n    var A = 'A'.charCodeAt(0);\r\n    var Z = 'Z'.charCodeAt(0);\r\n\r\n    iban = iban.toUpperCase();\r\n    iban = iban.substr(4) + iban.substr(0,4);\r\n\r\n    return iban.split('').map(function(n){\r\n        var code = n.charCodeAt(0);\r\n        if (code >= A && code <= Z){\r\n            // A = 10, B = 11, ... Z = 35\r\n            return code - A + 10;\r\n        } else {\r\n            return n;\r\n        }\r\n    }).join('');\r\n};\r\n\r\n/**\r\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\r\n *\r\n * @method mod9710\r\n * @param {String} iban\r\n * @returns {Number}\r\n */\r\nvar mod9710 = function (iban) {\r\n    var remainder = iban,\r\n        block;\r\n\r\n    while (remainder.length > 2){\r\n        block = remainder.slice(0, 9);\r\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\r\n    }\r\n\r\n    return parseInt(remainder, 10) % 97;\r\n};\r\n\r\n/**\r\n * This prototype should be used to create iban object from iban correct string\r\n *\r\n * @param {String} iban\r\n */\r\nvar Iban = function Iban(iban) {\r\n    this._iban = iban;\r\n};\r\n\r\n/**\r\n * This method should be used to create an ethereum address from a direct iban address\r\n *\r\n * @method toAddress\r\n * @param {String} iban address\r\n * @return {String} the ethereum address\r\n */\r\nIban.toAddress = function (ib) {\r\n    ib = new Iban(ib);\r\n\r\n    if(!ib.isDirect()) {\r\n        throw new Error('IBAN is indirect and can\\'t be converted');\r\n    }\r\n\r\n    return ib.toAddress();\r\n};\r\n\r\n/**\r\n * This method should be used to create iban address from an ethereum address\r\n *\r\n * @method toIban\r\n * @param {String} address\r\n * @return {String} the IBAN address\r\n */\r\nIban.toIban = function (address) {\r\n    return Iban.fromAddress(address).toString();\r\n};\r\n\r\n/**\r\n * This method should be used to create iban object from an ethereum address\r\n *\r\n * @method fromAddress\r\n * @param {String} address\r\n * @return {Iban} the IBAN object\r\n */\r\nIban.fromAddress = function (address) {\r\n    if(!utils.isAddress(address)){\r\n        throw new Error('Provided address is not a valid address: '+ address);\r\n    }\r\n\r\n    address = address.replace('0x','').replace('0X','');\r\n\r\n    var asBn = new BigNumber(address, 16);\r\n    var base36 = asBn.toString(36);\r\n    var padded = leftPad(base36, 15);\r\n    return Iban.fromBban(padded.toUpperCase());\r\n};\r\n\r\n/**\r\n * Convert the passed BBAN to an IBAN for this country specification.\r\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\r\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\r\n *\r\n * @method fromBban\r\n * @param {String} bban the BBAN to convert to IBAN\r\n * @returns {Iban} the IBAN object\r\n */\r\nIban.fromBban = function (bban) {\r\n    var countryCode = 'XE';\r\n\r\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\r\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\r\n\r\n    return new Iban(countryCode + checkDigit + bban);\r\n};\r\n\r\n/**\r\n * Should be used to create IBAN object for given institution and identifier\r\n *\r\n * @method createIndirect\r\n * @param {Object} options, required options are \"institution\" and \"identifier\"\r\n * @return {Iban} the IBAN object\r\n */\r\nIban.createIndirect = function (options) {\r\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\r\n};\r\n\r\n/**\r\n * This method should be used to check if given string is valid iban object\r\n *\r\n * @method isValid\r\n * @param {String} iban string\r\n * @return {Boolean} true if it is valid IBAN\r\n */\r\nIban.isValid = function (iban) {\r\n    var i = new Iban(iban);\r\n    return i.isValid();\r\n};\r\n\r\n/**\r\n * Should be called to check if iban is correct\r\n *\r\n * @method isValid\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\r\nIban.prototype.isValid = function () {\r\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\r\n        mod9710(iso13616Prepare(this._iban)) === 1;\r\n};\r\n\r\n/**\r\n * Should be called to check if iban number is direct\r\n *\r\n * @method isDirect\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\r\nIban.prototype.isDirect = function () {\r\n    return this._iban.length === 34 || this._iban.length === 35;\r\n};\r\n\r\n/**\r\n * Should be called to check if iban number if indirect\r\n *\r\n * @method isIndirect\r\n * @returns {Boolean} true if it is, otherwise false\r\n */\r\nIban.prototype.isIndirect = function () {\r\n    return this._iban.length === 20;\r\n};\r\n\r\n/**\r\n * Should be called to get iban checksum\r\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\r\n *\r\n * @method checksum\r\n * @returns {String} checksum\r\n */\r\nIban.prototype.checksum = function () {\r\n    return this._iban.substr(2, 2);\r\n};\r\n\r\n/**\r\n * Should be called to get institution identifier\r\n * eg. XREG\r\n *\r\n * @method institution\r\n * @returns {String} institution identifier\r\n */\r\nIban.prototype.institution = function () {\r\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\r\n};\r\n\r\n/**\r\n * Should be called to get client identifier within institution\r\n * eg. GAVOFYORK\r\n *\r\n * @method client\r\n * @returns {String} client identifier\r\n */\r\nIban.prototype.client = function () {\r\n    return this.isIndirect() ? this._iban.substr(11) : '';\r\n};\r\n\r\n/**\r\n * Should be called to get client direct address\r\n *\r\n * @method toAddress\r\n * @returns {String} ethereum address\r\n */\r\nIban.prototype.toAddress = function () {\r\n    if (this.isDirect()) {\r\n        var base36 = this._iban.substr(4);\r\n        var asBn = new BigNumber(base36, 36);\r\n        return utils.toChecksumAddress(asBn.toString(16, 20));\r\n    }\r\n\r\n    return '';\r\n};\r\n\r\nIban.prototype.toString = function () {\r\n    return this._iban;\r\n};\r\n\r\nmodule.exports = Iban;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}