{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n\nfunction fromSplit(split) {\n  const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split;\n  const jwe = {\n    ciphertext,\n    iv,\n    protected: protectedHeader,\n    tag\n  };\n  if (encrypted_key) jwe.recipients = [{\n    encrypted_key\n  }];\n  return jwe;\n}\n\nfunction encodeRecipient(recipient) {\n  const encRec = {};\n  if (recipient.encrypted_key) encRec.encrypted_key = utils_1.fromBase64url(recipient.encrypted_key);\n  if (recipient.header) encRec.header = recipient.header;\n  return encRec;\n}\n\nfunction encode(jwe) {\n  const encJwe = {\n    ciphertext: utils_1.fromBase64url(jwe.ciphertext),\n    protected: utils_1.fromBase64url(jwe.protected),\n    iv: utils_1.fromBase64url(jwe.iv),\n    tag: utils_1.fromBase64url(jwe.tag)\n  };\n  if (jwe.aad) encJwe.aad = utils_1.fromBase64url(jwe.aad);\n  if (jwe.recipients) encJwe.recipients = jwe.recipients.map(encodeRecipient);\n  if (jwe.unprotected) encJwe.unprotected = jwe.unprotected;\n  return encJwe;\n}\n\nfunction decodeRecipient(encoded) {\n  const recipient = {};\n  if (encoded.encrypted_key) recipient.encrypted_key = utils_1.toBase64url(encoded.encrypted_key);\n  if (encoded.header) recipient.header = encoded.header;\n  return recipient;\n}\n\nfunction decode(encoded) {\n  const jwe = {\n    ciphertext: utils_1.toBase64url(encoded.ciphertext),\n    protected: utils_1.toBase64url(encoded.protected),\n    iv: utils_1.toBase64url(encoded.iv),\n    tag: utils_1.toBase64url(encoded.tag)\n  };\n  if (encoded.aad) jwe.aad = utils_1.toBase64url(encoded.aad);\n  if (encoded.recipients) jwe.recipients = encoded.recipients.map(decodeRecipient);\n  if (encoded.unprotected) jwe.unprotected = encoded.unprotected;\n  return jwe;\n}\n\nexports.default = {\n  fromSplit,\n  decode,\n  encode\n};","map":{"version":3,"sources":["../src/encryption.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAgCA,SAAS,SAAT,CAAmB,KAAnB,EAAuC;EACrC,MAAM,CAAC,eAAD,EAAkB,aAAlB,EAAiC,EAAjC,EAAqC,UAArC,EAAiD,GAAjD,IAAwD,KAA9D;EACA,MAAM,GAAG,GAAW;IAClB,UADkB;IAElB,EAFkB;IAGlB,SAAS,EAAE,eAHO;IAIlB;EAJkB,CAApB;EAMA,IAAI,aAAJ,EAAmB,GAAG,CAAC,UAAJ,GAAiB,CAAC;IAAE;EAAF,CAAD,CAAjB;EACnB,OAAO,GAAP;AACD;;AAED,SAAS,eAAT,CAAyB,SAAzB,EAAgD;EAC9C,MAAM,MAAM,GAAqB,EAAjC;EACA,IAAI,SAAS,CAAC,aAAd,EAA6B,MAAM,CAAC,aAAP,GAAuB,OAAA,CAAA,aAAA,CAAc,SAAS,CAAC,aAAxB,CAAvB;EAC7B,IAAI,SAAS,CAAC,MAAd,EAAsB,MAAM,CAAC,MAAP,GAAgB,SAAS,CAAC,MAA1B;EACtB,OAAO,MAAP;AACD;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAA2B;EACzB,MAAM,MAAM,GAAe;IACzB,UAAU,EAAE,OAAA,CAAA,aAAA,CAAc,GAAG,CAAC,UAAlB,CADa;IAEzB,SAAS,EAAE,OAAA,CAAA,aAAA,CAAc,GAAG,CAAC,SAAlB,CAFc;IAGzB,EAAE,EAAE,OAAA,CAAA,aAAA,CAAc,GAAG,CAAC,EAAlB,CAHqB;IAIzB,GAAG,EAAE,OAAA,CAAA,aAAA,CAAc,GAAG,CAAC,GAAlB;EAJoB,CAA3B;EAMA,IAAI,GAAG,CAAC,GAAR,EAAa,MAAM,CAAC,GAAP,GAAa,OAAA,CAAA,aAAA,CAAc,GAAG,CAAC,GAAlB,CAAb;EACb,IAAI,GAAG,CAAC,UAAR,EAAoB,MAAM,CAAC,UAAP,GAAoB,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAmB,eAAnB,CAApB;EACpB,IAAI,GAAG,CAAC,WAAR,EAAqB,MAAM,CAAC,WAAP,GAAqB,GAAG,CAAC,WAAzB;EACrB,OAAO,MAAP;AACD;;AAED,SAAS,eAAT,CAAyB,OAAzB,EAAkD;EAChD,MAAM,SAAS,GAAiB,EAAhC;EACA,IAAI,OAAO,CAAC,aAAZ,EAA2B,SAAS,CAAC,aAAV,GAA0B,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,aAApB,CAA1B;EAC3B,IAAI,OAAO,CAAC,MAAZ,EAAoB,SAAS,CAAC,MAAV,GAAmB,OAAO,CAAC,MAA3B;EACpB,OAAO,SAAP;AACD;;AAED,SAAS,MAAT,CAAgB,OAAhB,EAAmC;EACjC,MAAM,GAAG,GAAW;IAClB,UAAU,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,UAApB,CADM;IAElB,SAAS,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,SAApB,CAFO;IAGlB,EAAE,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,EAApB,CAHc;IAIlB,GAAG,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,GAApB;EAJa,CAApB;EAMA,IAAI,OAAO,CAAC,GAAZ,EAAiB,GAAG,CAAC,GAAJ,GAAU,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,GAApB,CAAV;EACjB,IAAI,OAAO,CAAC,UAAZ,EAAwB,GAAG,CAAC,UAAJ,GAAiB,OAAO,CAAC,UAAR,CAAmB,GAAnB,CAAuB,eAAvB,CAAjB;EACxB,IAAI,OAAO,CAAC,WAAZ,EAAyB,GAAG,CAAC,WAAJ,GAAkB,OAAO,CAAC,WAA1B;EACzB,OAAO,GAAP;AACD;;AAED,OAAA,CAAA,OAAA,GAAe;EACb,SADa;EAEb,MAFa;EAGb;AAHa,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nfunction fromSplit(split) {\n    const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split;\n    const jwe = {\n        ciphertext,\n        iv,\n        protected: protectedHeader,\n        tag,\n    };\n    if (encrypted_key)\n        jwe.recipients = [{ encrypted_key }];\n    return jwe;\n}\nfunction encodeRecipient(recipient) {\n    const encRec = {};\n    if (recipient.encrypted_key)\n        encRec.encrypted_key = utils_1.fromBase64url(recipient.encrypted_key);\n    if (recipient.header)\n        encRec.header = recipient.header;\n    return encRec;\n}\nfunction encode(jwe) {\n    const encJwe = {\n        ciphertext: utils_1.fromBase64url(jwe.ciphertext),\n        protected: utils_1.fromBase64url(jwe.protected),\n        iv: utils_1.fromBase64url(jwe.iv),\n        tag: utils_1.fromBase64url(jwe.tag),\n    };\n    if (jwe.aad)\n        encJwe.aad = utils_1.fromBase64url(jwe.aad);\n    if (jwe.recipients)\n        encJwe.recipients = jwe.recipients.map(encodeRecipient);\n    if (jwe.unprotected)\n        encJwe.unprotected = jwe.unprotected;\n    return encJwe;\n}\nfunction decodeRecipient(encoded) {\n    const recipient = {};\n    if (encoded.encrypted_key)\n        recipient.encrypted_key = utils_1.toBase64url(encoded.encrypted_key);\n    if (encoded.header)\n        recipient.header = encoded.header;\n    return recipient;\n}\nfunction decode(encoded) {\n    const jwe = {\n        ciphertext: utils_1.toBase64url(encoded.ciphertext),\n        protected: utils_1.toBase64url(encoded.protected),\n        iv: utils_1.toBase64url(encoded.iv),\n        tag: utils_1.toBase64url(encoded.tag),\n    };\n    if (encoded.aad)\n        jwe.aad = utils_1.toBase64url(encoded.aad);\n    if (encoded.recipients)\n        jwe.recipients = encoded.recipients.map(decodeRecipient);\n    if (encoded.unprotected)\n        jwe.unprotected = encoded.unprotected;\n    return jwe;\n}\nexports.default = {\n    fromSplit,\n    decode,\n    encode,\n};\n//# sourceMappingURL=encryption.js.map"]},"metadata":{},"sourceType":"script"}