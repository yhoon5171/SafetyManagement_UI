{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar utils = require('web3-utils');\n\nvar Iban = require('web3-eth-iban');\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\n\n\nvar outputBigNumberFormatter = function (number) {\n  return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n  if (this && (blockNumber === undefined || blockNumber === null)) {\n    return this.defaultBlock;\n  }\n\n  if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n    return '0x0';\n  }\n\n  return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n  if (blockNumber === undefined) {\n    return undefined;\n  } else if (isPredefinedBlockNumber(blockNumber)) {\n    return blockNumber;\n  }\n\n  return utils.isHexStrict(blockNumber) ? _.isString(blockNumber) ? blockNumber.toLowerCase() : blockNumber : utils.numberToHex(blockNumber);\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\n\n\nvar _txInputFormatter = function (options) {\n  if (options.to) {\n    // it might be contract creation\n    options.to = inputAddressFormatter(options.to);\n  }\n\n  if (options.data && options.input) {\n    throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n\n  if (!options.data && options.input) {\n    options.data = options.input;\n    delete options.input;\n  }\n\n  if (options.data && !utils.isHex(options.data)) {\n    throw new Error('The data field must be HEX encoded data.');\n  } // allow both\n\n\n  if (options.gas || options.gasLimit) {\n    options.gas = options.gas || options.gasLimit;\n  }\n\n  ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n    return options[key] !== undefined;\n  }).forEach(function (key) {\n    options[key] = utils.numberToHex(options[key]);\n  });\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\n\n\nvar inputCallFormatter = function (options) {\n  options = _txInputFormatter(options);\n  var from = options.from || (this ? this.defaultAccount : null);\n\n  if (from) {\n    options.from = inputAddressFormatter(from);\n  }\n\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\n\n\nvar inputTransactionFormatter = function (options) {\n  options = _txInputFormatter(options); // check from, only if not number, or object\n\n  if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n    options.from = options.from || (this ? this.defaultAccount : null);\n\n    if (!options.from && !_.isNumber(options.from)) {\n      throw new Error('The send transactions \"from\" field must be defined!');\n    }\n\n    options.from = inputAddressFormatter(options.from);\n  }\n\n  return options;\n};\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\n\n\nvar inputSignFormatter = function (data) {\n  return utils.isHexStrict(data) ? data : utils.utf8ToHex(data);\n};\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\n\n\nvar outputTransactionFormatter = function (tx) {\n  if (tx.blockNumber !== null) tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n  if (tx.transactionIndex !== null) tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n  tx.nonce = utils.hexToNumber(tx.nonce);\n  tx.gas = utils.hexToNumber(tx.gas);\n  tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n  tx.value = outputBigNumberFormatter(tx.value);\n\n  if (tx.to && utils.isAddress(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    tx.to = utils.toChecksumAddress(tx.to);\n  } else {\n    tx.to = null; // set to `null` if invalid address\n  }\n\n  if (tx.from) {\n    tx.from = utils.toChecksumAddress(tx.from);\n  }\n\n  return tx;\n};\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\n\n\nvar outputTransactionReceiptFormatter = function (receipt) {\n  if (typeof receipt !== 'object') {\n    throw new Error('Received receipt is invalid: ' + receipt);\n  }\n\n  if (receipt.blockNumber !== null) receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n  if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n  receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n  receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n  if (_.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n\n  if (receipt.contractAddress) {\n    receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n  }\n\n  if (typeof receipt.status !== 'undefined') {\n    receipt.status = Boolean(parseInt(receipt.status));\n  }\n\n  return receipt;\n};\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\n\n\nvar outputBlockFormatter = function (block) {\n  // transform to number\n  block.gasLimit = utils.hexToNumber(block.gasLimit);\n  block.gasUsed = utils.hexToNumber(block.gasUsed);\n  block.size = utils.hexToNumber(block.size);\n  block.timestamp = utils.hexToNumber(block.timestamp);\n  if (block.number !== null) block.number = utils.hexToNumber(block.number);\n  if (block.difficulty) block.difficulty = outputBigNumberFormatter(block.difficulty);\n  if (block.totalDifficulty) block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n  if (_.isArray(block.transactions)) {\n    block.transactions.forEach(function (item) {\n      if (!_.isString(item)) return outputTransactionFormatter(item);\n    });\n  }\n\n  if (block.miner) block.miner = utils.toChecksumAddress(block.miner);\n  return block;\n};\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\n\n\nvar inputLogFormatter = function (options) {\n  var toTopic = function (value) {\n    if (value === null || typeof value === 'undefined') return null;\n    value = String(value);\n    if (value.indexOf('0x') === 0) return value;else return utils.fromUtf8(value);\n  };\n\n  if (options.fromBlock) options.fromBlock = inputBlockNumberFormatter(options.fromBlock);\n  if (options.toBlock) options.toBlock = inputBlockNumberFormatter(options.toBlock); // make sure topics, get converted to hex\n\n  options.topics = options.topics || [];\n  options.topics = options.topics.map(function (topic) {\n    return _.isArray(topic) ? topic.map(toTopic) : toTopic(topic);\n  });\n  toTopic = null;\n\n  if (options.address) {\n    options.address = _.isArray(options.address) ? options.address.map(function (addr) {\n      return inputAddressFormatter(addr);\n    }) : inputAddressFormatter(options.address);\n  }\n\n  return options;\n};\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\n\n\nvar outputLogFormatter = function (log) {\n  // generate a custom log id\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {\n    var shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));\n    log.id = 'log_' + shaId.replace('0x', '').substr(0, 8);\n  } else if (!log.id) {\n    log.id = null;\n  }\n\n  if (log.blockNumber !== null) log.blockNumber = utils.hexToNumber(log.blockNumber);\n  if (log.transactionIndex !== null) log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n  if (log.logIndex !== null) log.logIndex = utils.hexToNumber(log.logIndex);\n\n  if (log.address) {\n    log.address = utils.toChecksumAddress(log.address);\n  }\n\n  return log;\n};\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\n\n\nvar inputPostFormatter = function (post) {\n  // post.payload = utils.toHex(post.payload);\n  if (post.ttl) post.ttl = utils.numberToHex(post.ttl);\n  if (post.workToProve) post.workToProve = utils.numberToHex(post.workToProve);\n  if (post.priority) post.priority = utils.numberToHex(post.priority); // fallback\n\n  if (!_.isArray(post.topics)) {\n    post.topics = post.topics ? [post.topics] : [];\n  } // format the following options\n\n\n  post.topics = post.topics.map(function (topic) {\n    // convert only if not hex\n    return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic);\n  });\n  return post;\n};\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\n\n\nvar outputPostFormatter = function (post) {\n  post.expiry = utils.hexToNumber(post.expiry);\n  post.sent = utils.hexToNumber(post.sent);\n  post.ttl = utils.hexToNumber(post.ttl);\n  post.workProved = utils.hexToNumber(post.workProved); // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n\n  if (!post.topics) {\n    post.topics = [];\n  }\n\n  post.topics = post.topics.map(function (topic) {\n    return utils.toUtf8(topic);\n  });\n  return post;\n};\n\nvar inputAddressFormatter = function (address) {\n  var iban = new Iban(address);\n\n  if (iban.isValid() && iban.isDirect()) {\n    return iban.toAddress().toLowerCase();\n  } else if (utils.isAddress(address)) {\n    return '0x' + address.toLowerCase().replace('0x', '');\n  }\n\n  throw new Error('Provided address \"' + address + '\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\nvar outputSyncingFormatter = function (result) {\n  result.startingBlock = utils.hexToNumber(result.startingBlock);\n  result.currentBlock = utils.hexToNumber(result.currentBlock);\n  result.highestBlock = utils.hexToNumber(result.highestBlock);\n\n  if (result.knownStates) {\n    result.knownStates = utils.hexToNumber(result.knownStates);\n    result.pulledStates = utils.hexToNumber(result.pulledStates);\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n  inputBlockNumberFormatter: inputBlockNumberFormatter,\n  inputCallFormatter: inputCallFormatter,\n  inputTransactionFormatter: inputTransactionFormatter,\n  inputAddressFormatter: inputAddressFormatter,\n  inputPostFormatter: inputPostFormatter,\n  inputLogFormatter: inputLogFormatter,\n  inputSignFormatter: inputSignFormatter,\n  outputBigNumberFormatter: outputBigNumberFormatter,\n  outputTransactionFormatter: outputTransactionFormatter,\n  outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n  outputBlockFormatter: outputBlockFormatter,\n  outputLogFormatter: outputLogFormatter,\n  outputPostFormatter: outputPostFormatter,\n  outputSyncingFormatter: outputSyncingFormatter\n};","map":{"version":3,"names":["_","require","utils","Iban","outputBigNumberFormatter","number","toBN","toString","isPredefinedBlockNumber","blockNumber","inputDefaultBlockNumberFormatter","undefined","defaultBlock","inputBlockNumberFormatter","isHexStrict","isString","toLowerCase","numberToHex","_txInputFormatter","options","to","inputAddressFormatter","data","input","Error","isHex","gas","gasLimit","filter","key","forEach","inputCallFormatter","from","defaultAccount","inputTransactionFormatter","isNumber","isObject","inputSignFormatter","utf8ToHex","outputTransactionFormatter","tx","hexToNumber","transactionIndex","nonce","gasPrice","value","isAddress","toChecksumAddress","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","isArray","logs","map","outputLogFormatter","contractAddress","status","Boolean","parseInt","outputBlockFormatter","block","size","timestamp","difficulty","totalDifficulty","transactions","item","miner","inputLogFormatter","toTopic","String","indexOf","fromUtf8","fromBlock","toBlock","topics","topic","address","addr","log","blockHash","transactionHash","logIndex","shaId","sha3","replace","id","substr","inputPostFormatter","post","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","toUtf8","iban","isValid","isDirect","toAddress","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","module","exports"],"sources":["C:/Users/mcnl/Desktop/gong/test/SafetyManagement_UI/client/node_modules/truffle-interface-adapter/node_modules/web3-core-helpers/src/formatters.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar utils = require('web3-utils');\nvar Iban = require('web3-eth-iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBN(number).toString(10);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return this.defaultBlock;\n    }\n    if (blockNumber === 'genesis' || blockNumber === 'earliest') {\n        return '0x0';\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return (utils.isHexStrict(blockNumber)) ? ((_.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nvar _txInputFormatter = function (options){\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    if (options.data && options.input) {\n        throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input;\n        delete options.input;\n    }\n\n    if(options.data && !utils.isHex(options.data)) {\n        throw new Error('The data field must be HEX encoded data.');\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit;\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.numberToHex(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options = _txInputFormatter(options);\n\n    var from = options.from || (this ? this.defaultAccount : null);\n\n    if (from) {\n        options.from = inputAddressFormatter(from);\n    }\n\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options) {\n\n    options = _txInputFormatter(options);\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null);\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!');\n        }\n\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    return options;\n};\n\n/**\n * Hex encodes the data passed to eth_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nvar inputSignFormatter = function (data) {\n    return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n    tx.nonce = utils.hexToNumber(tx.nonce);\n    tx.gas = utils.hexToNumber(tx.gas);\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n    tx.value = outputBigNumberFormatter(tx.value);\n\n    if(tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to);\n    } else {\n        tx.to = null; // set to `null` if invalid address\n    }\n\n    if(tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from);\n    }\n\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(typeof receipt !== 'object') {\n        throw new Error('Received receipt is invalid: '+ receipt);\n    }\n\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n    if(_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter);\n    }\n\n    if(receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n    }\n\n    if(typeof receipt.status !== 'undefined') {\n        receipt.status = Boolean(parseInt(receipt.status));\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit);\n    block.gasUsed = utils.hexToNumber(block.gasUsed);\n    block.size = utils.hexToNumber(block.size);\n    block.timestamp = utils.hexToNumber(block.timestamp);\n    if (block.number !== null)\n        block.number = utils.hexToNumber(block.number);\n\n    if(block.difficulty)\n        block.difficulty = outputBigNumberFormatter(block.difficulty);\n    if(block.totalDifficulty)\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!_.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    if (block.miner)\n        block.miner = utils.toChecksumAddress(block.miner);\n\n    return block;\n};\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar inputLogFormatter = function(options) {\n    var toTopic = function(value){\n\n        if(value === null || typeof value === 'undefined')\n            return null;\n\n        value = String(value);\n\n        if(value.indexOf('0x') === 0)\n            return value;\n        else\n            return utils.fromUtf8(value);\n    };\n\n    if (options.fromBlock)\n        options.fromBlock = inputBlockNumberFormatter(options.fromBlock);\n\n    if (options.toBlock)\n        options.toBlock = inputBlockNumberFormatter(options.toBlock);\n\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (_.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    toTopic = null;\n\n    if (options.address) {\n        options.address = (_.isArray(options.address)) ? options.address.map(function (addr) {\n            return inputAddressFormatter(addr);\n        }) : inputAddressFormatter(options.address);\n    }\n\n    return options;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n\n    // generate a custom log id\n    if(typeof log.blockHash === 'string' &&\n       typeof log.transactionHash === 'string' &&\n       typeof log.logIndex === 'string') {\n        var shaId = utils.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));\n        log.id = 'log_'+ shaId.replace('0x','').substr(0,8);\n    } else if(!log.id) {\n        log.id = null;\n    }\n\n    if (log.blockNumber !== null)\n        log.blockNumber = utils.hexToNumber(log.blockNumber);\n    if (log.transactionIndex !== null)\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n    if (log.logIndex !== null)\n        log.logIndex = utils.hexToNumber(log.logIndex);\n\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address);\n    }\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl)\n        post.ttl = utils.numberToHex(post.ttl);\n    if (post.workToProve)\n        post.workToProve = utils.numberToHex(post.workToProve);\n    if (post.priority)\n        post.priority = utils.numberToHex(post.priority);\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.hexToNumber(post.expiry);\n    post.sent = utils.hexToNumber(post.sent);\n    post.ttl = utils.hexToNumber(post.ttl);\n    post.workProved = utils.hexToNumber(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toUtf8(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase();\n    } else if (utils.isAddress(address)) {\n        return '0x' + address.toLowerCase().replace('0x','');\n    }\n    throw new Error('Provided address \"'+ address +'\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.hexToNumber(result.startingBlock);\n    result.currentBlock = utils.hexToNumber(result.currentBlock);\n    result.highestBlock = utils.hexToNumber(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates);\n        result.pulledStates = utils.hexToNumber(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}