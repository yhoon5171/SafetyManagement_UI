{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\uACF5\\uD504\\uAE30\\\\Capstone test\\\\BlockchainSafetyManagement-UI_Test\\\\client\\\\src\\\\App.jsx\";\n// import React, { useEffect, useState } from \"react\";\n// import {FileUpload} from './components/FileUpload';\n// import \"./App.css\";\n// import TransactionContract from \"../src/contracts/Transaction.json\"\n// import Web3 from 'web3';\n// import moment from \"moment\";\n// import Axios from 'axios';\n// import Login from './login';\n// import Signup from './signup';\n// export default function App() {\n//   const [fileUrl, setFileUrl] = useState(\"\");\n//   const [web3, setWeb3] = useState(\"\");\n//   const [account, setAccount] = useState(\"\");\n//   const [transactionInstance, setTransactionInstance] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [category, setCategory] = useState(\"\");\n//   const [name, setName] = useState(\"\");\n//   const [ipfsHash, setIpfsHash] = useState(\"\");\n//   const [registrant, setRegsitrant] = useState(\"\");\n//   const [responsibleManager, setResponsibleManager] = useState(\"\");\n//   const [fileType, setFileType] = useState(\"\");\n//   const [fileDescription, setFileDescription] = useState(\"\");\n//   const [transactionCnt, setTransactionCnt] = useState(\"\");\n//   const [time, setTime] = useState(\"\");\n//   const [ipfsHash_, setIpfsHash_] = useState(\"\");\n//   const [category_, setCategory_] = useState(\"\");\n//   const [name_, setName_] = useState(\"\");\n//   const [registrant_, setRegsitrant_] = useState(\"\");\n//   const [responsibleManager_, setResponsibleManager_] = useState(\"\");\n//   const [fileType_, setFileType_] = useState(\"\");\n//   const [fileDescription_, setFileDescription_] = useState(\"\");\n//   const submitReview = ()=>{\n//     Axios.post('http://localhost:3001/api/insert', {\n//       category: category,\n//       name: name,\n//       time: time,\n//       ipfsHash: ipfsHash,\n//       registrant: registrant,\n//       responsible: responsibleManager,\n//       filetype: fileType,\n//       filedes: fileDescription\n//     }).then(()=>{\n//       alert('등록 완료!');\n//     })\n//   };\n//   useEffect(() => {\n//     async function componentWillMount(e) {\n//       const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n//       setWeb3(web3);\n//       console.log(web3)\n//       const contract = require(\"truffle-contract\");\n//       const transaction = contract(TransactionContract);\n//       console.log(web3);\n//       transaction.setProvider(web3.currentProvider);\n//       web3.eth.getAccounts((error, accounts) => {\n//         if (!error){\n//           transaction.deployed().then(instance => {\n//             setTransactionInstance(instance);\n//             setAccount(accounts[0]);\n//             setLoading(true);\n//           })\n//         }\n//       })\n//     }\n//     componentWillMount();\n//     // setTimeout(() => {  console.log(\"World!\"); }, 1000);\n//     // updateAllTransactions();\n//   }, []);\n//   useEffect(() => {\n//     async function updateAllTransactions(e){\n//       let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock:0, toBlock:'latest'});\n//       for(let i=0; i<events.length; i+=1){\n//         const record = {};\n//         var time_ = moment.unix(events[i].returnValues.time);\n//         setCategory_(events[i].returnValues.category.toString());\n//         setName_(events[i].returnValues.name.toString());\n//         setTime(time_.toString());\n//         setIpfsHash_(events[i].returnValues.ipfs_hash.toString());\n//         setRegsitrant_(events[i].returnValues.registrant.toString());\n//         setResponsibleManager_(events[i].returnValues.responsible_manager.toString());\n//         setFileType_(events[i].returnValues.file_type.toString());\n//         setFileDescription_(events[i].returnValues.file_description.toString());\n//         setTransactionCnt(transactionInstance.cntTransactions());\n//         console.log(events[i].returnValues);\n//       }\n//       console.log(events.length);\n//       console.log(events);\n//     }\n//     if (loading == true) updateAllTransactions();\n// }, [loading]);\n//   const sendTransaction = async (e) => {\n//     console.log(web3);\n//     console.log(account);\n//     console.log(transactionInstance);\n//     await transactionInstance.sendTrans(category, name, ipfsHash, registrant, responsibleManager, fileType, fileDescription,{\n//       from: account,\n//       //value: e.web3.utils.toWei('10', \"ether\"),\n//       gas: 1000000\n//     })\n//     let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock: 0, toBlock:'latest'});\n//     console.log(events[events.length-1].transactionHash)\n//     //this.updateAllTransactions();\n//     submitReview();\n//   }\n//   return (\n//     <div>\n//       <Login />\n//       <Signup />\n//       <input type=\"text\" placeholder=\"Type\" onChange = {(event) => setCategory(event.target.value)}></input>\n//       <br></br>\n//       <input type=\"text\" placeholder=\"Name\" onChange = {(event) => setName(event.target.value)}></input>\n//       <br></br>\n//       <input type=\"text\" placeholder=\"Registrant\" onChange = {(event) => setRegsitrant(event.target.value)}></input>\n//       <br></br>\n//       <input type=\"text\" placeholder=\"Responsible Manager\" onChange = {(event) => setResponsibleManager(event.target.value)}></input>\n//       <br></br>\n//       <input type=\"text\" placeholder=\"File Type\" onChange = {(event) => setFileType(event.target.value)}></input>\n//       <br></br>\n//       <input type=\"text\" placeholder=\"File Description\" onChange = {(event) => setFileDescription(event.target.value)}></input>\n//       <br></br>\n//       <FileUpload setUrl={setFileUrl} setIpfs={setIpfsHash} />\n//       FileUrl :{\" \"}\n//       <a href={fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n//         {fileUrl}\n//       </a>\n//       <br></br>\n//       <p>Your account: {account}</p>\n//       <br></br>\n//       <button onClick={sendTransaction}>\n//         트랜잭션 추가\n//       </button>\n//       {/* <button onClick={updateAllTransactions}>\n//         트랜잭션 보여주기\n//       </button> */}\n//       <br></br>\n//       <p>all transactions:</p>\n//       <br></br>\n//       <p>Category: {category_}</p>\n//       <p>File Name: {name_}</p>\n//       <p>Time: {time}</p>\n//       <p>IPFS Hash: {ipfsHash_}</p>\n//       <p>Registrant: {registrant_}</p>\n//       <p>Responsible Manager: {responsibleManager_}</p>\n//       <p>File Type: {fileType_}</p>\n//       <p>File Description: {fileDescription_}</p>\n//     </div>\n//   )\n// }\nimport React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./styles.css\";\nimport Sidebar from \"./components/Sidebar\";\nimport Home from \"./pages/Home\";\nimport Members from \"./pages/Members\";\nimport Cashes from \"./pages/Cashes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          component: Home\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/members\",\n          component: Members\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/cashes\",\n          component: Cashes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Switch","Route","Sidebar","Home","Members","Cashes","App"],"sources":["D:/공프기/Capstone test/BlockchainSafetyManagement-UI_Test/client/src/App.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import {FileUpload} from './components/FileUpload';\r\n// import \"./App.css\";\r\n// import TransactionContract from \"../src/contracts/Transaction.json\"\r\n// import Web3 from 'web3';\r\n// import moment from \"moment\";\r\n// import Axios from 'axios';\r\n// import Login from './login';\r\n// import Signup from './signup';\r\n\r\n\r\n\r\n// export default function App() {\r\n//   const [fileUrl, setFileUrl] = useState(\"\");\r\n//   const [web3, setWeb3] = useState(\"\");\r\n//   const [account, setAccount] = useState(\"\");\r\n//   const [transactionInstance, setTransactionInstance] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [name, setName] = useState(\"\");\r\n//   const [ipfsHash, setIpfsHash] = useState(\"\");\r\n//   const [registrant, setRegsitrant] = useState(\"\");\r\n//   const [responsibleManager, setResponsibleManager] = useState(\"\");\r\n//   const [fileType, setFileType] = useState(\"\");\r\n//   const [fileDescription, setFileDescription] = useState(\"\");\r\n//   const [transactionCnt, setTransactionCnt] = useState(\"\");\r\n\r\n//   const [time, setTime] = useState(\"\");\r\n//   const [ipfsHash_, setIpfsHash_] = useState(\"\");\r\n//   const [category_, setCategory_] = useState(\"\");\r\n//   const [name_, setName_] = useState(\"\");\r\n//   const [registrant_, setRegsitrant_] = useState(\"\");\r\n//   const [responsibleManager_, setResponsibleManager_] = useState(\"\");\r\n//   const [fileType_, setFileType_] = useState(\"\");\r\n//   const [fileDescription_, setFileDescription_] = useState(\"\");\r\n\r\n//   const submitReview = ()=>{\r\n//     Axios.post('http://localhost:3001/api/insert', {\r\n//       category: category,\r\n//       name: name,\r\n//       time: time,\r\n//       ipfsHash: ipfsHash,\r\n//       registrant: registrant,\r\n//       responsible: responsibleManager,\r\n//       filetype: fileType,\r\n//       filedes: fileDescription\r\n//     }).then(()=>{\r\n//       alert('등록 완료!');\r\n//     })\r\n//   };\r\n\r\n\r\n//   useEffect(() => {\r\n//     async function componentWillMount(e) {\r\n//       const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n//       setWeb3(web3);\r\n//       console.log(web3)\r\n//       const contract = require(\"truffle-contract\");\r\n//       const transaction = contract(TransactionContract);\r\n//       console.log(web3);\r\n//       transaction.setProvider(web3.currentProvider);\r\n  \r\n//       web3.eth.getAccounts((error, accounts) => {\r\n//         if (!error){\r\n//           transaction.deployed().then(instance => {\r\n//             setTransactionInstance(instance);\r\n//             setAccount(accounts[0]);\r\n//             setLoading(true);\r\n//           })\r\n//         }\r\n//       })\r\n      \r\n//     }\r\n\r\n//     componentWillMount();\r\n//     // setTimeout(() => {  console.log(\"World!\"); }, 1000);\r\n//     // updateAllTransactions();\r\n\r\n    \r\n\r\n//   }, []);\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     async function updateAllTransactions(e){\r\n//       let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock:0, toBlock:'latest'});\r\n//       for(let i=0; i<events.length; i+=1){\r\n//         const record = {};\r\n//         var time_ = moment.unix(events[i].returnValues.time);\r\n\r\n//         setCategory_(events[i].returnValues.category.toString());\r\n//         setName_(events[i].returnValues.name.toString());\r\n//         setTime(time_.toString());\r\n//         setIpfsHash_(events[i].returnValues.ipfs_hash.toString());\r\n//         setRegsitrant_(events[i].returnValues.registrant.toString());\r\n//         setResponsibleManager_(events[i].returnValues.responsible_manager.toString());\r\n//         setFileType_(events[i].returnValues.file_type.toString());\r\n//         setFileDescription_(events[i].returnValues.file_description.toString());\r\n//         setTransactionCnt(transactionInstance.cntTransactions());\r\n//         console.log(events[i].returnValues);\r\n//       }\r\n//       console.log(events.length);\r\n//       console.log(events);\r\n  \r\n//     }\r\n\r\n//     if (loading == true) updateAllTransactions();\r\n\r\n// }, [loading]);\r\n\r\n\r\n//   const sendTransaction = async (e) => {\r\n//     console.log(web3);\r\n//     console.log(account);\r\n//     console.log(transactionInstance);\r\n//     await transactionInstance.sendTrans(category, name, ipfsHash, registrant, responsibleManager, fileType, fileDescription,{\r\n//       from: account,\r\n//       //value: e.web3.utils.toWei('10', \"ether\"),\r\n//       gas: 1000000\r\n//     })\r\n    \r\n//     let events = await transactionInstance.getPastEvents('handleTransaction', {fromBlock: 0, toBlock:'latest'});\r\n//     console.log(events[events.length-1].transactionHash)\r\n//     //this.updateAllTransactions();\r\n\r\n//     submitReview();\r\n//   }\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <Login />\r\n//       <Signup />\r\n//       <input type=\"text\" placeholder=\"Type\" onChange = {(event) => setCategory(event.target.value)}></input>\r\n//       <br></br>\r\n//       <input type=\"text\" placeholder=\"Name\" onChange = {(event) => setName(event.target.value)}></input>\r\n//       <br></br>\r\n//       <input type=\"text\" placeholder=\"Registrant\" onChange = {(event) => setRegsitrant(event.target.value)}></input>\r\n//       <br></br>\r\n//       <input type=\"text\" placeholder=\"Responsible Manager\" onChange = {(event) => setResponsibleManager(event.target.value)}></input>\r\n//       <br></br>\r\n//       <input type=\"text\" placeholder=\"File Type\" onChange = {(event) => setFileType(event.target.value)}></input>\r\n//       <br></br>\r\n//       <input type=\"text\" placeholder=\"File Description\" onChange = {(event) => setFileDescription(event.target.value)}></input>\r\n//       <br></br>\r\n      \r\n//       <FileUpload setUrl={setFileUrl} setIpfs={setIpfsHash} />\r\n//       FileUrl :{\" \"}\r\n//       <a href={fileUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//         {fileUrl}\r\n//       </a>\r\n//       <br></br>\r\n\r\n//       <p>Your account: {account}</p>\r\n//       <br></br>\r\n\r\n//       <button onClick={sendTransaction}>\r\n//         트랜잭션 추가\r\n//       </button>\r\n//       {/* <button onClick={updateAllTransactions}>\r\n//         트랜잭션 보여주기\r\n//       </button> */}\r\n//       <br></br>\r\n\r\n//       <p>all transactions:</p>\r\n//       <br></br>\r\n//       <p>Category: {category_}</p>\r\n//       <p>File Name: {name_}</p>\r\n//       <p>Time: {time}</p>\r\n//       <p>IPFS Hash: {ipfsHash_}</p>\r\n//       <p>Registrant: {registrant_}</p>\r\n//       <p>Responsible Manager: {responsibleManager_}</p>\r\n//       <p>File Type: {fileType_}</p>\r\n//       <p>File Description: {fileDescription_}</p>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\nimport React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport \"./styles.css\";\r\n\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Home from \"./pages/Home\";\r\nimport Members from \"./pages/Members\";\r\nimport Cashes from \"./pages/Cashes\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Sidebar></Sidebar>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/members\" component={Members} />\r\n          <Route path=\"/cashes\" component={Cashes} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AACA,OAAO,cAAP;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;;AAEA,eAAe,SAASC,GAAT,GAAe;EAC5B,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE,QAAC,aAAD;MAAA,wBACE,QAAC,OAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,MAAD;QAAA,wBACE,QAAC,KAAD;UAAO,IAAI,EAAC,GAAZ;UAAgB,KAAK,MAArB;UAAsB,SAAS,EAAEH;QAAjC;UAAA;UAAA;UAAA;QAAA,QADF,eAEE,QAAC,KAAD;UAAO,IAAI,EAAC,UAAZ;UAAuB,SAAS,EAAEC;QAAlC;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE,QAAC,KAAD;UAAO,IAAI,EAAC,SAAZ;UAAsB,SAAS,EAAEC;QAAjC;UAAA;UAAA;UAAA;QAAA,QAHF;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAYD;KAbuBC,G"},"metadata":{},"sourceType":"module"}