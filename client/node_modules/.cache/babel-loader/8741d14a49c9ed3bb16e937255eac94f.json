{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FabricEvmDefinition = {\n  initNetworkType: function initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // web3 expects getId to return a hexString convertible to a number\n              // for fabric-evm we ignore the hexToNumber output formatter\n              overrides.getId(web3);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n};\nvar overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.net.getId is a function and doesn't\n  // have a `method` property, which it does\n  \"getId\": function getId(web3) {\n    // @ts-ignore\n    var _oldGetIdFormatter = web3.eth.net.getId.method.outputFormatter; // @ts-ignore\n\n    web3.eth.net.getId.method.outputFormatter = function (hexId) {\n      // chaincode-fabric-evm currently returns a \"fabric-evm\" string\n      // instead of a hex networkID. Instead of trying to decode the hexToNumber,\n      // let's just accept `fabric-evm` as a valid networkID for now.\n      return hexId;\n    };\n  }\n};","map":{"version":3,"sources":["../lib/fabric-evm-overloads.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEa,OAAA,CAAA,mBAAA,GAAsB;EAC3B,eAD2B,2BACV,IADU,EACI;;;;;;cACnC;cACA;cACA,SAAS,CAAC,KAAV,CAAgB,IAAhB;;;;;;;;;EACD;AALgC,CAAtB;AAQb,IAAM,SAAS,GAAG;EAClB;EACA;EACA;EACE,SAAS,eAAC,IAAD,EAAmB;IAC5B;IACA,IAAM,kBAAkB,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,CAAa,KAAb,CAAmB,MAAnB,CAA0B,eAArD,CAF4B,CAG5B;;IACA,IAAI,CAAC,GAAL,CAAS,GAAT,CAAa,KAAb,CAAmB,MAAnB,CAA0B,eAA1B,GAA4C,UAAC,KAAD,EAAe;MACzD;MACA;MACA;MACA,OAAO,KAAP;IACD,CALD;EAMC;AAde,CAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FabricEvmDefinition = {\r\n    initNetworkType(web3) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // web3 expects getId to return a hexString convertible to a number\r\n            // for fabric-evm we ignore the hexToNumber output formatter\r\n            overrides.getId(web3);\r\n        });\r\n    }\r\n};\r\nconst overrides = {\r\n    // The ts-ignores are ignoring the checks that are\r\n    // saying that web3.eth.net.getId is a function and doesn't\r\n    // have a `method` property, which it does\r\n    \"getId\": (web3) => {\r\n        // @ts-ignore\r\n        const _oldGetIdFormatter = web3.eth.net.getId.method.outputFormatter;\r\n        // @ts-ignore\r\n        web3.eth.net.getId.method.outputFormatter = (hexId) => {\r\n            // chaincode-fabric-evm currently returns a \"fabric-evm\" string\r\n            // instead of a hex networkID. Instead of trying to decode the hexToNumber,\r\n            // let's just accept `fabric-evm` as a valid networkID for now.\r\n            return hexId;\r\n        };\r\n    }\r\n};\r\n//# sourceMappingURL=fabric-evm-overloads.js.map"]},"metadata":{},"sourceType":"script"}