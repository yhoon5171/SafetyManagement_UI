{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nexports.EthereumDefinition = {\n  initNetworkType: function initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // truffle has started expecting gas used/limit to be\n              // hex strings to support bignumbers for other ledgers\n              overrides.getBlock(web3);\n              overrides.getTransaction(web3);\n              overrides.getTransactionReceipt(web3);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }\n};\nvar overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  \"getBlock\": function getBlock(web3) {\n    // @ts-ignore\n    var _oldFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getBlock.method.outputFormatter = function (block) {\n      // @ts-ignore\n      var result = _oldFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  },\n  \"getTransaction\": function getTransaction(web3) {\n    var _oldTransactionFormatter = // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransaction.method.outputFormatter = function (tx) {\n      var result = _oldTransactionFormatter.call( // @ts-ignore\n      web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\n      return result;\n    };\n  },\n  \"getTransactionReceipt\": function getTransactionReceipt(web3) {\n    var _oldTransactionReceiptFormatter = // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransactionReceipt.method.outputFormatter = function (receipt) {\n      var result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAGaA,6BAAqB;EAC1BC,eAD0B,2BACTC,IADS,EACK;;;;;;cACnC;cACA;cACAC,SAAS,CAACC,QAAV,CAAmBF,IAAnB;cACAC,SAAS,CAACE,cAAV,CAAyBH,IAAzB;cACAC,SAAS,CAACG,qBAAV,CAAgCJ,IAAhC;;;;;;;;;EACD;AAP+B,CAArB;AAUb,IAAMC,SAAS,GAAG;EAClB;EACA;EACA;EACE,YAAY,kBAACD,IAAD,EAAmB;IAC/B;IACA,IAAMK,aAAa,GAAGL,IAAI,CAACM,GAAL,CAASJ,QAAT,CAAkBK,MAAlB,CAAyBC,eAA/C,CAF+B,CAI/B;;IACAR,IAAI,CAACM,GAAL,CAASJ,QAAT,CAAkBK,MAAlB,CAAyBC,eAAzB,GAA2C,eAAK,EAAG;MACjD;MACA,IAAIC,MAAM,GAAGJ,aAAa,CAACK,IAAd,CAAmBV,IAAI,CAACM,GAAL,CAASJ,QAAT,CAAkBK,MAArC,EAA6CI,KAA7C,CAAb,CAFiD,CAIjD;MACA;;;MACAF,MAAM,CAACG,QAAP,GAAkB,OAAO,IAAIC,eAAJ,CAAOJ,MAAM,CAACG,QAAd,EAAwBE,QAAxB,CAAiC,EAAjC,CAAzB;MACAL,MAAM,CAACM,OAAP,GAAiB,OAAO,IAAIF,eAAJ,CAAOJ,MAAM,CAACM,OAAd,EAAuBD,QAAvB,CAAgC,EAAhC,CAAxB;MAEA,OAAOL,MAAP;IACD,CAVD;EAWC,CApBe;EAsBhB,kBAAkB,wBAACT,IAAD,EAAmB;IACrC,IAAMgB,wBAAwB,GAC5B;IACAhB,IAAI,CAACM,GAAL,CAASH,cAAT,CAAwBI,MAAxB,CAA+BC,eAFjC,CADqC,CAKrC;;IACAR,IAAI,CAACM,GAAL,CAASH,cAAT,CAAwBI,MAAxB,CAA+BC,eAA/B,GAAiD,YAAE,EAAG;MACpD,IAAIC,MAAM,GAAGO,wBAAwB,CAACN,IAAzB,EACX;MACAV,IAAI,CAACM,GAAL,CAASH,cAAT,CAAwBI,MAFb,EAGXU,EAHW,CAAb,CADoD,CAOpD;MACA;;;MACAR,MAAM,CAACS,GAAP,GAAa,OAAO,IAAIL,eAAJ,CAAOJ,MAAM,CAACS,GAAd,EAAmBJ,QAAnB,CAA4B,EAA5B,CAApB;MAEA,OAAOL,MAAP;IACD,CAZD;EAcC,CA1Ce;EA4ChB,yBAAyB,+BAACT,IAAD,EAAmB;IAC1C,IAAMmB,+BAA+B,GACrC;IACAnB,IAAI,CAACM,GAAL,CAASF,qBAAT,CAA+BG,MAA/B,CAAsCC,eAFtC,CAD0C,CAK5C;;IACAR,IAAI,CAACM,GAAL,CAASF,qBAAT,CAA+BG,MAA/B,CAAsCC,eAAtC,GAAwD,iBAAO,EAAG;MAChE,IAAIC,MAAM,GAAGU,+BAA+B,CAACT,IAAhC,EACX;MACAV,IAAI,CAACM,GAAL,CAASF,qBAAT,CAA+BG,MAFpB,EAGXa,OAHW,CAAb,CADgE,CAOhE;MACA;;;MACAX,MAAM,CAACM,OAAP,GAAiB,OAAO,IAAIF,eAAJ,CAAOJ,MAAM,CAACM,OAAd,EAAuBD,QAAvB,CAAgC,EAAhC,CAAxB;MAEA,OAAOL,MAAP;IACD,CAZD;EAaC;AA/De,CAAlB","names":["exports","initNetworkType","web3","overrides","getBlock","getTransaction","getTransactionReceipt","_oldFormatter","eth","method","outputFormatter","result","call","block","gasLimit","bn_js_1","toString","gasUsed","_oldTransactionFormatter","tx","gas","_oldTransactionReceiptFormatter","receipt"],"sourceRoot":"","sources":["../lib/ethereum-overloads.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}