{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst textDecoder = new TextDecoder();\n\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n\n  for (let shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\n\n    if (b < 128) {\n      break;\n    }\n  }\n\n  return [v, offset];\n}\n\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n\n  return [bytes.subarray(offset, postOffset), postOffset];\n}\n\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index);\n  return [wire & 7, wire >> 3, index];\n}\n\nfunction decodeLink(bytes) {\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`);\n      }\n\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n\n      ;\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`);\n      }\n\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`);\n      }\n\n      ;\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`);\n    }\n  }\n\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n\n  return link;\n}\n\nfunction decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  let links;\n  let linksBeforeData = false;\n  let data;\n\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`);\n    }\n\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n\n      ;\n      [data, index] = decodeBytes(bytes, index);\n\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`);\n    }\n  }\n\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n\n  const node = {};\n\n  if (data) {\n    node.Data = data;\n  }\n\n  node.Links = links || [];\n  return node;\n}\n\nexports.decodeNode = decodeNode;","map":{"version":3,"names":["Object","defineProperty","exports","value","textDecoder","TextDecoder","decodeVarint","bytes","offset","v","shift","Error","length","b","decodeBytes","byteLen","postOffset","subarray","decodeKey","index","wire","decodeLink","link","l","wireType","fieldNum","Hash","Name","undefined","Tsize","byts","decode","decodeNode","links","linksBeforeData","data","push","node","Data","Links"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/@ipld/dag-pb/cjs/src/pb-decode.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nconst textDecoder = new TextDecoder();\r\nfunction decodeVarint(bytes, offset) {\r\n  let v = 0;\r\n  for (let shift = 0;; shift += 7) {\r\n    if (shift >= 64) {\r\n      throw new Error('protobuf: varint overflow');\r\n    }\r\n    if (offset >= bytes.length) {\r\n      throw new Error('protobuf: unexpected end of data');\r\n    }\r\n    const b = bytes[offset++];\r\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\r\n    if (b < 128) {\r\n      break;\r\n    }\r\n  }\r\n  return [\r\n    v,\r\n    offset\r\n  ];\r\n}\r\nfunction decodeBytes(bytes, offset) {\r\n  let byteLen;\r\n  [byteLen, offset] = decodeVarint(bytes, offset);\r\n  const postOffset = offset + byteLen;\r\n  if (byteLen < 0 || postOffset < 0) {\r\n    throw new Error('protobuf: invalid length');\r\n  }\r\n  if (postOffset > bytes.length) {\r\n    throw new Error('protobuf: unexpected end of data');\r\n  }\r\n  return [\r\n    bytes.subarray(offset, postOffset),\r\n    postOffset\r\n  ];\r\n}\r\nfunction decodeKey(bytes, index) {\r\n  let wire;\r\n  [wire, index] = decodeVarint(bytes, index);\r\n  return [\r\n    wire & 7,\r\n    wire >> 3,\r\n    index\r\n  ];\r\n}\r\nfunction decodeLink(bytes) {\r\n  const link = {};\r\n  const l = bytes.length;\r\n  let index = 0;\r\n  while (index < l) {\r\n    let wireType, fieldNum;\r\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\r\n    if (fieldNum === 1) {\r\n      if (link.Hash) {\r\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\r\n      }\r\n      if (wireType !== 2) {\r\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Hash`);\r\n      }\r\n      if (link.Name !== undefined) {\r\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\r\n      }\r\n      if (link.Tsize !== undefined) {\r\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\r\n      }\r\n      ;\r\n      [link.Hash, index] = decodeBytes(bytes, index);\r\n    } else if (fieldNum === 2) {\r\n      if (link.Name !== undefined) {\r\n        throw new Error('protobuf: (PBLink) duplicate Name section');\r\n      }\r\n      if (wireType !== 2) {\r\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Name`);\r\n      }\r\n      if (link.Tsize !== undefined) {\r\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\r\n      }\r\n      let byts;\r\n      [byts, index] = decodeBytes(bytes, index);\r\n      link.Name = textDecoder.decode(byts);\r\n    } else if (fieldNum === 3) {\r\n      if (link.Tsize !== undefined) {\r\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\r\n      }\r\n      if (wireType !== 0) {\r\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Tsize`);\r\n      }\r\n      ;\r\n      [link.Tsize, index] = decodeVarint(bytes, index);\r\n    } else {\r\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${ fieldNum }`);\r\n    }\r\n  }\r\n  if (index > l) {\r\n    throw new Error('protobuf: (PBLink) unexpected end of data');\r\n  }\r\n  return link;\r\n}\r\nfunction decodeNode(bytes) {\r\n  const l = bytes.length;\r\n  let index = 0;\r\n  let links;\r\n  let linksBeforeData = false;\r\n  let data;\r\n  while (index < l) {\r\n    let wireType, fieldNum;\r\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\r\n    if (wireType !== 2) {\r\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${ wireType }`);\r\n    }\r\n    if (fieldNum === 1) {\r\n      if (data) {\r\n        throw new Error('protobuf: (PBNode) duplicate Data section');\r\n      }\r\n      ;\r\n      [data, index] = decodeBytes(bytes, index);\r\n      if (links) {\r\n        linksBeforeData = true;\r\n      }\r\n    } else if (fieldNum === 2) {\r\n      if (linksBeforeData) {\r\n        throw new Error('protobuf: (PBNode) duplicate Links section');\r\n      } else if (!links) {\r\n        links = [];\r\n      }\r\n      let byts;\r\n      [byts, index] = decodeBytes(bytes, index);\r\n      links.push(decodeLink(byts));\r\n    } else {\r\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${ fieldNum }`);\r\n    }\r\n  }\r\n  if (index > l) {\r\n    throw new Error('protobuf: (PBNode) unexpected end of data');\r\n  }\r\n  const node = {};\r\n  if (data) {\r\n    node.Data = data;\r\n  }\r\n  node.Links = links || [];\r\n  return node;\r\n}\r\n\r\nexports.decodeNode = decodeNode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}