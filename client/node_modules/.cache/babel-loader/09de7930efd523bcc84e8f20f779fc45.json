{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n/**\r\n * Can be used in conjunction with {@link Transaction.supports}\r\n * to query on tx capabilities\r\n */\n\n\nvar Capability;\n\n(function (Capability) {\n  /**\r\n   * Tx supports EIP-155 replay protection\r\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\r\n   */\n  Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n  /**\r\n   * Tx supports EIP-1559 gas fee market mechansim\r\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\r\n   */\n\n  Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n  /**\r\n   * Tx is a typed transaction as defined in EIP-2718\r\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\r\n   */\n\n  Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n  /**\r\n   * Tx supports access list generation as defined in EIP-2930\r\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\r\n   */\n\n  Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability = exports.Capability || (exports.Capability = {}));\n\nfunction isAccessListBuffer(input) {\n  if (input.length === 0) {\n    return true;\n  }\n\n  var firstItem = input[0];\n\n  if (Array.isArray(firstItem)) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.isAccessListBuffer = isAccessListBuffer;\n\nfunction isAccessList(input) {\n  return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.\n}\n\nexports.isAccessList = isAccessList;\n/**\r\n * A const defining secp256k1n/2\r\n */\n\nexports.N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);","map":{"version":3,"sources":["../src/types.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAMA;;;AAGG;;;AACH,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;EACpB;;;AAGG;EACH,UAAA,CAAA,UAAA,CAAA,wBAAA,CAAA,GAAA,GAAA,CAAA,GAAA,wBAAA;EAEA;;;AAGG;;EACH,UAAA,CAAA,UAAA,CAAA,kBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,kBAAA;EAEA;;;AAGG;;EACH,UAAA,CAAA,UAAA,CAAA,yBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,yBAAA;EAEA;;;AAGG;;EACH,UAAA,CAAA,UAAA,CAAA,oBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,oBAAA;AACD,CAxBD,EAAY,UAAU,GAAV,OAAA,CAAA,UAAA,KAAA,OAAA,CAAA,UAAA,GAAU,EAAV,CAAZ;;AAuEA,SAAgB,kBAAhB,CACE,KADF,EACsC;EAEpC,IAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;IACtB,OAAO,IAAP;EACD;;EACD,IAAM,SAAS,GAAG,KAAK,CAAC,CAAD,CAAvB;;EACA,IAAI,KAAK,CAAC,OAAN,CAAc,SAAd,CAAJ,EAA8B;IAC5B,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD;;AAXD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAaA,SAAgB,YAAhB,CAA6B,KAA7B,EAAiE;EAC/D,OAAO,CAAC,kBAAkB,CAAC,KAAD,CAA1B,CAD+D,CAC7B;AACnC;;AAFD,OAAA,CAAA,YAAA,GAAA,YAAA;AA4KA;;AAEG;;AACU,OAAA,CAAA,OAAA,GAAU,IAAI,iBAAA,CAAA,EAAJ,CACrB,kEADqB,EAErB,EAFqB,CAAV","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.N_DIV_2 = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;\r\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\r\n/**\r\n * Can be used in conjunction with {@link Transaction.supports}\r\n * to query on tx capabilities\r\n */\r\nvar Capability;\r\n(function (Capability) {\r\n    /**\r\n     * Tx supports EIP-155 replay protection\r\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\r\n     */\r\n    Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\r\n    /**\r\n     * Tx supports EIP-1559 gas fee market mechansim\r\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\r\n     */\r\n    Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\r\n    /**\r\n     * Tx is a typed transaction as defined in EIP-2718\r\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\r\n     */\r\n    Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\r\n    /**\r\n     * Tx supports access list generation as defined in EIP-2930\r\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\r\n     */\r\n    Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\r\n})(Capability = exports.Capability || (exports.Capability = {}));\r\nfunction isAccessListBuffer(input) {\r\n    if (input.length === 0) {\r\n        return true;\r\n    }\r\n    var firstItem = input[0];\r\n    if (Array.isArray(firstItem)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isAccessListBuffer = isAccessListBuffer;\r\nfunction isAccessList(input) {\r\n    return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.\r\n}\r\nexports.isAccessList = isAccessList;\r\n/**\r\n * A const defining secp256k1n/2\r\n */\r\nexports.N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\r\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"script"}