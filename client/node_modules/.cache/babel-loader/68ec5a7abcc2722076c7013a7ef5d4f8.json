{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\n\nvar externals_1 = require(\"./externals\");\n\nvar internal_1 = require(\"./internal\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\r\n * Converts a `Number` into a hex `String`\r\n * @param {Number} i\r\n * @return {String}\r\n */\n\n\nvar intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \".concat(i));\n  }\n\n  return \"0x\".concat(i.toString(16));\n};\n\nexports.intToHex = intToHex;\n/**\r\n * Converts an `Number` to a `Buffer`\r\n * @param {Number} i\r\n * @return {Buffer}\r\n */\n\nvar intToBuffer = function (i) {\n  var hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\n\nexports.intToBuffer = intToBuffer;\n/**\r\n * Returns a buffer filled with 0s.\r\n * @param bytes the number of bytes the buffer should be\r\n */\n\nvar zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\nexports.zeros = zeros;\n/**\r\n * Pads a `Buffer` with zeros till it has `length` bytes.\r\n * Truncates the beginning or end of input if its length exceeds `length`.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Buffer)\r\n */\n\nvar setLength = function (msg, length, right) {\n  var buf = (0, exports.zeros)(length);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\r\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\n\n\nvar setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\n\nexports.setLengthLeft = setLengthLeft;\n/**\r\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\r\n * it truncates the end if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\n\nvar setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\n\nexports.setLengthRight = setLengthRight;\n/**\r\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\r\n * @param a (Buffer|Array|String)\r\n * @return (Buffer|Array|String)\r\n */\n\nvar stripZeros = function (a) {\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\r\n * Trims leading zeros from a `Buffer`.\r\n * @param a (Buffer)\r\n * @return (Buffer)\r\n */\n\n\nvar unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\n\nexports.unpadBuffer = unpadBuffer;\n/**\r\n * Trims leading zeros from an `Array` (of numbers).\r\n * @param a (number[])\r\n * @return (number[])\r\n */\n\nvar unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\n\nexports.unpadArray = unpadArray;\n/**\r\n * Trims leading zeros from a hex-prefixed `String`.\r\n * @param a (String)\r\n * @return (String)\r\n */\n\nvar unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return stripZeros(a);\n};\n\nexports.unpadHexString = unpadHexString;\n/**\r\n * Attempts to turn a value into a `Buffer`.\r\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\r\n * with a `toArray()` or `toBuffer()` method.\r\n * @param v the value\r\n */\n\nvar toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n    }\n\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n\n  if (externals_1.BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(\"Cannot convert negative BN to buffer. Given: \".concat(v));\n    }\n\n    return v.toArrayLike(Buffer);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n\nexports.toBuffer = toBuffer;\n/**\r\n * Converts a `Buffer` to a `Number`.\r\n * @param buf `Buffer` object to convert\r\n * @throws If the input number exceeds 53 bits.\r\n */\n\nvar bufferToInt = function (buf) {\n  return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();\n};\n\nexports.bufferToInt = bufferToInt;\n/**\r\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\r\n * @param buf `Buffer` object to convert\r\n */\n\nvar bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\n\nexports.bufferToHex = bufferToHex;\n/**\r\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\r\n * @param num Signed integer value\r\n */\n\nvar fromSigned = function (num) {\n  return new externals_1.BN(num).fromTwos(256);\n};\n\nexports.fromSigned = fromSigned;\n/**\r\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\r\n * @param num\r\n */\n\nvar toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\nexports.toUnsigned = toUnsigned;\n/**\r\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\r\n */\n\nvar addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\n\nexports.addHexPrefix = addHexPrefix;\n/**\r\n * Returns the utf8 string representation from a hex string.\r\n *\r\n * Examples:\r\n *\r\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\r\n * Input 2: '657468657265756d'\r\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\r\n *\r\n * Output (all 3 input variants): 'ethereum'\r\n *\r\n * Note that this method is not intended to be used with hex strings\r\n * representing quantities in both big endian or little endian notation.\r\n *\r\n * @param string Hex string, should be `0x` prefixed\r\n * @return Utf8 string\r\n */\n\nvar toUtf8 = function (hex) {\n  var zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n\n  var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\n\nexports.toUtf8 = toUtf8;\n/**\r\n * Converts a `Buffer` or `Array` to JSON.\r\n * @param ba (Buffer|Array)\r\n * @return (Array|String|null)\r\n */\n\nvar baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\".concat(ba.toString('hex'));\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n\n    return array;\n  }\n};\n\nexports.baToJSON = baToJSON;\n/**\r\n * Checks provided Buffers for leading zeroes and throws if found.\r\n *\r\n * Examples:\r\n *\r\n * Valid values: 0x1, 0x, 0x01, 0x1234\r\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\r\n *\r\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\r\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\r\n * @param values An object containing string keys and Buffer values\r\n * @throws if any provided value is found to have leading zero bytes\r\n */\n\nvar validateNoLeadingZeroes = function (values) {\n  var e_1, _a;\n\n  try {\n    for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n          k = _d[0],\n          v = _d[1];\n\n      if (v !== undefined && v.length > 0 && v[0] === 0) {\n        throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\n\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\n\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n\n  return arr.map(function (a) {\n    return arrToBufArr(a);\n  });\n}\n\nexports.arrToBufArr = arrToBufArr;\n\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\n  }\n\n  return arr.map(function (a) {\n    return bufArrToArr(a);\n  });\n}\n\nexports.bufArrToArr = bufArrToArr;","map":{"version":3,"sources":["../src/bytes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\r\nvar externals_1 = require(\"./externals\");\r\nvar internal_1 = require(\"./internal\");\r\nvar helpers_1 = require(\"./helpers\");\r\n/**\r\n * Converts a `Number` into a hex `String`\r\n * @param {Number} i\r\n * @return {String}\r\n */\r\nvar intToHex = function (i) {\r\n    if (!Number.isSafeInteger(i) || i < 0) {\r\n        throw new Error(\"Received an invalid integer type: \".concat(i));\r\n    }\r\n    return \"0x\".concat(i.toString(16));\r\n};\r\nexports.intToHex = intToHex;\r\n/**\r\n * Converts an `Number` to a `Buffer`\r\n * @param {Number} i\r\n * @return {Buffer}\r\n */\r\nvar intToBuffer = function (i) {\r\n    var hex = (0, exports.intToHex)(i);\r\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\r\n};\r\nexports.intToBuffer = intToBuffer;\r\n/**\r\n * Returns a buffer filled with 0s.\r\n * @param bytes the number of bytes the buffer should be\r\n */\r\nvar zeros = function (bytes) {\r\n    return Buffer.allocUnsafe(bytes).fill(0);\r\n};\r\nexports.zeros = zeros;\r\n/**\r\n * Pads a `Buffer` with zeros till it has `length` bytes.\r\n * Truncates the beginning or end of input if its length exceeds `length`.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @param right whether to start padding form the left or right\r\n * @return (Buffer)\r\n */\r\nvar setLength = function (msg, length, right) {\r\n    var buf = (0, exports.zeros)(length);\r\n    if (right) {\r\n        if (msg.length < length) {\r\n            msg.copy(buf);\r\n            return buf;\r\n        }\r\n        return msg.slice(0, length);\r\n    }\r\n    else {\r\n        if (msg.length < length) {\r\n            msg.copy(buf, length - msg.length);\r\n            return buf;\r\n        }\r\n        return msg.slice(-length);\r\n    }\r\n};\r\n/**\r\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\r\n * Or it truncates the beginning if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\r\nvar setLengthLeft = function (msg, length) {\r\n    (0, helpers_1.assertIsBuffer)(msg);\r\n    return setLength(msg, length, false);\r\n};\r\nexports.setLengthLeft = setLengthLeft;\r\n/**\r\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\r\n * it truncates the end if it exceeds.\r\n * @param msg the value to pad (Buffer)\r\n * @param length the number of bytes the output should be\r\n * @return (Buffer)\r\n */\r\nvar setLengthRight = function (msg, length) {\r\n    (0, helpers_1.assertIsBuffer)(msg);\r\n    return setLength(msg, length, true);\r\n};\r\nexports.setLengthRight = setLengthRight;\r\n/**\r\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\r\n * @param a (Buffer|Array|String)\r\n * @return (Buffer|Array|String)\r\n */\r\nvar stripZeros = function (a) {\r\n    var first = a[0];\r\n    while (a.length > 0 && first.toString() === '0') {\r\n        a = a.slice(1);\r\n        first = a[0];\r\n    }\r\n    return a;\r\n};\r\n/**\r\n * Trims leading zeros from a `Buffer`.\r\n * @param a (Buffer)\r\n * @return (Buffer)\r\n */\r\nvar unpadBuffer = function (a) {\r\n    (0, helpers_1.assertIsBuffer)(a);\r\n    return stripZeros(a);\r\n};\r\nexports.unpadBuffer = unpadBuffer;\r\n/**\r\n * Trims leading zeros from an `Array` (of numbers).\r\n * @param a (number[])\r\n * @return (number[])\r\n */\r\nvar unpadArray = function (a) {\r\n    (0, helpers_1.assertIsArray)(a);\r\n    return stripZeros(a);\r\n};\r\nexports.unpadArray = unpadArray;\r\n/**\r\n * Trims leading zeros from a hex-prefixed `String`.\r\n * @param a (String)\r\n * @return (String)\r\n */\r\nvar unpadHexString = function (a) {\r\n    (0, helpers_1.assertIsHexString)(a);\r\n    a = (0, internal_1.stripHexPrefix)(a);\r\n    return stripZeros(a);\r\n};\r\nexports.unpadHexString = unpadHexString;\r\n/**\r\n * Attempts to turn a value into a `Buffer`.\r\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\r\n * with a `toArray()` or `toBuffer()` method.\r\n * @param v the value\r\n */\r\nvar toBuffer = function (v) {\r\n    if (v === null || v === undefined) {\r\n        return Buffer.allocUnsafe(0);\r\n    }\r\n    if (Buffer.isBuffer(v)) {\r\n        return Buffer.from(v);\r\n    }\r\n    if (Array.isArray(v) || v instanceof Uint8Array) {\r\n        return Buffer.from(v);\r\n    }\r\n    if (typeof v === 'string') {\r\n        if (!(0, internal_1.isHexString)(v)) {\r\n            throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\r\n        }\r\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\r\n    }\r\n    if (typeof v === 'number') {\r\n        return (0, exports.intToBuffer)(v);\r\n    }\r\n    if (externals_1.BN.isBN(v)) {\r\n        if (v.isNeg()) {\r\n            throw new Error(\"Cannot convert negative BN to buffer. Given: \".concat(v));\r\n        }\r\n        return v.toArrayLike(Buffer);\r\n    }\r\n    if (v.toArray) {\r\n        // converts a BN to a Buffer\r\n        return Buffer.from(v.toArray());\r\n    }\r\n    if (v.toBuffer) {\r\n        return Buffer.from(v.toBuffer());\r\n    }\r\n    throw new Error('invalid type');\r\n};\r\nexports.toBuffer = toBuffer;\r\n/**\r\n * Converts a `Buffer` to a `Number`.\r\n * @param buf `Buffer` object to convert\r\n * @throws If the input number exceeds 53 bits.\r\n */\r\nvar bufferToInt = function (buf) {\r\n    return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();\r\n};\r\nexports.bufferToInt = bufferToInt;\r\n/**\r\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\r\n * @param buf `Buffer` object to convert\r\n */\r\nvar bufferToHex = function (buf) {\r\n    buf = (0, exports.toBuffer)(buf);\r\n    return '0x' + buf.toString('hex');\r\n};\r\nexports.bufferToHex = bufferToHex;\r\n/**\r\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\r\n * @param num Signed integer value\r\n */\r\nvar fromSigned = function (num) {\r\n    return new externals_1.BN(num).fromTwos(256);\r\n};\r\nexports.fromSigned = fromSigned;\r\n/**\r\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\r\n * @param num\r\n */\r\nvar toUnsigned = function (num) {\r\n    return Buffer.from(num.toTwos(256).toArray());\r\n};\r\nexports.toUnsigned = toUnsigned;\r\n/**\r\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\r\n */\r\nvar addHexPrefix = function (str) {\r\n    if (typeof str !== 'string') {\r\n        return str;\r\n    }\r\n    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\r\n};\r\nexports.addHexPrefix = addHexPrefix;\r\n/**\r\n * Returns the utf8 string representation from a hex string.\r\n *\r\n * Examples:\r\n *\r\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\r\n * Input 2: '657468657265756d'\r\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\r\n *\r\n * Output (all 3 input variants): 'ethereum'\r\n *\r\n * Note that this method is not intended to be used with hex strings\r\n * representing quantities in both big endian or little endian notation.\r\n *\r\n * @param string Hex string, should be `0x` prefixed\r\n * @return Utf8 string\r\n */\r\nvar toUtf8 = function (hex) {\r\n    var zerosRegexp = /^(00)+|(00)+$/g;\r\n    hex = (0, internal_1.stripHexPrefix)(hex);\r\n    if (hex.length % 2 !== 0) {\r\n        throw new Error('Invalid non-even hex string input for toUtf8() provided');\r\n    }\r\n    var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\r\n    return bufferVal.toString('utf8');\r\n};\r\nexports.toUtf8 = toUtf8;\r\n/**\r\n * Converts a `Buffer` or `Array` to JSON.\r\n * @param ba (Buffer|Array)\r\n * @return (Array|String|null)\r\n */\r\nvar baToJSON = function (ba) {\r\n    if (Buffer.isBuffer(ba)) {\r\n        return \"0x\".concat(ba.toString('hex'));\r\n    }\r\n    else if (ba instanceof Array) {\r\n        var array = [];\r\n        for (var i = 0; i < ba.length; i++) {\r\n            array.push((0, exports.baToJSON)(ba[i]));\r\n        }\r\n        return array;\r\n    }\r\n};\r\nexports.baToJSON = baToJSON;\r\n/**\r\n * Checks provided Buffers for leading zeroes and throws if found.\r\n *\r\n * Examples:\r\n *\r\n * Valid values: 0x1, 0x, 0x01, 0x1234\r\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\r\n *\r\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\r\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\r\n * @param values An object containing string keys and Buffer values\r\n * @throws if any provided value is found to have leading zero bytes\r\n */\r\nvar validateNoLeadingZeroes = function (values) {\r\n    var e_1, _a;\r\n    try {\r\n        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\r\n            if (v !== undefined && v.length > 0 && v[0] === 0) {\r\n                throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n};\r\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\r\nfunction arrToBufArr(arr) {\r\n    if (!Array.isArray(arr)) {\r\n        return Buffer.from(arr);\r\n    }\r\n    return arr.map(function (a) { return arrToBufArr(a); });\r\n}\r\nexports.arrToBufArr = arrToBufArr;\r\nfunction bufArrToArr(arr) {\r\n    if (!Array.isArray(arr)) {\r\n        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\r\n    }\r\n    return arr.map(function (a) { return bufArrToArr(a); });\r\n}\r\nexports.bufArrToArr = bufArrToArr;\r\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"script"}