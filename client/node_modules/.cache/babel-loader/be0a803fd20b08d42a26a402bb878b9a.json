{"ast":null,"code":"/**\r\n * Utilities for reformatting web3 outputs\r\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\n\nconst web3Utils = require(\"web3-utils\");\n/**\r\n * Converts from string to other number format\r\n * @param  {String} val    number string returned by web3\r\n * @param  {String} format name of format to convert to\r\n * @return {Object|String} converted value\r\n */\n\n\nconst _convertNumber = function (val, format) {\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\n\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n\n    case \"BN\":\n      return web3Utils.toBN(val);\n\n    case \"String\":\n      return val;\n\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n/**\r\n * Converts arrays of number strings to other number formats\r\n * @param  {String[]} arr       number string array returned by web3\r\n * @param  {String}   format    name of format to convert to\r\n * @return {Object[]|String[]}  array of converted values\r\n */\n\n\nconst _convertNumberArray = function (arr, format) {\n  return arr.map(item => _convertNumber(item, format));\n};\n/**\r\n * Reformats numbers in the result/result-object of a web3 call.\r\n * Possible forms of `result` are:\r\n *   - object (with index keys and optionally, named keys)\r\n *   - array\r\n *   - single primitive\r\n * @param  {String|Object|Array} result      web3 call result\r\n * @param  {Array}               abiSegment  event params OR .call outputs\r\n * @return {String|Object|Array} reformatted result\r\n */\n\n\nconst numbers = function (result, abiSegment) {\n  const format = this.numberFormat;\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // result is array\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format); // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(result[output.name], format);\n          } // output will always have an index key\n\n\n          result[i] = _convertNumberArray(result[i], format);\n        } //\n\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        } // output will always have an index key\n\n\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  numbers: numbers\n};","map":{"version":3,"names":["BigNumber","require","web3Utils","_convertNumber","val","format","badFormatMsg","toBN","Error","_convertNumberArray","arr","map","item","numbers","result","abiSegment","numberFormat","forEach","output","i","type","includes","Array","isArray","name","length","module","exports"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/truffle-contract/lib/reformat.js"],"sourcesContent":["/**\r\n * Utilities for reformatting web3 outputs\r\n */\r\nconst BigNumber = require(\"bignumber.js/bignumber\");\r\nconst web3Utils = require(\"web3-utils\");\r\n\r\n/**\r\n * Converts from string to other number format\r\n * @param  {String} val    number string returned by web3\r\n * @param  {String} format name of format to convert to\r\n * @return {Object|String} converted value\r\n */\r\nconst _convertNumber = function(val, format) {\r\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\r\n\r\n  switch (format) {\r\n    case \"BigNumber\":\r\n      return new BigNumber(val);\r\n    case \"BN\":\r\n      return web3Utils.toBN(val);\r\n    case \"String\":\r\n      return val;\r\n    default:\r\n      throw new Error(badFormatMsg);\r\n  }\r\n};\r\n\r\n/**\r\n * Converts arrays of number strings to other number formats\r\n * @param  {String[]} arr       number string array returned by web3\r\n * @param  {String}   format    name of format to convert to\r\n * @return {Object[]|String[]}  array of converted values\r\n */\r\nconst _convertNumberArray = function(arr, format) {\r\n  return arr.map(item => _convertNumber(item, format));\r\n};\r\n\r\n/**\r\n * Reformats numbers in the result/result-object of a web3 call.\r\n * Possible forms of `result` are:\r\n *   - object (with index keys and optionally, named keys)\r\n *   - array\r\n *   - single primitive\r\n * @param  {String|Object|Array} result      web3 call result\r\n * @param  {Array}               abiSegment  event params OR .call outputs\r\n * @return {String|Object|Array} reformatted result\r\n */\r\nconst numbers = function(result, abiSegment) {\r\n  const format = this.numberFormat;\r\n\r\n  abiSegment.forEach((output, i) => {\r\n    // output is a number type (uint || int);\r\n    if (output.type.includes(\"int\")) {\r\n      // output is an array type\r\n      if (output.type.includes(\"[\")) {\r\n        // result is array\r\n        if (Array.isArray(result)) {\r\n          result = _convertNumberArray(result, format);\r\n\r\n          // result is object\r\n        } else {\r\n          // output has name\r\n          if (output.name.length) {\r\n            result[output.name] = _convertNumberArray(\r\n              result[output.name],\r\n              format\r\n            );\r\n          }\r\n          // output will always have an index key\r\n          result[i] = _convertNumberArray(result[i], format);\r\n        }\r\n        //\r\n      } else if (typeof result === \"object\") {\r\n        // output has name\r\n        if (output.name.length) {\r\n          result[output.name] = _convertNumber(result[output.name], format);\r\n        }\r\n\r\n        // output will always have an index key\r\n        result[i] = _convertNumber(result[i], format);\r\n      } else {\r\n        result = _convertNumber(result, format);\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nmodule.exports = {\r\n  numbers: numbers\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,cAAc,GAAG,UAASC,GAAT,EAAcC,MAAd,EAAsB;EAC3C,MAAMC,YAAY,GAAI,mDAAkDD,MAAO,EAA/E;;EAEA,QAAQA,MAAR;IACE,KAAK,WAAL;MACE,OAAO,IAAIL,SAAJ,CAAcI,GAAd,CAAP;;IACF,KAAK,IAAL;MACE,OAAOF,SAAS,CAACK,IAAV,CAAeH,GAAf,CAAP;;IACF,KAAK,QAAL;MACE,OAAOA,GAAP;;IACF;MACE,MAAM,IAAII,KAAJ,CAAUF,YAAV,CAAN;EARJ;AAUD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,mBAAmB,GAAG,UAASC,GAAT,EAAcL,MAAd,EAAsB;EAChD,OAAOK,GAAG,CAACC,GAAJ,CAAQC,IAAI,IAAIT,cAAc,CAACS,IAAD,EAAOP,MAAP,CAA9B,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,OAAO,GAAG,UAASC,MAAT,EAAiBC,UAAjB,EAA6B;EAC3C,MAAMV,MAAM,GAAG,KAAKW,YAApB;EAEAD,UAAU,CAACE,OAAX,CAAmB,CAACC,MAAD,EAASC,CAAT,KAAe;IAChC;IACA,IAAID,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqB,KAArB,CAAJ,EAAiC;MAC/B;MACA,IAAIH,MAAM,CAACE,IAAP,CAAYC,QAAZ,CAAqB,GAArB,CAAJ,EAA+B;QAC7B;QACA,IAAIC,KAAK,CAACC,OAAN,CAAcT,MAAd,CAAJ,EAA2B;UACzBA,MAAM,GAAGL,mBAAmB,CAACK,MAAD,EAAST,MAAT,CAA5B,CADyB,CAGzB;QACD,CAJD,MAIO;UACL;UACA,IAAIa,MAAM,CAACM,IAAP,CAAYC,MAAhB,EAAwB;YACtBX,MAAM,CAACI,MAAM,CAACM,IAAR,CAAN,GAAsBf,mBAAmB,CACvCK,MAAM,CAACI,MAAM,CAACM,IAAR,CADiC,EAEvCnB,MAFuC,CAAzC;UAID,CAPI,CAQL;;;UACAS,MAAM,CAACK,CAAD,CAAN,GAAYV,mBAAmB,CAACK,MAAM,CAACK,CAAD,CAAP,EAAYd,MAAZ,CAA/B;QACD,CAhB4B,CAiB7B;;MACD,CAlBD,MAkBO,IAAI,OAAOS,MAAP,KAAkB,QAAtB,EAAgC;QACrC;QACA,IAAII,MAAM,CAACM,IAAP,CAAYC,MAAhB,EAAwB;UACtBX,MAAM,CAACI,MAAM,CAACM,IAAR,CAAN,GAAsBrB,cAAc,CAACW,MAAM,CAACI,MAAM,CAACM,IAAR,CAAP,EAAsBnB,MAAtB,CAApC;QACD,CAJoC,CAMrC;;;QACAS,MAAM,CAACK,CAAD,CAAN,GAAYhB,cAAc,CAACW,MAAM,CAACK,CAAD,CAAP,EAAYd,MAAZ,CAA1B;MACD,CARM,MAQA;QACLS,MAAM,GAAGX,cAAc,CAACW,MAAD,EAAST,MAAT,CAAvB;MACD;IACF;EACF,CAlCD;EAmCA,OAAOS,MAAP;AACD,CAvCD;;AAyCAY,MAAM,CAACC,OAAP,GAAiB;EACfd,OAAO,EAAEA;AADM,CAAjB"},"metadata":{},"sourceType":"script"}