{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file subscription.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar EventEmitter = require('eventemitter3');\n\nfunction Subscription(options) {\n  EventEmitter.call(this);\n  this.id = null;\n  this.callback = _.identity;\n  this.arguments = null;\n  this._reconnectIntervalId = null;\n  this.options = {\n    subscription: options.subscription,\n    type: options.type,\n    requestManager: options.requestManager\n  };\n} // INHERIT\n\n\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n/**\r\n * Should be used to extract callback from array of arguments. Modifies input param\r\n *\r\n * @method extractCallback\r\n * @param {Array} arguments\r\n * @return {Function|Null} callback, if exists\r\n */\n\nSubscription.prototype._extractCallback = function (args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\r\n * Should be called to check if the number of arguments is correct\r\n *\r\n * @method validateArgs\r\n * @param {Array} arguments\r\n * @throws {Error} if it is not\r\n */\n\n\nSubscription.prototype._validateArgs = function (args) {\n  var subscription = this.options.subscription;\n  if (!subscription) subscription = {};\n  if (!subscription.params) subscription.params = 0;\n\n  if (args.length !== subscription.params) {\n    throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);\n  }\n};\n/**\r\n * Should be called to format input args of method\r\n *\r\n * @method formatInput\r\n * @param {Array}\r\n * @return {Array}\r\n */\n\n\nSubscription.prototype._formatInput = function (args) {\n  var subscription = this.options.subscription;\n\n  if (!subscription) {\n    return args;\n  }\n\n  if (!subscription.inputFormatter) {\n    return args;\n  }\n\n  var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n    return formatter ? formatter(args[index]) : args[index];\n  });\n  return formattedArgs;\n};\n/**\r\n * Should be called to format output(result) of method\r\n *\r\n * @method formatOutput\r\n * @param {Object}\r\n * @return {Object}\r\n */\n\n\nSubscription.prototype._formatOutput = function (result) {\n  var subscription = this.options.subscription;\n  return subscription && subscription.outputFormatter && result ? subscription.outputFormatter(result) : result;\n};\n/**\r\n * Should create payload from given input args\r\n *\r\n * @method toPayload\r\n * @param {Array} args\r\n * @return {Object}\r\n */\n\n\nSubscription.prototype._toPayload = function (args) {\n  var params = [];\n  this.callback = this._extractCallback(args) || _.identity;\n\n  if (!this.subscriptionMethod) {\n    this.subscriptionMethod = args.shift(); // replace subscription with given name\n\n    if (this.options.subscription.subscriptionName) {\n      this.subscriptionMethod = this.options.subscription.subscriptionName;\n    }\n  }\n\n  if (!this.arguments) {\n    this.arguments = this._formatInput(args);\n\n    this._validateArgs(this.arguments);\n\n    args = []; // make empty after validation\n  } // re-add subscriptionName\n\n\n  params.push(this.subscriptionMethod);\n  params = params.concat(this.arguments);\n\n  if (args.length) {\n    throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n  }\n\n  return {\n    method: this.options.type + '_subscribe',\n    params: params\n  };\n};\n/**\r\n * Unsubscribes and clears callbacks\r\n *\r\n * @method unsubscribe\r\n * @return {Object}\r\n */\n\n\nSubscription.prototype.unsubscribe = function (callback) {\n  this.options.requestManager.removeSubscription(this.id, callback);\n  this.id = null;\n  this.removeAllListeners();\n  clearInterval(this._reconnectIntervalId);\n};\n/**\r\n * Subscribes and watches for changes\r\n *\r\n * @method subscribe\r\n * @param {String} subscription the subscription\r\n * @param {Object} options the options object with address topics and fromBlock\r\n * @return {Object}\r\n */\n\n\nSubscription.prototype.subscribe = function () {\n  var _this = this;\n\n  var args = Array.prototype.slice.call(arguments);\n\n  var payload = this._toPayload(args);\n\n  if (!payload) {\n    return this;\n  }\n\n  if (!this.options.requestManager.provider) {\n    var err1 = new Error('No provider set.');\n    this.callback(err1, null, this);\n    this.emit('error', err1);\n    return this;\n  } // throw error, if provider doesnt support subscriptions\n\n\n  if (!this.options.requestManager.provider.on) {\n    var err2 = new Error('The current provider doesn\\'t support subscriptions: ' + this.options.requestManager.provider.constructor.name);\n    this.callback(err2, null, this);\n    this.emit('error', err2);\n    return this;\n  } // if id is there unsubscribe first\n\n\n  if (this.id) {\n    this.unsubscribe();\n  } // store the params in the options object\n\n\n  this.options.params = payload.params[1]; // get past logs, if fromBlock is available\n\n  if (payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n    // send the subscription request\n    this.options.requestManager.send({\n      method: 'eth_getLogs',\n      params: [payload.params[1]]\n    }, function (err, logs) {\n      if (!err) {\n        logs.forEach(function (log) {\n          var output = _this._formatOutput(log);\n\n          _this.callback(null, output, _this);\n\n          _this.emit('data', output);\n        }); // TODO subscribe here? after the past logs?\n      } else {\n        _this.callback(err, null, _this);\n\n        _this.emit('error', err);\n      }\n    });\n  } // create subscription\n  // TODO move to separate function? so that past logs can go first?\n\n\n  if (typeof payload.params[1] === 'object') delete payload.params[1].fromBlock;\n  this.options.requestManager.send(payload, function (err, result) {\n    if (!err && result) {\n      _this.id = result; // call callback on notifications\n\n      _this.options.requestManager.addSubscription(_this.id, payload.params[0], _this.options.type, function (err, result) {\n        if (!err) {\n          if (!_.isArray(result)) {\n            result = [result];\n          }\n\n          result.forEach(function (resultItem) {\n            var output = _this._formatOutput(resultItem);\n\n            if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n              return _this.options.subscription.subscriptionHandler.call(_this, output);\n            } else {\n              _this.emit('data', output);\n            } // call the callback, last so that unsubscribe there won't affect the emit above\n\n\n            _this.callback(null, output, _this);\n          });\n        } else {\n          // unsubscribe, but keep listeners\n          _this.options.requestManager.removeSubscription(_this.id); // re-subscribe, if connection fails\n\n\n          if (_this.options.requestManager.provider.once) {\n            _this._reconnectIntervalId = setInterval(function () {\n              // TODO check if that makes sense!\n              if (_this.options.requestManager.provider.reconnect) {\n                _this.options.requestManager.provider.reconnect();\n              }\n            }, 500);\n\n            _this.options.requestManager.provider.once('connect', function () {\n              clearInterval(_this._reconnectIntervalId);\n\n              _this.subscribe(_this.callback);\n            });\n          }\n\n          _this.emit('error', err); // call the callback, last so that unsubscribe there won't affect the emit above\n\n\n          _this.callback(err, null, _this);\n        }\n      });\n    } else {\n      _this.callback(err, null, _this);\n\n      _this.emit('error', err);\n    }\n  }); // return an object to cancel the subscription\n\n  return this;\n};\n\nmodule.exports = Subscription;","map":{"version":3,"names":["_","require","errors","EventEmitter","Subscription","options","call","id","callback","identity","arguments","_reconnectIntervalId","subscription","type","requestManager","prototype","Object","create","constructor","_extractCallback","args","isFunction","length","pop","_validateArgs","params","InvalidNumberOfParams","_formatInput","inputFormatter","formattedArgs","map","formatter","index","_formatOutput","result","outputFormatter","_toPayload","subscriptionMethod","shift","subscriptionName","push","concat","Error","method","unsubscribe","removeSubscription","removeAllListeners","clearInterval","subscribe","_this","Array","slice","payload","provider","err1","emit","on","err2","name","isObject","hasOwnProperty","isFinite","fromBlock","send","err","logs","forEach","log","output","addSubscription","isArray","resultItem","subscriptionHandler","once","setInterval","reconnect","module","exports"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/truffle-contract/node_modules/web3-core-subscriptions/src/subscription.js"],"sourcesContent":["/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/**\r\n * @file subscription.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\n\"use strict\";\r\n\r\nvar _ = require('underscore');\r\nvar errors = require('web3-core-helpers').errors;\r\nvar EventEmitter = require('eventemitter3');\r\n\r\nfunction Subscription(options) {\r\n    EventEmitter.call(this);\r\n\r\n    this.id = null;\r\n    this.callback = _.identity;\r\n    this.arguments = null;\r\n    this._reconnectIntervalId = null;\r\n\r\n    this.options = {\r\n        subscription: options.subscription,\r\n        type: options.type,\r\n        requestManager: options.requestManager\r\n    };\r\n}\r\n\r\n// INHERIT\r\nSubscription.prototype = Object.create(EventEmitter.prototype);\r\nSubscription.prototype.constructor = Subscription;\r\n\r\n\r\n/**\r\n * Should be used to extract callback from array of arguments. Modifies input param\r\n *\r\n * @method extractCallback\r\n * @param {Array} arguments\r\n * @return {Function|Null} callback, if exists\r\n */\r\n\r\nSubscription.prototype._extractCallback = function (args) {\r\n    if (_.isFunction(args[args.length - 1])) {\r\n        return args.pop(); // modify the args array!\r\n    }\r\n};\r\n\r\n/**\r\n * Should be called to check if the number of arguments is correct\r\n *\r\n * @method validateArgs\r\n * @param {Array} arguments\r\n * @throws {Error} if it is not\r\n */\r\n\r\nSubscription.prototype._validateArgs = function (args) {\r\n    var subscription = this.options.subscription;\r\n\r\n    if(!subscription)\r\n        subscription = {};\r\n\r\n    if(!subscription.params)\r\n        subscription.params = 0;\r\n\r\n    if (args.length !== subscription.params) {\r\n        throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);\r\n    }\r\n};\r\n\r\n/**\r\n * Should be called to format input args of method\r\n *\r\n * @method formatInput\r\n * @param {Array}\r\n * @return {Array}\r\n */\r\n\r\nSubscription.prototype._formatInput = function (args) {\r\n    var subscription = this.options.subscription;\r\n\r\n    if (!subscription) {\r\n        return args;\r\n    }\r\n\r\n    if (!subscription.inputFormatter) {\r\n        return args;\r\n    }\r\n\r\n    var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\r\n        return formatter ? formatter(args[index]) : args[index];\r\n    });\r\n\r\n    return formattedArgs;\r\n};\r\n\r\n/**\r\n * Should be called to format output(result) of method\r\n *\r\n * @method formatOutput\r\n * @param {Object}\r\n * @return {Object}\r\n */\r\n\r\nSubscription.prototype._formatOutput = function (result) {\r\n    var subscription = this.options.subscription;\r\n\r\n    return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;\r\n};\r\n\r\n/**\r\n * Should create payload from given input args\r\n *\r\n * @method toPayload\r\n * @param {Array} args\r\n * @return {Object}\r\n */\r\nSubscription.prototype._toPayload = function (args) {\r\n    var params = [];\r\n    this.callback = this._extractCallback(args) || _.identity;\r\n\r\n    if (!this.subscriptionMethod) {\r\n        this.subscriptionMethod = args.shift();\r\n\r\n        // replace subscription with given name\r\n        if (this.options.subscription.subscriptionName) {\r\n            this.subscriptionMethod = this.options.subscription.subscriptionName;\r\n        }\r\n    }\r\n\r\n    if (!this.arguments) {\r\n        this.arguments = this._formatInput(args);\r\n        this._validateArgs(this.arguments);\r\n        args = []; // make empty after validation\r\n\r\n    }\r\n\r\n    // re-add subscriptionName\r\n    params.push(this.subscriptionMethod);\r\n    params = params.concat(this.arguments);\r\n\r\n\r\n    if (args.length) {\r\n        throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\r\n    }\r\n\r\n    return {\r\n        method: this.options.type + '_subscribe',\r\n        params: params\r\n    };\r\n};\r\n\r\n/**\r\n * Unsubscribes and clears callbacks\r\n *\r\n * @method unsubscribe\r\n * @return {Object}\r\n */\r\nSubscription.prototype.unsubscribe = function(callback) {\r\n    this.options.requestManager.removeSubscription(this.id, callback);\r\n    this.id = null;\r\n    this.removeAllListeners();\r\n    clearInterval(this._reconnectIntervalId);\r\n};\r\n\r\n/**\r\n * Subscribes and watches for changes\r\n *\r\n * @method subscribe\r\n * @param {String} subscription the subscription\r\n * @param {Object} options the options object with address topics and fromBlock\r\n * @return {Object}\r\n */\r\nSubscription.prototype.subscribe = function() {\r\n    var _this = this;\r\n    var args = Array.prototype.slice.call(arguments);\r\n    var payload = this._toPayload(args);\r\n\r\n    if(!payload) {\r\n        return this;\r\n    }\r\n\r\n    if(!this.options.requestManager.provider) {\r\n        var err1 = new Error('No provider set.');\r\n        this.callback(err1, null, this);\r\n        this.emit('error', err1);\r\n        return this;\r\n    }\r\n\r\n    // throw error, if provider doesnt support subscriptions\r\n    if(!this.options.requestManager.provider.on) {\r\n        var err2 = new Error('The current provider doesn\\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);\r\n        this.callback(err2, null, this);\r\n        this.emit('error', err2);\r\n        return this;\r\n    }\r\n\r\n    // if id is there unsubscribe first\r\n    if (this.id) {\r\n        this.unsubscribe();\r\n    }\r\n\r\n    // store the params in the options object\r\n    this.options.params = payload.params[1];\r\n\r\n    // get past logs, if fromBlock is available\r\n    if(payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\r\n        // send the subscription request\r\n        this.options.requestManager.send({\r\n            method: 'eth_getLogs',\r\n            params: [payload.params[1]]\r\n        }, function (err, logs) {\r\n            if(!err) {\r\n                logs.forEach(function(log){\r\n                    var output = _this._formatOutput(log);\r\n                    _this.callback(null, output, _this);\r\n                    _this.emit('data', output);\r\n                });\r\n\r\n                // TODO subscribe here? after the past logs?\r\n\r\n            } else {\r\n                _this.callback(err, null, _this);\r\n                _this.emit('error', err);\r\n            }\r\n        });\r\n    }\r\n\r\n    // create subscription\r\n    // TODO move to separate function? so that past logs can go first?\r\n\r\n    if(typeof payload.params[1] === 'object')\r\n        delete payload.params[1].fromBlock;\r\n\r\n    this.options.requestManager.send(payload, function (err, result) {\r\n        if(!err && result) {\r\n            _this.id = result;\r\n\r\n            // call callback on notifications\r\n            _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {\r\n\r\n                if (!err) {\r\n                    if (!_.isArray(result)) {\r\n                        result = [result];\r\n                    }\r\n\r\n                    result.forEach(function(resultItem) {\r\n                        var output = _this._formatOutput(resultItem);\r\n\r\n                        if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\r\n                            return _this.options.subscription.subscriptionHandler.call(_this, output);\r\n                        } else {\r\n                            _this.emit('data', output);\r\n                        }\r\n\r\n                        // call the callback, last so that unsubscribe there won't affect the emit above\r\n                        _this.callback(null, output, _this);\r\n                    });\r\n                } else {\r\n                    // unsubscribe, but keep listeners\r\n                    _this.options.requestManager.removeSubscription(_this.id);\r\n\r\n                    // re-subscribe, if connection fails\r\n                    if(_this.options.requestManager.provider.once) {\r\n                        _this._reconnectIntervalId = setInterval(function () {\r\n                            // TODO check if that makes sense!\r\n                            if (_this.options.requestManager.provider.reconnect) {\r\n                                _this.options.requestManager.provider.reconnect();\r\n                            }\r\n                        }, 500);\r\n\r\n                        _this.options.requestManager.provider.once('connect', function () {\r\n                            clearInterval(_this._reconnectIntervalId);\r\n                            _this.subscribe(_this.callback);\r\n                        });\r\n                    }\r\n                    _this.emit('error', err);\r\n\r\n                     // call the callback, last so that unsubscribe there won't affect the emit above\r\n                    _this.callback(err, null, _this);\r\n                }\r\n            });\r\n        } else {\r\n          _this.callback(err, null, _this);\r\n          _this.emit('error', err);\r\n        }\r\n    });\r\n\r\n    // return an object to cancel the subscription\r\n    return this;\r\n};\r\n\r\nmodule.exports = Subscription;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BC,MAA1C;;AACA,IAAIC,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AAEA,SAASG,YAAT,CAAsBC,OAAtB,EAA+B;EAC3BF,YAAY,CAACG,IAAb,CAAkB,IAAlB;EAEA,KAAKC,EAAL,GAAU,IAAV;EACA,KAAKC,QAAL,GAAgBR,CAAC,CAACS,QAAlB;EACA,KAAKC,SAAL,GAAiB,IAAjB;EACA,KAAKC,oBAAL,GAA4B,IAA5B;EAEA,KAAKN,OAAL,GAAe;IACXO,YAAY,EAAEP,OAAO,CAACO,YADX;IAEXC,IAAI,EAAER,OAAO,CAACQ,IAFH;IAGXC,cAAc,EAAET,OAAO,CAACS;EAHb,CAAf;AAKH,C,CAED;;;AACAV,YAAY,CAACW,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcd,YAAY,CAACY,SAA3B,CAAzB;AACAX,YAAY,CAACW,SAAb,CAAuBG,WAAvB,GAAqCd,YAArC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,YAAY,CAACW,SAAb,CAAuBI,gBAAvB,GAA0C,UAAUC,IAAV,EAAgB;EACtD,IAAIpB,CAAC,CAACqB,UAAF,CAAaD,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAAjB,CAAJ,EAAyC;IACrC,OAAOF,IAAI,CAACG,GAAL,EAAP,CADqC,CAClB;EACtB;AACJ,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAnB,YAAY,CAACW,SAAb,CAAuBS,aAAvB,GAAuC,UAAUJ,IAAV,EAAgB;EACnD,IAAIR,YAAY,GAAG,KAAKP,OAAL,CAAaO,YAAhC;EAEA,IAAG,CAACA,YAAJ,EACIA,YAAY,GAAG,EAAf;EAEJ,IAAG,CAACA,YAAY,CAACa,MAAjB,EACIb,YAAY,CAACa,MAAb,GAAsB,CAAtB;;EAEJ,IAAIL,IAAI,CAACE,MAAL,KAAgBV,YAAY,CAACa,MAAjC,EAAyC;IACrC,MAAMvB,MAAM,CAACwB,qBAAP,CAA6BN,IAAI,CAACE,MAAlC,EAA0CV,YAAY,CAACa,MAAb,GAAsB,CAAhE,EAAmEL,IAAI,CAAC,CAAD,CAAvE,CAAN;EACH;AACJ,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,YAAY,CAACW,SAAb,CAAuBY,YAAvB,GAAsC,UAAUP,IAAV,EAAgB;EAClD,IAAIR,YAAY,GAAG,KAAKP,OAAL,CAAaO,YAAhC;;EAEA,IAAI,CAACA,YAAL,EAAmB;IACf,OAAOQ,IAAP;EACH;;EAED,IAAI,CAACR,YAAY,CAACgB,cAAlB,EAAkC;IAC9B,OAAOR,IAAP;EACH;;EAED,IAAIS,aAAa,GAAGjB,YAAY,CAACgB,cAAb,CAA4BE,GAA5B,CAAgC,UAAUC,SAAV,EAAqBC,KAArB,EAA4B;IAC5E,OAAOD,SAAS,GAAGA,SAAS,CAACX,IAAI,CAACY,KAAD,CAAL,CAAZ,GAA4BZ,IAAI,CAACY,KAAD,CAAhD;EACH,CAFmB,CAApB;EAIA,OAAOH,aAAP;AACH,CAhBD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAzB,YAAY,CAACW,SAAb,CAAuBkB,aAAvB,GAAuC,UAAUC,MAAV,EAAkB;EACrD,IAAItB,YAAY,GAAG,KAAKP,OAAL,CAAaO,YAAhC;EAEA,OAAQA,YAAY,IAAIA,YAAY,CAACuB,eAA7B,IAAgDD,MAAjD,GAA2DtB,YAAY,CAACuB,eAAb,CAA6BD,MAA7B,CAA3D,GAAkGA,MAAzG;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9B,YAAY,CAACW,SAAb,CAAuBqB,UAAvB,GAAoC,UAAUhB,IAAV,EAAgB;EAChD,IAAIK,MAAM,GAAG,EAAb;EACA,KAAKjB,QAAL,GAAgB,KAAKW,gBAAL,CAAsBC,IAAtB,KAA+BpB,CAAC,CAACS,QAAjD;;EAEA,IAAI,CAAC,KAAK4B,kBAAV,EAA8B;IAC1B,KAAKA,kBAAL,GAA0BjB,IAAI,CAACkB,KAAL,EAA1B,CAD0B,CAG1B;;IACA,IAAI,KAAKjC,OAAL,CAAaO,YAAb,CAA0B2B,gBAA9B,EAAgD;MAC5C,KAAKF,kBAAL,GAA0B,KAAKhC,OAAL,CAAaO,YAAb,CAA0B2B,gBAApD;IACH;EACJ;;EAED,IAAI,CAAC,KAAK7B,SAAV,EAAqB;IACjB,KAAKA,SAAL,GAAiB,KAAKiB,YAAL,CAAkBP,IAAlB,CAAjB;;IACA,KAAKI,aAAL,CAAmB,KAAKd,SAAxB;;IACAU,IAAI,GAAG,EAAP,CAHiB,CAGN;EAEd,CAlB+C,CAoBhD;;;EACAK,MAAM,CAACe,IAAP,CAAY,KAAKH,kBAAjB;EACAZ,MAAM,GAAGA,MAAM,CAACgB,MAAP,CAAc,KAAK/B,SAAnB,CAAT;;EAGA,IAAIU,IAAI,CAACE,MAAT,EAAiB;IACb,MAAM,IAAIoB,KAAJ,CAAU,kFAAV,CAAN;EACH;;EAED,OAAO;IACHC,MAAM,EAAE,KAAKtC,OAAL,CAAaQ,IAAb,GAAoB,YADzB;IAEHY,MAAM,EAAEA;EAFL,CAAP;AAIH,CAjCD;AAmCA;AACA;AACA;AACA;AACA;AACA;;;AACArB,YAAY,CAACW,SAAb,CAAuB6B,WAAvB,GAAqC,UAASpC,QAAT,EAAmB;EACpD,KAAKH,OAAL,CAAaS,cAAb,CAA4B+B,kBAA5B,CAA+C,KAAKtC,EAApD,EAAwDC,QAAxD;EACA,KAAKD,EAAL,GAAU,IAAV;EACA,KAAKuC,kBAAL;EACAC,aAAa,CAAC,KAAKpC,oBAAN,CAAb;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,YAAY,CAACW,SAAb,CAAuBiC,SAAvB,GAAmC,YAAW;EAC1C,IAAIC,KAAK,GAAG,IAAZ;;EACA,IAAI7B,IAAI,GAAG8B,KAAK,CAACnC,SAAN,CAAgBoC,KAAhB,CAAsB7C,IAAtB,CAA2BI,SAA3B,CAAX;;EACA,IAAI0C,OAAO,GAAG,KAAKhB,UAAL,CAAgBhB,IAAhB,CAAd;;EAEA,IAAG,CAACgC,OAAJ,EAAa;IACT,OAAO,IAAP;EACH;;EAED,IAAG,CAAC,KAAK/C,OAAL,CAAaS,cAAb,CAA4BuC,QAAhC,EAA0C;IACtC,IAAIC,IAAI,GAAG,IAAIZ,KAAJ,CAAU,kBAAV,CAAX;IACA,KAAKlC,QAAL,CAAc8C,IAAd,EAAoB,IAApB,EAA0B,IAA1B;IACA,KAAKC,IAAL,CAAU,OAAV,EAAmBD,IAAnB;IACA,OAAO,IAAP;EACH,CAdyC,CAgB1C;;;EACA,IAAG,CAAC,KAAKjD,OAAL,CAAaS,cAAb,CAA4BuC,QAA5B,CAAqCG,EAAzC,EAA6C;IACzC,IAAIC,IAAI,GAAG,IAAIf,KAAJ,CAAU,0DAAyD,KAAKrC,OAAL,CAAaS,cAAb,CAA4BuC,QAA5B,CAAqCnC,WAArC,CAAiDwC,IAApH,CAAX;IACA,KAAKlD,QAAL,CAAciD,IAAd,EAAoB,IAApB,EAA0B,IAA1B;IACA,KAAKF,IAAL,CAAU,OAAV,EAAmBE,IAAnB;IACA,OAAO,IAAP;EACH,CAtByC,CAwB1C;;;EACA,IAAI,KAAKlD,EAAT,EAAa;IACT,KAAKqC,WAAL;EACH,CA3ByC,CA6B1C;;;EACA,KAAKvC,OAAL,CAAaoB,MAAb,GAAsB2B,OAAO,CAAC3B,MAAR,CAAe,CAAf,CAAtB,CA9B0C,CAgC1C;;EACA,IAAG2B,OAAO,CAAC3B,MAAR,CAAe,CAAf,MAAsB,MAAtB,IAAgCzB,CAAC,CAAC2D,QAAF,CAAWP,OAAO,CAAC3B,MAAR,CAAe,CAAf,CAAX,CAAhC,IAAiE2B,OAAO,CAAC3B,MAAR,CAAe,CAAf,EAAkBmC,cAAlB,CAAiC,WAAjC,CAAjE,IAAkHC,QAAQ,CAACT,OAAO,CAAC3B,MAAR,CAAe,CAAf,EAAkBqC,SAAnB,CAA7H,EAA4J;IACxJ;IACA,KAAKzD,OAAL,CAAaS,cAAb,CAA4BiD,IAA5B,CAAiC;MAC7BpB,MAAM,EAAE,aADqB;MAE7BlB,MAAM,EAAE,CAAC2B,OAAO,CAAC3B,MAAR,CAAe,CAAf,CAAD;IAFqB,CAAjC,EAGG,UAAUuC,GAAV,EAAeC,IAAf,EAAqB;MACpB,IAAG,CAACD,GAAJ,EAAS;QACLC,IAAI,CAACC,OAAL,CAAa,UAASC,GAAT,EAAa;UACtB,IAAIC,MAAM,GAAGnB,KAAK,CAAChB,aAAN,CAAoBkC,GAApB,CAAb;;UACAlB,KAAK,CAACzC,QAAN,CAAe,IAAf,EAAqB4D,MAArB,EAA6BnB,KAA7B;;UACAA,KAAK,CAACM,IAAN,CAAW,MAAX,EAAmBa,MAAnB;QACH,CAJD,EADK,CAOL;MAEH,CATD,MASO;QACHnB,KAAK,CAACzC,QAAN,CAAewD,GAAf,EAAoB,IAApB,EAA0Bf,KAA1B;;QACAA,KAAK,CAACM,IAAN,CAAW,OAAX,EAAoBS,GAApB;MACH;IACJ,CAjBD;EAkBH,CArDyC,CAuD1C;EACA;;;EAEA,IAAG,OAAOZ,OAAO,CAAC3B,MAAR,CAAe,CAAf,CAAP,KAA6B,QAAhC,EACI,OAAO2B,OAAO,CAAC3B,MAAR,CAAe,CAAf,EAAkBqC,SAAzB;EAEJ,KAAKzD,OAAL,CAAaS,cAAb,CAA4BiD,IAA5B,CAAiCX,OAAjC,EAA0C,UAAUY,GAAV,EAAe9B,MAAf,EAAuB;IAC7D,IAAG,CAAC8B,GAAD,IAAQ9B,MAAX,EAAmB;MACfe,KAAK,CAAC1C,EAAN,GAAW2B,MAAX,CADe,CAGf;;MACAe,KAAK,CAAC5C,OAAN,CAAcS,cAAd,CAA6BuD,eAA7B,CAA6CpB,KAAK,CAAC1C,EAAnD,EAAuD6C,OAAO,CAAC3B,MAAR,CAAe,CAAf,CAAvD,EAA2EwB,KAAK,CAAC5C,OAAN,CAAcQ,IAAzF,EAA+F,UAASmD,GAAT,EAAc9B,MAAd,EAAsB;QAEjH,IAAI,CAAC8B,GAAL,EAAU;UACN,IAAI,CAAChE,CAAC,CAACsE,OAAF,CAAUpC,MAAV,CAAL,EAAwB;YACpBA,MAAM,GAAG,CAACA,MAAD,CAAT;UACH;;UAEDA,MAAM,CAACgC,OAAP,CAAe,UAASK,UAAT,EAAqB;YAChC,IAAIH,MAAM,GAAGnB,KAAK,CAAChB,aAAN,CAAoBsC,UAApB,CAAb;;YAEA,IAAIvE,CAAC,CAACqB,UAAF,CAAa4B,KAAK,CAAC5C,OAAN,CAAcO,YAAd,CAA2B4D,mBAAxC,CAAJ,EAAkE;cAC9D,OAAOvB,KAAK,CAAC5C,OAAN,CAAcO,YAAd,CAA2B4D,mBAA3B,CAA+ClE,IAA/C,CAAoD2C,KAApD,EAA2DmB,MAA3D,CAAP;YACH,CAFD,MAEO;cACHnB,KAAK,CAACM,IAAN,CAAW,MAAX,EAAmBa,MAAnB;YACH,CAP+B,CAShC;;;YACAnB,KAAK,CAACzC,QAAN,CAAe,IAAf,EAAqB4D,MAArB,EAA6BnB,KAA7B;UACH,CAXD;QAYH,CAjBD,MAiBO;UACH;UACAA,KAAK,CAAC5C,OAAN,CAAcS,cAAd,CAA6B+B,kBAA7B,CAAgDI,KAAK,CAAC1C,EAAtD,EAFG,CAIH;;;UACA,IAAG0C,KAAK,CAAC5C,OAAN,CAAcS,cAAd,CAA6BuC,QAA7B,CAAsCoB,IAAzC,EAA+C;YAC3CxB,KAAK,CAACtC,oBAAN,GAA6B+D,WAAW,CAAC,YAAY;cACjD;cACA,IAAIzB,KAAK,CAAC5C,OAAN,CAAcS,cAAd,CAA6BuC,QAA7B,CAAsCsB,SAA1C,EAAqD;gBACjD1B,KAAK,CAAC5C,OAAN,CAAcS,cAAd,CAA6BuC,QAA7B,CAAsCsB,SAAtC;cACH;YACJ,CALuC,EAKrC,GALqC,CAAxC;;YAOA1B,KAAK,CAAC5C,OAAN,CAAcS,cAAd,CAA6BuC,QAA7B,CAAsCoB,IAAtC,CAA2C,SAA3C,EAAsD,YAAY;cAC9D1B,aAAa,CAACE,KAAK,CAACtC,oBAAP,CAAb;;cACAsC,KAAK,CAACD,SAAN,CAAgBC,KAAK,CAACzC,QAAtB;YACH,CAHD;UAIH;;UACDyC,KAAK,CAACM,IAAN,CAAW,OAAX,EAAoBS,GAApB,EAlBG,CAoBF;;;UACDf,KAAK,CAACzC,QAAN,CAAewD,GAAf,EAAoB,IAApB,EAA0Bf,KAA1B;QACH;MACJ,CA1CD;IA2CH,CA/CD,MA+CO;MACLA,KAAK,CAACzC,QAAN,CAAewD,GAAf,EAAoB,IAApB,EAA0Bf,KAA1B;;MACAA,KAAK,CAACM,IAAN,CAAW,OAAX,EAAoBS,GAApB;IACD;EACJ,CApDD,EA7D0C,CAmH1C;;EACA,OAAO,IAAP;AACH,CArHD;;AAuHAY,MAAM,CAACC,OAAP,GAAiBzE,YAAjB"},"metadata":{},"sourceType":"script"}