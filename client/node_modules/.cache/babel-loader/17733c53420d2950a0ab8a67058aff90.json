{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _objectSpread = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"/home/ubuntu/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar objectToCamelWithMetadata = require('../lib/object-to-camel-with-metadata.js');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar createLs = configure.configure(function (api) {\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          result,\n          _iterator2,\n          _step2,\n          entry,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (path) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('ipfs.files.ls requires a path');\n\n            case 3:\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams.toUrlSearchParams(_objectSpread(_objectSpread({\n                  arg: cid.CID.asCID(path) ? \"/ipfs/\".concat(path) : path,\n                  long: true\n                }, options), {}, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 12:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 39;\n                break;\n              }\n\n              result = _step.value;\n\n              if (!('Entries' in result)) {\n                _context.next = 34;\n                break;\n              }\n\n              _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n              _context.prev = 16;\n\n              _iterator2.s();\n\n            case 18:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 24;\n                break;\n              }\n\n              entry = _step2.value;\n              _context.next = 22;\n              return toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(entry));\n\n            case 22:\n              _context.next = 18;\n              break;\n\n            case 24:\n              _context.next = 29;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](16);\n\n              _iterator2.e(_context.t0);\n\n            case 29:\n              _context.prev = 29;\n\n              _iterator2.f();\n\n              return _context.finish(29);\n\n            case 32:\n              _context.next = 36;\n              break;\n\n            case 34:\n              _context.next = 36;\n              return toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(result));\n\n            case 36:\n              _iteratorAbruptCompletion = false;\n              _context.next = 10;\n              break;\n\n            case 39:\n              _context.next = 45;\n              break;\n\n            case 41:\n              _context.prev = 41;\n              _context.t1 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 45:\n              _context.prev = 45;\n              _context.prev = 46;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 50;\n                break;\n              }\n\n              _context.next = 50;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 50:\n              _context.prev = 50;\n\n              if (!_didIteratorError) {\n                _context.next = 53;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 53:\n              return _context.finish(50);\n\n            case 54:\n              return _context.finish(45);\n\n            case 55:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 41, 45, 55], [16, 26, 29, 32], [46,, 50, 54]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = cid.CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}\n\nexports.createLs = createLs;","map":{"version":3,"names":["Object","defineProperty","exports","value","cid","require","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","path","options","Error","post","signal","searchParams","arg","CID","asCID","long","stream","headers","res","ndjson","result","Entries","entry","toCoreInterface","hash","parse","type"],"sources":["/home/ubuntu/SafetyManagement_UI/client/node_modules/ipfs-http-client/cjs/src/files/ls.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar objectToCamelWithMetadata = require('../lib/object-to-camel-with-metadata.js');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createLs = configure.configure(api => {\n  async function* ls(path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.CID.asCID(path) ? `/ipfs/${ path }` : path,\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(result));\n      }\n    }\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = cid.CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}\n\nexports.createLs = createLs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}