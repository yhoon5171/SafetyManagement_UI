{"ast":null,"code":"/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\nvar multiC = require('multicodec');\n\nvar _require = require('./profiles'),\n    hexStringToBuffer = _require.hexStringToBuffer,\n    profiles = _require.profiles;\n\nvar _require2 = require('./helpers'),\n    cidV0ToV1Base32 = _require2.cidV0ToV1Base32;\n\nmodule.exports = {\n  //export some helpers functions\n  helpers: {\n    cidV0ToV1Base32: cidV0ToV1Base32\n  },\n\n  /**\n  * Decode a Content Hash.\n  * @param {string} hash an hex string containing a content hash\n  * @return {string} the decoded content\n  */\n  decode: function decode(contentHash) {\n    var buffer = hexStringToBuffer(contentHash);\n    var codec = multiC.getCodec(buffer);\n    var value = multiC.rmPrefix(buffer);\n    var profile = profiles[codec];\n    if (!profile) profile = profiles['default'];\n    return profile.decode(value);\n  },\n\n  /**\n  * Encode an IPFS address into a content hash\n  * @param {string} ipfsHash string containing an IPFS address\n  * @return {string} the resulting content hash\n  */\n  fromIpfs: function fromIpfs(ipfsHash) {\n    return this.encode('ipfs-ns', ipfsHash);\n  },\n\n  /**\n  * Encode a Swarm address into a content hash\n  * @param {string} swarmHash string containing a Swarm address\n  * @return {string} the resulting content hash\n  */\n  fromSwarm: function fromSwarm(swarmHash) {\n    return this.encode('swarm-ns', swarmHash);\n  },\n\n  /**\n  * General purpose encoding function\n   * @param {string} codec \n   * @param {string} value \n   */\n  encode: function encode(codec, value) {\n    var profile = profiles[codec];\n    if (!profile) profile = profiles['default'];\n    var encodedValue = profile.encode(value);\n    return multiC.addPrefix(codec, encodedValue).toString('hex');\n  },\n\n  /**\n  * Extract the codec of a content hash\n  * @param {string} hash hex string containing a content hash\n  * @return {string} the extracted codec\n  */\n  getCodec: function getCodec(hash) {\n    var buffer = hexStringToBuffer(hash);\n    return multiC.getCodec(buffer);\n  }\n};","map":{"version":3,"names":["multiC","require","hexStringToBuffer","profiles","cidV0ToV1Base32","module","exports","helpers","decode","contentHash","buffer","codec","getCodec","value","rmPrefix","profile","fromIpfs","ipfsHash","encode","fromSwarm","swarmHash","encodedValue","addPrefix","toString","hash"],"sources":["/home/ubuntu/SafetyManagement_UI/client/node_modules/content-hash/src/index.js"],"sourcesContent":["/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nconst multiC = require('multicodec');\n\nconst { hexStringToBuffer, profiles } = require('./profiles');\nconst { cidV0ToV1Base32 } = require('./helpers');\n\nmodule.exports = {\n\n\t//export some helpers functions\n\thelpers: {\n\t\tcidV0ToV1Base32,\n\t},\n\n\t/**\n\t* Decode a Content Hash.\n\t* @param {string} hash an hex string containing a content hash\n\t* @return {string} the decoded content\n\t*/\n\tdecode: function (contentHash) {\n\t\tconst buffer = hexStringToBuffer(contentHash);\n\t\tconst codec = multiC.getCodec(buffer);\n\t\tconst value = multiC.rmPrefix(buffer);\n\t\tlet profile = profiles[codec];\n\t\tif (!profile) profile = profiles['default'];\n\t\treturn profile.decode(value);\n\t},\n\n\t/**\n\t* Encode an IPFS address into a content hash\n\t* @param {string} ipfsHash string containing an IPFS address\n\t* @return {string} the resulting content hash\n\t*/\n\tfromIpfs: function (ipfsHash) {\n\t\treturn this.encode('ipfs-ns', ipfsHash);\n\t},\n\n\t/**\n\t* Encode a Swarm address into a content hash\n\t* @param {string} swarmHash string containing a Swarm address\n\t* @return {string} the resulting content hash\n\t*/\n\tfromSwarm: function (swarmHash) {\n\t\treturn this.encode('swarm-ns', swarmHash);\n\t},\n\n\t/**\n\t* General purpose encoding function\n  * @param {string} codec \n  * @param {string} value \n  */\n\tencode: function (codec, value) {\n\t\tlet profile = profiles[codec];\n\t\tif (!profile) profile = profiles['default'];\n\t\tconst encodedValue = profile.encode(value);\n\t\treturn multiC.addPrefix(codec, encodedValue).toString('hex');\n\t},\n\n\t/**\n\t* Extract the codec of a content hash\n\t* @param {string} hash hex string containing a content hash\n\t* @return {string} the extracted codec\n\t*/\n\tgetCodec: function (hash) {\n\t\tlet buffer = hexStringToBuffer(hash);\n\t\treturn multiC.getCodec(buffer);\n\t},\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEA,eAAwCA,OAAO,CAAC,YAAD,CAA/C;AAAA,IAAQC,iBAAR,YAAQA,iBAAR;AAAA,IAA2BC,QAA3B,YAA2BA,QAA3B;;AACA,gBAA4BF,OAAO,CAAC,WAAD,CAAnC;AAAA,IAAQG,eAAR,aAAQA,eAAR;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EAEhB;EACAC,OAAO,EAAE;IACRH,eAAe,EAAfA;EADQ,CAHO;;EAOhB;AACD;AACA;AACA;AACA;EACCI,MAAM,EAAE,gBAAUC,WAAV,EAAuB;IAC9B,IAAMC,MAAM,GAAGR,iBAAiB,CAACO,WAAD,CAAhC;IACA,IAAME,KAAK,GAAGX,MAAM,CAACY,QAAP,CAAgBF,MAAhB,CAAd;IACA,IAAMG,KAAK,GAAGb,MAAM,CAACc,QAAP,CAAgBJ,MAAhB,CAAd;IACA,IAAIK,OAAO,GAAGZ,QAAQ,CAACQ,KAAD,CAAtB;IACA,IAAI,CAACI,OAAL,EAAcA,OAAO,GAAGZ,QAAQ,CAAC,SAAD,CAAlB;IACd,OAAOY,OAAO,CAACP,MAAR,CAAeK,KAAf,CAAP;EACA,CAnBe;;EAqBhB;AACD;AACA;AACA;AACA;EACCG,QAAQ,EAAE,kBAAUC,QAAV,EAAoB;IAC7B,OAAO,KAAKC,MAAL,CAAY,SAAZ,EAAuBD,QAAvB,CAAP;EACA,CA5Be;;EA8BhB;AACD;AACA;AACA;AACA;EACCE,SAAS,EAAE,mBAAUC,SAAV,EAAqB;IAC/B,OAAO,KAAKF,MAAL,CAAY,UAAZ,EAAwBE,SAAxB,CAAP;EACA,CArCe;;EAuChB;AACD;AACA;AACA;AACA;EACCF,MAAM,EAAE,gBAAUP,KAAV,EAAiBE,KAAjB,EAAwB;IAC/B,IAAIE,OAAO,GAAGZ,QAAQ,CAACQ,KAAD,CAAtB;IACA,IAAI,CAACI,OAAL,EAAcA,OAAO,GAAGZ,QAAQ,CAAC,SAAD,CAAlB;IACd,IAAMkB,YAAY,GAAGN,OAAO,CAACG,MAAR,CAAeL,KAAf,CAArB;IACA,OAAOb,MAAM,CAACsB,SAAP,CAAiBX,KAAjB,EAAwBU,YAAxB,EAAsCE,QAAtC,CAA+C,KAA/C,CAAP;EACA,CAjDe;;EAmDhB;AACD;AACA;AACA;AACA;EACCX,QAAQ,EAAE,kBAAUY,IAAV,EAAgB;IACzB,IAAId,MAAM,GAAGR,iBAAiB,CAACsB,IAAD,CAA9B;IACA,OAAOxB,MAAM,CAACY,QAAP,CAAgBF,MAAhB,CAAP;EACA;AA3De,CAAjB"},"metadata":{},"sourceType":"script"}