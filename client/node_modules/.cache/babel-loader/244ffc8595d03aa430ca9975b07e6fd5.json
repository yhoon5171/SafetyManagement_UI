{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\n\nvar internal_1 = require(\"./internal\");\n/**\r\n * Throws if a string is not hex prefixed\r\n * @param {string} input string to check hex prefix of\r\n */\n\n\nvar assertIsHexString = function (input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    var msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsHexString = assertIsHexString;\n/**\r\n * Throws if input is not a buffer\r\n * @param {Buffer} input value to check\r\n */\n\nvar assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    var msg = \"This method only supports Buffer but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsBuffer = assertIsBuffer;\n/**\r\n * Throws if input is not an array\r\n * @param {number[]} input value to check\r\n */\n\nvar assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    var msg = \"This method only supports number arrays but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsArray = assertIsArray;\n/**\r\n * Throws if input is not a string\r\n * @param {string} input value to check\r\n */\n\nvar assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    var msg = \"This method only supports strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\n\nexports.assertIsString = assertIsString;","map":{"version":3,"sources":["../src/helpers.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;AAGG;;;AACI,IAAM,iBAAiB,GAAG,UAAU,KAAV,EAAuB;EACtD,IAAI,CAAC,CAAA,GAAA,UAAA,CAAA,WAAA,EAAY,KAAZ,CAAL,EAAyB;IACvB,IAAM,GAAG,GAAG,oEAAA,MAAA,CAAoE,KAApE,CAAZ;IACA,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;EACD;AACF,CALM;;AAAM,OAAA,CAAA,iBAAA,GAAiB,iBAAjB;AAOb;;;AAGG;;AACI,IAAM,cAAc,GAAG,UAAU,KAAV,EAAuB;EACnD,IAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAL,EAA6B;IAC3B,IAAM,GAAG,GAAG,mDAAA,MAAA,CAAmD,KAAnD,CAAZ;IACA,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;EACD;AACF,CALM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;AAOb;;;AAGG;;AACI,IAAM,aAAa,GAAG,UAAU,KAAV,EAAyB;EACpD,IAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;IACzB,IAAM,GAAG,GAAG,0DAAA,MAAA,CAA0D,KAA1D,CAAZ;IACA,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;EACD;AACF,CALM;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;AAOb;;;AAGG;;AACI,IAAM,cAAc,GAAG,UAAU,KAAV,EAAuB;EACnD,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;IAC7B,IAAM,GAAG,GAAG,oDAAA,MAAA,CAAoD,KAApD,CAAZ;IACA,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;EACD;AACF,CALM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\r\nvar internal_1 = require(\"./internal\");\r\n/**\r\n * Throws if a string is not hex prefixed\r\n * @param {string} input string to check hex prefix of\r\n */\r\nvar assertIsHexString = function (input) {\r\n    if (!(0, internal_1.isHexString)(input)) {\r\n        var msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\r\n        throw new Error(msg);\r\n    }\r\n};\r\nexports.assertIsHexString = assertIsHexString;\r\n/**\r\n * Throws if input is not a buffer\r\n * @param {Buffer} input value to check\r\n */\r\nvar assertIsBuffer = function (input) {\r\n    if (!Buffer.isBuffer(input)) {\r\n        var msg = \"This method only supports Buffer but input was: \".concat(input);\r\n        throw new Error(msg);\r\n    }\r\n};\r\nexports.assertIsBuffer = assertIsBuffer;\r\n/**\r\n * Throws if input is not an array\r\n * @param {number[]} input value to check\r\n */\r\nvar assertIsArray = function (input) {\r\n    if (!Array.isArray(input)) {\r\n        var msg = \"This method only supports number arrays but input was: \".concat(input);\r\n        throw new Error(msg);\r\n    }\r\n};\r\nexports.assertIsArray = assertIsArray;\r\n/**\r\n * Throws if input is not a string\r\n * @param {string} input value to check\r\n */\r\nvar assertIsString = function (input) {\r\n    if (typeof input !== 'string') {\r\n        var msg = \"This method only supports strings but input was: \".concat(input);\r\n        throw new Error(msg);\r\n    }\r\n};\r\nexports.assertIsString = assertIsString;\r\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"script"}