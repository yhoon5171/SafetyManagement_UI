{"ast":null,"code":"var _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar reduceValue = function reduceValue(_, v) {\n  return v;\n};\n\nvar tcpUri = function tcpUri(str, port, parts, opts) {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return \"tcp://\".concat(str, \":\").concat(port); // check if tcp is the last protocol in multiaddr\n\n  var protocol = 'tcp';\n  var explicitPort = \":\".concat(port);\n  var last = parts[parts.length - 1];\n\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n\n  return \"\".concat(protocol, \"://\").concat(str).concat(explicitPort);\n};\n\nvar Reducers = {\n  ip4: reduceValue,\n  ip6: function ip6(str, content, i, parts) {\n    return parts.length === 1 && parts[0].protocol === 'ip6' ? content : \"[\".concat(content, \"]\");\n  },\n  tcp: function tcp(str, content, i, parts, opts) {\n    return parts.some(function (p) {\n      return ['http', 'https', 'ws', 'wss'].includes(p.protocol);\n    }) ? \"\".concat(str, \":\").concat(content) : tcpUri(str, content, parts, opts);\n  },\n  udp: function udp(str, content) {\n    return \"udp://\".concat(str, \":\").concat(content);\n  },\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: function ipfs(str, content) {\n    return \"\".concat(str, \"/ipfs/\").concat(content);\n  },\n  p2p: function p2p(str, content) {\n    return \"\".concat(str, \"/p2p/\").concat(content);\n  },\n  http: function http(str) {\n    return \"http://\".concat(str);\n  },\n  https: function https(str) {\n    return \"https://\".concat(str);\n  },\n  ws: function ws(str) {\n    return \"ws://\".concat(str);\n  },\n  wss: function wss(str) {\n    return \"wss://\".concat(str);\n  },\n  'p2p-websocket-star': function p2pWebsocketStar(str) {\n    return \"\".concat(str, \"/p2p-websocket-star\");\n  },\n  'p2p-webrtc-star': function p2pWebrtcStar(str) {\n    return \"\".concat(str, \"/p2p-webrtc-star\");\n  },\n  'p2p-webrtc-direct': function p2pWebrtcDirect(str) {\n    return \"\".concat(str, \"/p2p-webrtc-direct\");\n  }\n};\n\nmodule.exports = function (multiaddr, opts) {\n  var ma = new Multiaddr(multiaddr);\n  var parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(function (tuple) {\n    return {\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    };\n  }).reduce(function (str, part, i, parts) {\n    var reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(\"Unsupported protocol \".concat(part.protocol));\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n};","map":{"version":3,"names":["require","Multiaddr","reduceValue","_","v","tcpUri","str","port","parts","opts","assumeHttp","protocol","explicitPort","last","length","Reducers","ip4","ip6","content","i","tcp","some","p","includes","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","module","exports","multiaddr","ma","toString","split","slice","tuples","map","tuple","shift","reduce","part","Error"],"sources":["/home/ubuntu/SafetyManagement_UI/client/node_modules/multiaddr-to-uri/index.js"],"sourcesContent":["const { Multiaddr } = require('multiaddr')\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}