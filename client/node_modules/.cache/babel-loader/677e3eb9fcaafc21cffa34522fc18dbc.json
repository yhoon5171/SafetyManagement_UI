{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _digest = require('./digest.js');\n\nvar from = function from(_ref) {\n  var name = _ref.name,\n      code = _ref.code,\n      encode = _ref.encode;\n  return new Hasher(name, code, encode);\n};\n\nvar Hasher = /*#__PURE__*/function () {\n  function Hasher(name, code, encode) {\n    _classCallCheck(this, Hasher);\n\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n\n  _createClass(Hasher, [{\n    key: \"digest\",\n    value: function digest(input) {\n      var _this = this;\n\n      if (input instanceof Uint8Array) {\n        var result = this.encode(input);\n        return result instanceof Uint8Array ? _digest.create(this.code, result) : result.then(function (digest$1) {\n          return _digest.create(_this.code, digest$1);\n        });\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n\n  return Hasher;\n}();\n\nexports.Hasher = Hasher;\nexports.from = from;","map":{"version":3,"names":["Object","defineProperty","exports","value","digest","require","from","name","code","encode","Hasher","input","Uint8Array","result","create","then","digest$1","Error"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/multiformats/cjs/src/hashes/hasher.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar digest = require('./digest.js');\r\n\r\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\r\nclass Hasher {\r\n  constructor(name, code, encode) {\r\n    this.name = name;\r\n    this.code = code;\r\n    this.encode = encode;\r\n  }\r\n  digest(input) {\r\n    if (input instanceof Uint8Array) {\r\n      const result = this.encode(input);\r\n      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));\r\n    } else {\r\n      throw Error('Unknown type, must be binary type');\r\n    }\r\n  }\r\n}\r\n\r\nexports.Hasher = Hasher;\r\nexports.from = from;\r\n"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,OAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;EAAA,IAAEC,IAAF,QAAEA,IAAF;EAAA,IAAQC,IAAR,QAAQA,IAAR;EAAA,IAAcC,MAAd,QAAcA,MAAd;EAAA,OAA0B,IAAIC,MAAJ,CAAWH,IAAX,EAAiBC,IAAjB,EAAuBC,MAAvB,CAA1B;AAAA,CAAb;;IACMC,M;EACJ,gBAAYH,IAAZ,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;IAAA;;IAC9B,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;;;;WACD,gBAAOE,KAAP,EAAc;MAAA;;MACZ,IAAIA,KAAK,YAAYC,UAArB,EAAiC;QAC/B,IAAMC,MAAM,GAAG,KAAKJ,MAAL,CAAYE,KAAZ,CAAf;QACA,OAAOE,MAAM,YAAYD,UAAlB,GAA+BR,OAAM,CAACU,MAAP,CAAc,KAAKN,IAAnB,EAAyBK,MAAzB,CAA/B,GAAkEA,MAAM,CAACE,IAAP,CAAY,UAAAC,QAAQ;UAAA,OAAIZ,OAAM,CAACU,MAAP,CAAc,KAAI,CAACN,IAAnB,EAAyBQ,QAAzB,CAAJ;QAAA,CAApB,CAAzE;MACD,CAHD,MAGO;QACL,MAAMC,KAAK,CAAC,mCAAD,CAAX;MACD;IACF;;;;;;AAGHf,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;AACAR,OAAO,CAACI,IAAR,GAAeA,IAAf"},"metadata":{},"sourceType":"script"}