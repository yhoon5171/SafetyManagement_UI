{"ast":null,"code":"const {\n  Transform\n} = require('readable-stream');\n\nmodule.exports = KeccakState => class Shake extends Transform {\n  constructor(rate, capacity, delimitedSuffix, options) {\n    super(options);\n    this._rate = rate;\n    this._capacity = capacity;\n    this._delimitedSuffix = delimitedSuffix;\n    this._options = options;\n    this._state = new KeccakState();\n\n    this._state.initialize(rate, capacity);\n\n    this._finalized = false;\n  }\n\n  _transform(chunk, encoding, callback) {\n    let error = null;\n\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n\n    callback(error);\n  }\n\n  _flush() {}\n\n  _read(size) {\n    this.push(this.squeeze(size));\n  }\n\n  update(data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Squeeze already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n\n    this._state.absorb(data);\n\n    return this;\n  }\n\n  squeeze(dataByteLength, encoding) {\n    if (!this._finalized) {\n      this._finalized = true;\n\n      this._state.absorbLastFewBits(this._delimitedSuffix);\n    }\n\n    let data = this._state.squeeze(dataByteLength);\n\n    if (encoding !== undefined) data = data.toString(encoding);\n    return data;\n  }\n\n  _resetState() {\n    this._state.initialize(this._rate, this._capacity);\n\n    return this;\n  }\n\n  _clone() {\n    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);\n\n    this._state.copy(clone._state);\n\n    clone._finalized = this._finalized;\n    return clone;\n  }\n\n};","map":{"version":3,"names":["Transform","require","module","exports","KeccakState","Shake","constructor","rate","capacity","delimitedSuffix","options","_rate","_capacity","_delimitedSuffix","_options","_state","initialize","_finalized","_transform","chunk","encoding","callback","error","update","err","_flush","_read","size","push","squeeze","data","Buffer","isBuffer","TypeError","Error","from","absorb","dataByteLength","absorbLastFewBits","undefined","toString","_resetState","_clone","clone","copy"],"sources":["C:/Users/Runner/Desktop/test1/SafetyManagement_UI/client/node_modules/keccak/lib/api/shake.js"],"sourcesContent":["const { Transform } = require('readable-stream')\r\n\r\nmodule.exports = (KeccakState) => class Shake extends Transform {\r\n  constructor (rate, capacity, delimitedSuffix, options) {\r\n    super(options)\r\n\r\n    this._rate = rate\r\n    this._capacity = capacity\r\n    this._delimitedSuffix = delimitedSuffix\r\n    this._options = options\r\n\r\n    this._state = new KeccakState()\r\n    this._state.initialize(rate, capacity)\r\n    this._finalized = false\r\n  }\r\n\r\n  _transform (chunk, encoding, callback) {\r\n    let error = null\r\n    try {\r\n      this.update(chunk, encoding)\r\n    } catch (err) {\r\n      error = err\r\n    }\r\n\r\n    callback(error)\r\n  }\r\n\r\n  _flush () {}\r\n\r\n  _read (size) {\r\n    this.push(this.squeeze(size))\r\n  }\r\n\r\n  update (data, encoding) {\r\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\r\n    if (this._finalized) throw new Error('Squeeze already called')\r\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\r\n\r\n    this._state.absorb(data)\r\n\r\n    return this\r\n  }\r\n\r\n  squeeze (dataByteLength, encoding) {\r\n    if (!this._finalized) {\r\n      this._finalized = true\r\n      this._state.absorbLastFewBits(this._delimitedSuffix)\r\n    }\r\n\r\n    let data = this._state.squeeze(dataByteLength)\r\n    if (encoding !== undefined) data = data.toString(encoding)\r\n\r\n    return data\r\n  }\r\n\r\n  _resetState () {\r\n    this._state.initialize(this._rate, this._capacity)\r\n    return this\r\n  }\r\n\r\n  _clone () {\r\n    const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)\r\n    this._state.copy(clone._state)\r\n    clone._finalized = this._finalized\r\n\r\n    return clone\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,iBAAD,CAA7B;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,WAAD,IAAiB,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;EAC9DM,WAAW,CAAEC,IAAF,EAAQC,QAAR,EAAkBC,eAAlB,EAAmCC,OAAnC,EAA4C;IACrD,MAAMA,OAAN;IAEA,KAAKC,KAAL,GAAaJ,IAAb;IACA,KAAKK,SAAL,GAAiBJ,QAAjB;IACA,KAAKK,gBAAL,GAAwBJ,eAAxB;IACA,KAAKK,QAAL,GAAgBJ,OAAhB;IAEA,KAAKK,MAAL,GAAc,IAAIX,WAAJ,EAAd;;IACA,KAAKW,MAAL,CAAYC,UAAZ,CAAuBT,IAAvB,EAA6BC,QAA7B;;IACA,KAAKS,UAAL,GAAkB,KAAlB;EACD;;EAEDC,UAAU,CAAEC,KAAF,EAASC,QAAT,EAAmBC,QAAnB,EAA6B;IACrC,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAI;MACF,KAAKC,MAAL,CAAYJ,KAAZ,EAAmBC,QAAnB;IACD,CAFD,CAEE,OAAOI,GAAP,EAAY;MACZF,KAAK,GAAGE,GAAR;IACD;;IAEDH,QAAQ,CAACC,KAAD,CAAR;EACD;;EAEDG,MAAM,GAAI,CAAE;;EAEZC,KAAK,CAAEC,IAAF,EAAQ;IACX,KAAKC,IAAL,CAAU,KAAKC,OAAL,CAAaF,IAAb,CAAV;EACD;;EAEDJ,MAAM,CAAEO,IAAF,EAAQV,QAAR,EAAkB;IACtB,IAAI,CAACW,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAD,IAA0B,OAAOA,IAAP,KAAgB,QAA9C,EAAwD,MAAM,IAAIG,SAAJ,CAAc,mCAAd,CAAN;IACxD,IAAI,KAAKhB,UAAT,EAAqB,MAAM,IAAIiB,KAAJ,CAAU,wBAAV,CAAN;IACrB,IAAI,CAACH,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAL,EAA4BA,IAAI,GAAGC,MAAM,CAACI,IAAP,CAAYL,IAAZ,EAAkBV,QAAlB,CAAP;;IAE5B,KAAKL,MAAL,CAAYqB,MAAZ,CAAmBN,IAAnB;;IAEA,OAAO,IAAP;EACD;;EAEDD,OAAO,CAAEQ,cAAF,EAAkBjB,QAAlB,EAA4B;IACjC,IAAI,CAAC,KAAKH,UAAV,EAAsB;MACpB,KAAKA,UAAL,GAAkB,IAAlB;;MACA,KAAKF,MAAL,CAAYuB,iBAAZ,CAA8B,KAAKzB,gBAAnC;IACD;;IAED,IAAIiB,IAAI,GAAG,KAAKf,MAAL,CAAYc,OAAZ,CAAoBQ,cAApB,CAAX;;IACA,IAAIjB,QAAQ,KAAKmB,SAAjB,EAA4BT,IAAI,GAAGA,IAAI,CAACU,QAAL,CAAcpB,QAAd,CAAP;IAE5B,OAAOU,IAAP;EACD;;EAEDW,WAAW,GAAI;IACb,KAAK1B,MAAL,CAAYC,UAAZ,CAAuB,KAAKL,KAA5B,EAAmC,KAAKC,SAAxC;;IACA,OAAO,IAAP;EACD;;EAED8B,MAAM,GAAI;IACR,MAAMC,KAAK,GAAG,IAAItC,KAAJ,CAAU,KAAKM,KAAf,EAAsB,KAAKC,SAA3B,EAAsC,KAAKC,gBAA3C,EAA6D,KAAKC,QAAlE,CAAd;;IACA,KAAKC,MAAL,CAAY6B,IAAZ,CAAiBD,KAAK,CAAC5B,MAAvB;;IACA4B,KAAK,CAAC1B,UAAN,GAAmB,KAAKA,UAAxB;IAEA,OAAO0B,KAAP;EACD;;AAhE6D,CAAhE"},"metadata":{},"sourceType":"script"}