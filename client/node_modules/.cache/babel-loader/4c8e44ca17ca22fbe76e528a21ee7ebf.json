{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"D:/\\uACF5\\uD504\\uAE30/Capstone test/SafetyManagement_UI/client/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('../lib/configure.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar nativeAbortController = require('native-abort-controller');\n\nvar createPut = function createPut(codecs, options) {\n  var fn = configure.configure(function (api) {\n    var put = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dagNode) {\n        var options,\n            settings,\n            serialized,\n            storeCodec,\n            controller,\n            signal,\n            res,\n            data,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                settings = _objectSpread({\n                  storeCodec: 'dag-cbor',\n                  hashAlg: 'sha2-256'\n                }, options);\n\n                if (!settings.inputCodec) {\n                  _context.next = 8;\n                  break;\n                }\n\n                if (dagNode instanceof Uint8Array) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Can only inputCodec on raw bytes that can be decoded');\n\n              case 5:\n                serialized = dagNode;\n                _context.next = 13;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return codecs.getCodec(settings.storeCodec);\n\n              case 10:\n                storeCodec = _context.sent;\n                serialized = storeCodec.encode(dagNode);\n                settings.inputCodec = settings.storeCodec;\n\n              case 13:\n                controller = new nativeAbortController.AbortController();\n                signal = abortSignal.abortSignal(controller.signal, settings.signal);\n                _context.t0 = api;\n                _context.t1 = _objectSpread;\n                _context.t2 = {\n                  timeout: settings.timeout,\n                  signal: signal,\n                  searchParams: toUrlSearchParams.toUrlSearchParams(settings)\n                };\n                _context.next = 20;\n                return multipartRequest.multipartRequest([serialized], controller, settings.headers);\n\n              case 20:\n                _context.t3 = _context.sent;\n                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n                _context.next = 24;\n                return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n              case 24:\n                res = _context.sent;\n                _context.next = 27;\n                return res.json();\n\n              case 27:\n                data = _context.sent;\n                return _context.abrupt(\"return\", cid.CID.parse(data.Cid['/']));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function put(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;","map":{"version":3,"names":["Object","defineProperty","exports","value","cid","require","configure","multipartRequest","toUrlSearchParams","abortSignal","nativeAbortController","createPut","codecs","options","fn","api","put","dagNode","settings","storeCodec","hashAlg","inputCodec","Uint8Array","Error","serialized","getCodec","encode","controller","AbortController","signal","timeout","searchParams","headers","post","res","json","data","CID","parse","Cid"],"sources":["D:/공프기/Capstone test/SafetyManagement_UI/client/node_modules/ipfs-http-client/cjs/src/dag/put.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar cid = require('multiformats/cid');\r\nvar configure = require('../lib/configure.js');\r\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\r\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\r\nvar abortSignal = require('../lib/abort-signal.js');\r\nvar nativeAbortController = require('native-abort-controller');\r\n\r\nconst createPut = (codecs, options) => {\r\n  const fn = configure.configure(api => {\r\n    const put = async (dagNode, options = {}) => {\r\n      const settings = {\r\n        storeCodec: 'dag-cbor',\r\n        hashAlg: 'sha2-256',\r\n        ...options\r\n      };\r\n      let serialized;\r\n      if (settings.inputCodec) {\r\n        if (!(dagNode instanceof Uint8Array)) {\r\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\r\n        }\r\n        serialized = dagNode;\r\n      } else {\r\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\r\n        serialized = storeCodec.encode(dagNode);\r\n        settings.inputCodec = settings.storeCodec;\r\n      }\r\n      const controller = new nativeAbortController.AbortController();\r\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\r\n      const res = await api.post('dag/put', {\r\n        timeout: settings.timeout,\r\n        signal,\r\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\r\n        ...await multipartRequest.multipartRequest([serialized], controller, settings.headers)\r\n      });\r\n      const data = await res.json();\r\n      return cid.CID.parse(data.Cid['/']);\r\n    };\r\n    return put;\r\n  });\r\n  return fn(options);\r\n};\r\n\r\nexports.createPut = createPut;\r\n"],"mappings":"AAAA;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,mCAAD,CAA9B;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAIK,qBAAqB,GAAGL,OAAO,CAAC,yBAAD,CAAnC;;AAEA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,OAAT,EAAqB;EACrC,IAAMC,EAAE,GAAGR,SAAS,CAACA,SAAV,CAAoB,UAAAS,GAAG,EAAI;IACpC,IAAMC,GAAG;MAAA,sEAAG,iBAAOC,OAAP;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAgBJ,OAAhB,2DAA0B,EAA1B;gBACJK,QADI;kBAERC,UAAU,EAAE,UAFJ;kBAGRC,OAAO,EAAE;gBAHD,GAILP,OAJK;;gBAAA,KAONK,QAAQ,CAACG,UAPH;kBAAA;kBAAA;gBAAA;;gBAAA,IAQFJ,OAAO,YAAYK,UARjB;kBAAA;kBAAA;gBAAA;;gBAAA,MASA,IAAIC,KAAJ,CAAU,sDAAV,CATA;;cAAA;gBAWRC,UAAU,GAAGP,OAAb;gBAXQ;gBAAA;;cAAA;gBAAA;gBAAA,OAaiBL,MAAM,CAACa,QAAP,CAAgBP,QAAQ,CAACC,UAAzB,CAbjB;;cAAA;gBAaFA,UAbE;gBAcRK,UAAU,GAAGL,UAAU,CAACO,MAAX,CAAkBT,OAAlB,CAAb;gBACAC,QAAQ,CAACG,UAAT,GAAsBH,QAAQ,CAACC,UAA/B;;cAfQ;gBAiBJQ,UAjBI,GAiBS,IAAIjB,qBAAqB,CAACkB,eAA1B,EAjBT;gBAkBJC,MAlBI,GAkBKpB,WAAW,CAACA,WAAZ,CAAwBkB,UAAU,CAACE,MAAnC,EAA2CX,QAAQ,CAACW,MAApD,CAlBL;gBAAA,cAmBQd,GAnBR;gBAAA;gBAAA;kBAoBRe,OAAO,EAAEZ,QAAQ,CAACY,OApBV;kBAqBRD,MAAM,EAANA,MArBQ;kBAsBRE,YAAY,EAAEvB,iBAAiB,CAACA,iBAAlB,CAAoCU,QAApC;gBAtBN;gBAAA;gBAAA,OAuBCX,gBAAgB,CAACA,gBAAjB,CAAkC,CAACiB,UAAD,CAAlC,EAAgDG,UAAhD,EAA4DT,QAAQ,CAACc,OAArE,CAvBD;;cAAA;gBAAA;gBAAA;gBAAA;gBAAA,mBAmBYC,IAnBZ,mBAmBiB,SAnBjB;;cAAA;gBAmBJC,GAnBI;gBAAA;gBAAA,OAyBSA,GAAG,CAACC,IAAJ,EAzBT;;cAAA;gBAyBJC,IAzBI;gBAAA,iCA0BHhC,GAAG,CAACiC,GAAJ,CAAQC,KAAR,CAAcF,IAAI,CAACG,GAAL,CAAS,GAAT,CAAd,CA1BG;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAHvB,GAAG;QAAA;MAAA;IAAA,GAAT;;IA4BA,OAAOA,GAAP;EACD,CA9BU,CAAX;EA+BA,OAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CAjCD;;AAmCAX,OAAO,CAACS,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}