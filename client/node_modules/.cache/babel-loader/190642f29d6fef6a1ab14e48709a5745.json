{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n\nconst cid_1 = require(\"multiformats/cid\");\n\nfunction fromSplit(split) {\n  const [protectedHeader, payload, signature] = split;\n  return {\n    payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature\n    }],\n    link: cid_1.CID.decode(utils_1.fromBase64url(payload))\n  };\n}\n\nfunction encodeSignature(signature) {\n  const encoded = {\n    signature: utils_1.fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = utils_1.fromBase64url(signature.protected);\n  return encoded;\n}\n\nfunction encode(jws) {\n  const payload = utils_1.fromBase64url(jws.payload);\n\n  try {\n    cid_1.CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n\n  const encodedJws = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n  return encodedJws;\n}\n\nfunction decodeSignature(encoded) {\n  const sign = {\n    signature: utils_1.toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = utils_1.toBase64url(encoded.protected);\n  return sign;\n}\n\nfunction decode(encoded) {\n  const decoded = {\n    payload: utils_1.toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}\n\nexports.default = {\n  fromSplit,\n  encode,\n  decode\n};","map":{"version":3,"sources":["../src/signing.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAiCA,SAAS,SAAT,CAAmB,KAAnB,EAAuC;EACrC,MAAM,CAAC,eAAD,EAAkB,OAAlB,EAA2B,SAA3B,IAAwC,KAA9C;EACA,OAAO;IACL,OADK;IAEL,UAAU,EAAE,CAAC;MAAE,SAAS,EAAE,eAAb;MAA8B;IAA9B,CAAD,CAFP;IAGL,IAAI,EAAE,KAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,OAAA,CAAA,aAAA,CAAc,OAAd,CAAX;EAHD,CAAP;AAKD;;AAED,SAAS,eAAT,CAAyB,SAAzB,EAAgD;EAC9C,MAAM,OAAO,GAAqB;IAChC,SAAS,EAAE,OAAA,CAAA,aAAA,CAAc,SAAS,CAAC,SAAxB;EADqB,CAAlC;EAGA,IAAI,SAAS,CAAC,MAAd,EAAsB,OAAO,CAAC,MAAR,GAAiB,SAAS,CAAC,MAA3B;EACtB,IAAI,SAAS,CAAC,SAAd,EAAyB,OAAO,CAAC,SAAR,GAAoB,OAAA,CAAA,aAAA,CAAc,SAAS,CAAC,SAAxB,CAApB;EACzB,OAAO,OAAP;AACD;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAA2B;EACzB,MAAM,OAAO,GAAG,OAAA,CAAA,aAAA,CAAc,GAAG,CAAC,OAAlB,CAAhB;;EACA,IAAI;IACF,KAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,OAAX;EACD,CAFD,CAEE,OAAO,CAAP,EAAU;IACV,MAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;EACD;;EACD,MAAM,UAAU,GAAe;IAC7B,OAD6B;IAE7B,UAAU,EAAE,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAmB,eAAnB;EAFiB,CAA/B;EAIA,OAAO,UAAP;AACD;;AAED,SAAS,eAAT,CAAyB,OAAzB,EAAkD;EAChD,MAAM,IAAI,GAAiB;IACzB,SAAS,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,SAApB;EADc,CAA3B;EAGA,IAAI,OAAO,CAAC,MAAZ,EAAoB,IAAI,CAAC,MAAL,GAAc,OAAO,CAAC,MAAtB;EACpB,IAAI,OAAO,CAAC,SAAZ,EAAuB,IAAI,CAAC,SAAL,GAAiB,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,SAApB,CAAjB;EACvB,OAAO,IAAP;AACD;;AAED,SAAS,MAAT,CAAgB,OAAhB,EAAmC;EACjC,MAAM,OAAO,GAAW;IACtB,OAAO,EAAE,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,OAApB,CADa;IAEtB,UAAU,EAAE,OAAO,CAAC,UAAR,CAAmB,GAAnB,CAAuB,eAAvB;EAFU,CAAxB;EAIA,OAAO,CAAC,IAAR,GAAe,KAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,IAAI,UAAJ,CAAe,OAAO,CAAC,OAAvB,CAAX,CAAf;EACA,OAAO,OAAP;AACD;;AAED,OAAA,CAAA,OAAA,GAAe;EACb,SADa;EAEb,MAFa;EAGb;AAHa,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils_1 = require(\"./utils\");\r\nconst cid_1 = require(\"multiformats/cid\");\r\nfunction fromSplit(split) {\r\n    const [protectedHeader, payload, signature] = split;\r\n    return {\r\n        payload,\r\n        signatures: [{ protected: protectedHeader, signature }],\r\n        link: cid_1.CID.decode(utils_1.fromBase64url(payload)),\r\n    };\r\n}\r\nfunction encodeSignature(signature) {\r\n    const encoded = {\r\n        signature: utils_1.fromBase64url(signature.signature),\r\n    };\r\n    if (signature.header)\r\n        encoded.header = signature.header;\r\n    if (signature.protected)\r\n        encoded.protected = utils_1.fromBase64url(signature.protected);\r\n    return encoded;\r\n}\r\nfunction encode(jws) {\r\n    const payload = utils_1.fromBase64url(jws.payload);\r\n    try {\r\n        cid_1.CID.decode(payload);\r\n    }\r\n    catch (e) {\r\n        throw new Error('Not a valid DagJWS');\r\n    }\r\n    const encodedJws = {\r\n        payload,\r\n        signatures: jws.signatures.map(encodeSignature),\r\n    };\r\n    return encodedJws;\r\n}\r\nfunction decodeSignature(encoded) {\r\n    const sign = {\r\n        signature: utils_1.toBase64url(encoded.signature),\r\n    };\r\n    if (encoded.header)\r\n        sign.header = encoded.header;\r\n    if (encoded.protected)\r\n        sign.protected = utils_1.toBase64url(encoded.protected);\r\n    return sign;\r\n}\r\nfunction decode(encoded) {\r\n    const decoded = {\r\n        payload: utils_1.toBase64url(encoded.payload),\r\n        signatures: encoded.signatures.map(decodeSignature),\r\n    };\r\n    decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\r\n    return decoded;\r\n}\r\nexports.default = {\r\n    fromSplit,\r\n    encode,\r\n    decode,\r\n};\r\n//# sourceMappingURL=signing.js.map"]},"metadata":{},"sourceType":"script"}